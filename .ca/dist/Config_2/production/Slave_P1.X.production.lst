

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Fri Sep 23 22:26:30 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    68                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    70                           	dabs	1,0x7E,2
    71  0000                     
    72                           ; Version 2.40
    73                           ; Generated 17/11/2021 GMT
    74                           ; 
    75                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F887 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  008F                     	;# 
   152  0090                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0093                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0095                     	;# 
   160  0096                     	;# 
   161  0097                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  0105                     	;# 
   171  0107                     	;# 
   172  0108                     	;# 
   173  0109                     	;# 
   174  010C                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  0185                     	;# 
   180  0187                     	;# 
   181  0188                     	;# 
   182  0189                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  000E                     	;# 
   201  000F                     	;# 
   202  0010                     	;# 
   203  0011                     	;# 
   204  0012                     	;# 
   205  0013                     	;# 
   206  0014                     	;# 
   207  0015                     	;# 
   208  0015                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001B                     	;# 
   216  001C                     	;# 
   217  001D                     	;# 
   218  001E                     	;# 
   219  001F                     	;# 
   220  0081                     	;# 
   221  0085                     	;# 
   222  0086                     	;# 
   223  0087                     	;# 
   224  0088                     	;# 
   225  0089                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  008F                     	;# 
   230  0090                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0093                     	;# 
   235  0093                     	;# 
   236  0094                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  0105                     	;# 
   249  0107                     	;# 
   250  0108                     	;# 
   251  0109                     	;# 
   252  010C                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  010F                     	;# 
   257  0185                     	;# 
   258  0187                     	;# 
   259  0188                     	;# 
   260  0189                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  000E                     	;# 
   279  000F                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0013                     	;# 
   284  0014                     	;# 
   285  0015                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  001D                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  0081                     	;# 
   299  0085                     	;# 
   300  0086                     	;# 
   301  0087                     	;# 
   302  0088                     	;# 
   303  0089                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  008F                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0093                     	;# 
   312  0093                     	;# 
   313  0093                     	;# 
   314  0094                     	;# 
   315  0095                     	;# 
   316  0096                     	;# 
   317  0097                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  009F                     	;# 
   326  0105                     	;# 
   327  0107                     	;# 
   328  0108                     	;# 
   329  0109                     	;# 
   330  010C                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  010F                     	;# 
   335  0185                     	;# 
   336  0187                     	;# 
   337  0188                     	;# 
   338  0189                     	;# 
   339  018C                     	;# 
   340  018D                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0008                     	;# 
   350  0009                     	;# 
   351  000A                     	;# 
   352  000B                     	;# 
   353  000C                     	;# 
   354  000D                     	;# 
   355  000E                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  001D                     	;# 
   374  001E                     	;# 
   375  001F                     	;# 
   376  0081                     	;# 
   377  0085                     	;# 
   378  0086                     	;# 
   379  0087                     	;# 
   380  0088                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  008F                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  0105                     	;# 
   405  0107                     	;# 
   406  0108                     	;# 
   407  0109                     	;# 
   408  010C                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  010F                     	;# 
   413  0185                     	;# 
   414  0187                     	;# 
   415  0188                     	;# 
   416  0189                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0008                     	;# 
   428  0009                     	;# 
   429  000A                     	;# 
   430  000B                     	;# 
   431  000C                     	;# 
   432  000D                     	;# 
   433  000E                     	;# 
   434  000E                     	;# 
   435  000F                     	;# 
   436  0010                     	;# 
   437  0011                     	;# 
   438  0012                     	;# 
   439  0013                     	;# 
   440  0014                     	;# 
   441  0015                     	;# 
   442  0015                     	;# 
   443  0016                     	;# 
   444  0017                     	;# 
   445  0018                     	;# 
   446  0019                     	;# 
   447  001A                     	;# 
   448  001B                     	;# 
   449  001B                     	;# 
   450  001C                     	;# 
   451  001D                     	;# 
   452  001E                     	;# 
   453  001F                     	;# 
   454  0081                     	;# 
   455  0085                     	;# 
   456  0086                     	;# 
   457  0087                     	;# 
   458  0088                     	;# 
   459  0089                     	;# 
   460  008C                     	;# 
   461  008D                     	;# 
   462  008E                     	;# 
   463  008F                     	;# 
   464  0090                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0093                     	;# 
   469  0093                     	;# 
   470  0094                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  009F                     	;# 
   482  0105                     	;# 
   483  0107                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  0185                     	;# 
   492  0187                     	;# 
   493  0188                     	;# 
   494  0189                     	;# 
   495  018C                     	;# 
   496  018D                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  000E                     	;# 
   513  000F                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0013                     	;# 
   518  0014                     	;# 
   519  0015                     	;# 
   520  0015                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  001D                     	;# 
   530  001E                     	;# 
   531  001F                     	;# 
   532  0081                     	;# 
   533  0085                     	;# 
   534  0086                     	;# 
   535  0087                     	;# 
   536  0088                     	;# 
   537  0089                     	;# 
   538  008C                     	;# 
   539  008D                     	;# 
   540  008E                     	;# 
   541  008F                     	;# 
   542  0090                     	;# 
   543  0091                     	;# 
   544  0092                     	;# 
   545  0093                     	;# 
   546  0093                     	;# 
   547  0093                     	;# 
   548  0094                     	;# 
   549  0095                     	;# 
   550  0096                     	;# 
   551  0097                     	;# 
   552  0098                     	;# 
   553  0099                     	;# 
   554  009A                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  009F                     	;# 
   560  0105                     	;# 
   561  0107                     	;# 
   562  0108                     	;# 
   563  0109                     	;# 
   564  010C                     	;# 
   565  010C                     	;# 
   566  010D                     	;# 
   567  010E                     	;# 
   568  010F                     	;# 
   569  0185                     	;# 
   570  0187                     	;# 
   571  0188                     	;# 
   572  0189                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  000E                     	;# 
   590  000E                     	;# 
   591  000F                     	;# 
   592  0010                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0013                     	;# 
   596  0014                     	;# 
   597  0015                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0017                     	;# 
   601  0018                     	;# 
   602  0019                     	;# 
   603  001A                     	;# 
   604  001B                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  001D                     	;# 
   608  001E                     	;# 
   609  001F                     	;# 
   610  0081                     	;# 
   611  0085                     	;# 
   612  0086                     	;# 
   613  0087                     	;# 
   614  0088                     	;# 
   615  0089                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  008F                     	;# 
   620  0090                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0093                     	;# 
   624  0093                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0097                     	;# 
   630  0098                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  0105                     	;# 
   639  0107                     	;# 
   640  0108                     	;# 
   641  0109                     	;# 
   642  010C                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  010F                     	;# 
   647  0185                     	;# 
   648  0187                     	;# 
   649  0188                     	;# 
   650  0189                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000D                     	;# 
   667  000E                     	;# 
   668  000E                     	;# 
   669  000F                     	;# 
   670  0010                     	;# 
   671  0011                     	;# 
   672  0012                     	;# 
   673  0013                     	;# 
   674  0014                     	;# 
   675  0015                     	;# 
   676  0015                     	;# 
   677  0016                     	;# 
   678  0017                     	;# 
   679  0018                     	;# 
   680  0019                     	;# 
   681  001A                     	;# 
   682  001B                     	;# 
   683  001B                     	;# 
   684  001C                     	;# 
   685  001D                     	;# 
   686  001E                     	;# 
   687  001F                     	;# 
   688  0081                     	;# 
   689  0085                     	;# 
   690  0086                     	;# 
   691  0087                     	;# 
   692  0088                     	;# 
   693  0089                     	;# 
   694  008C                     	;# 
   695  008D                     	;# 
   696  008E                     	;# 
   697  008F                     	;# 
   698  0090                     	;# 
   699  0091                     	;# 
   700  0092                     	;# 
   701  0093                     	;# 
   702  0093                     	;# 
   703  0093                     	;# 
   704  0094                     	;# 
   705  0095                     	;# 
   706  0096                     	;# 
   707  0097                     	;# 
   708  0098                     	;# 
   709  0099                     	;# 
   710  009A                     	;# 
   711  009B                     	;# 
   712  009C                     	;# 
   713  009D                     	;# 
   714  009E                     	;# 
   715  009F                     	;# 
   716  0105                     	;# 
   717  0107                     	;# 
   718  0108                     	;# 
   719  0109                     	;# 
   720  010C                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  010E                     	;# 
   724  010F                     	;# 
   725  0185                     	;# 
   726  0187                     	;# 
   727  0188                     	;# 
   728  0189                     	;# 
   729  018C                     	;# 
   730  018D                     	;# 
   731                           
   732                           	psect	idataBANK1
   733  1F82                     __pidataBANK1:
   734                           
   735                           ;initializer for _A
   736  1F82  34EB               	retlw	235
   737  1F83  34FF               	retlw	255
   738  1F84  3493               	retlw	147
   739  1F85  343A               	retlw	58
   740                           
   741                           ;initializer for _R1
   742  1F86  3400               	retlw	0
   743  1F87  3440               	retlw	64
   744  1F88  341C               	retlw	28
   745  1F89  3446               	retlw	70
   746                           
   747                           ;initializer for _B
   748  1F8A  3473               	retlw	115
   749  1F8B  347F               	retlw	127
   750  1F8C  3475               	retlw	117
   751  1F8D  3439               	retlw	57
   752                           
   753                           	psect	idataBANK2
   754  102A                     __pidataBANK2:	
   755                           ;initializer for _C
   756                           
   757  102A  3459               	retlw	89
   758  102B  3447               	retlw	71
   759  102C  34BC               	retlw	188
   760  102D  3433               	retlw	51
   761                           
   762                           	psect	idataBANK3
   763  1F6F                     __pidataBANK3:
   764                           
   765                           ;initializer for _OLD_TEMP
   766  1F6F  3496               	retlw	150
   767  1F70  3400               	retlw	0
   768                           
   769                           ;initializer for _last_mov
   770  1F71  3405               	retlw	5
   771  1F72  3400               	retlw	0
   772                           
   773                           ;initializer for _last_LUX
   774  1F73  3408               	retlw	8
   775                           
   776                           ;initializer for _dir
   777  1F74  3405               	retlw	5
   778                           
   779                           ;initializer for _pulso
   780  1F75  3401               	retlw	1
   781                           
   782                           ;initializer for _last_hrs
   783  1F76  341E               	retlw	30
   784                           
   785                           ;initializer for _last_min
   786  1F77  343D               	retlw	61
   787                           
   788                           	psect	strings
   789  1000                     __pstrings:
   790  1000                     stringtab:
   791  1000                     __stringtab:
   792  1000                     stringcode:	
   793                           ;	String table - string pointers are 1 byte each
   794                           
   795  1000                     stringdir:
   796  1000  3010               	movlw	high stringdir
   797  1001  008A               	movwf	10
   798  1002  0804               	movf	4,w
   799  1003  0A84               	incf	4,f
   800  1004  0782               	addwf	2,f
   801  1005                     __stringbase:
   802  1005  3400               	retlw	0
   803  1006                     __end_of__stringtab:
   804  1006                     log@coeff:
   805  1006  3400               	retlw	0
   806  1007  3400               	retlw	0
   807  1008  3400               	retlw	0
   808  1009  3400               	retlw	0
   809  100A  34C4               	retlw	196
   810  100B  34FF               	retlw	255
   811  100C  347F               	retlw	127
   812  100D  343F               	retlw	63
   813  100E  3480               	retlw	128
   814  100F  34EF               	retlw	239
   815  1010  34FF               	retlw	255
   816  1011  34BE               	retlw	190
   817  1012  3490               	retlw	144
   818  1013  34E1               	retlw	225
   819  1014  34A9               	retlw	169
   820  1015  343E               	retlw	62
   821  1016  34EC               	retlw	236
   822  1017  3482               	retlw	130
   823  1018  3476               	retlw	118
   824  1019  34BE               	retlw	190
   825  101A  3482               	retlw	130
   826  101B  34AD               	retlw	173
   827  101C  342B               	retlw	43
   828  101D  343E               	retlw	62
   829  101E  340E               	retlw	14
   830  101F  343C               	retlw	60
   831  1020  34C3               	retlw	195
   832  1021  34BD               	retlw	189
   833  1022  3487               	retlw	135
   834  1023  34D1               	retlw	209
   835  1024  3413               	retlw	19
   836  1025  343D               	retlw	61
   837  1026  3441               	retlw	65
   838  1027  3478               	retlw	120
   839  1028  34D3               	retlw	211
   840  1029  34BB               	retlw	187
   841  102A                     __end_oflog@coeff:
   842  0001                     _TMR0	set	1
   843  0013                     _SSPBUF	set	19
   844  0014                     _SSPCON	set	20
   845  0015                     _CCPR1L	set	21
   846  0012                     _T2CONbits	set	18
   847  001D                     _CCP2CONbits	set	29
   848  001D                     _CCP2CON	set	29
   849  0017                     _CCP1CONbits	set	23
   850  0017                     _CCP1CON	set	23
   851  001E                     _ADRESH	set	30
   852  0019                     _TXREG	set	25
   853  0018                     _RCSTAbits	set	24
   854  0005                     _PORTAbits	set	5
   855  001F                     _ADCON0bits	set	31
   856  000C                     _PIR1bits	set	12
   857  0006                     _PORTBbits	set	6
   858  0008                     _PORTDbits	set	8
   859  000B                     _INTCONbits	set	11
   860  0091                     _SSPCON2bits	set	145
   861  0094                     _SSPSTAT	set	148
   862  0093                     _SSPADD	set	147
   863  0091                     _SSPCON2	set	145
   864  0092                     _PR2	set	146
   865  0087                     _TRISCbits	set	135
   866  009E                     _ADRESL	set	158
   867  008C                     _PIE1bits	set	140
   868  009F                     _ADCON1bits	set	159
   869  0099                     _SPBRG	set	153
   870  009A                     _SPBRGH	set	154
   871  0098                     _TXSTAbits	set	152
   872  008F                     _OSCCONbits	set	143
   873  0096                     _IOCBbits	set	150
   874  0088                     _TRISDbits	set	136
   875  0095                     _WPUBbits	set	149
   876  0081                     _OPTION_REGbits	set	129
   877  0086                     _TRISBbits	set	134
   878  0085                     _TRISAbits	set	133
   879  0187                     _BAUDCTLbits	set	391
   880  0189                     _ANSELH	set	393
   881  0188                     _ANSEL	set	392
   882                           
   883                           	psect	cinit
   884  0015                     start_initialization:	
   885                           ; #config settings
   886                           
   887  0015                     __initialization:
   888                           
   889                           ; Initialize objects allocated to BANK3
   890  0015  1783               	bsf	3,7	;select IRP bank2
   891  0016  30EF               	movlw	low (__pdataBANK3+9)
   892  0017  00FD               	movwf	btemp+-1
   893  0018  301F               	movlw	high __pidataBANK3
   894  0019  00FE               	movwf	btemp
   895  001A  306F               	movlw	low __pidataBANK3
   896  001B  00FF               	movwf	btemp+1
   897  001C  30E6               	movlw	low __pdataBANK3
   898  001D  0084               	movwf	4
   899  001E  120A  158A  2004  120A  118A  	fcall	init_ram0
   900                           
   901                           ; Initialize objects allocated to BANK2
   902  0023  3014               	movlw	low (__pdataBANK2+4)
   903  0024  00FD               	movwf	btemp+-1
   904  0025  3010               	movlw	high __pidataBANK2
   905  0026  00FE               	movwf	btemp
   906  0027  302A               	movlw	low __pidataBANK2
   907  0028  00FF               	movwf	btemp+1
   908  0029  3010               	movlw	low __pdataBANK2
   909  002A  0084               	movwf	4
   910  002B  120A  158A  2004  120A  118A  	fcall	init_ram0
   911                           
   912                           ; Initialize objects allocated to BANK1
   913  0030  1383               	bcf	3,7	;select IRP bank0
   914  0031  30F0               	movlw	low (__pdataBANK1+12)
   915  0032  00FD               	movwf	btemp+-1
   916  0033  301F               	movlw	high __pidataBANK1
   917  0034  00FE               	movwf	btemp
   918  0035  3082               	movlw	low __pidataBANK1
   919  0036  00FF               	movwf	btemp+1
   920  0037  30E4               	movlw	low __pdataBANK1
   921  0038  0084               	movwf	4
   922  0039  120A  158A  2004  120A  118A  	fcall	init_ram0
   923                           
   924                           ; Clear objects allocated to BANK3
   925  003E  1783               	bsf	3,7	;select IRP bank2
   926  003F  30D4               	movlw	low __pbssBANK3
   927  0040  0084               	movwf	4
   928  0041  30E6               	movlw	low (__pbssBANK3+18)
   929  0042  160A  158A  2755  120A  118A  	fcall	clear_ram0
   930                           
   931                           ; Clear objects allocated to BANK1
   932  0047  1383               	bcf	3,7	;select IRP bank0
   933  0048  30D8               	movlw	low __pbssBANK1
   934  0049  0084               	movwf	4
   935  004A  30E4               	movlw	low (__pbssBANK1+12)
   936  004B  160A  158A  2755   	fcall	clear_ram0
   937  004E                     end_of_initialization:	
   938                           ;End of C runtime variable initialization code
   939                           
   940  004E                     __end_of__initialization:
   941  004E  0183               	clrf	3
   942  004F  160A  118A  2BF4   	ljmp	_main	;jump to C main() function
   943                           
   944                           	psect	bssBANK1
   945  00D8                     __pbssBANK1:
   946  00D8                     _R2:
   947  00D8                     	ds	4
   948  00DC                     _logR2:
   949  00DC                     	ds	4
   950  00E0                     _errno:
   951  00E0                     	ds	2
   952  00E2                     _TEMP_POT:
   953  00E2                     	ds	2
   954                           
   955                           	psect	dataBANK1
   956  00E4                     __pdataBANK1:
   957  00E4                     _A:
   958  00E4                     	ds	4
   959  00E8                     _R1:
   960  00E8                     	ds	4
   961  00EC                     _B:
   962  00EC                     	ds	4
   963                           
   964                           	psect	bssBANK3
   965  01D4                     __pbssBANK3:
   966  01D4                     _TC:
   967  01D4                     	ds	4
   968  01D8                     _CH1:
   969  01D8                     	ds	2
   970  01DA                     _CH0:
   971  01DA                     	ds	2
   972  01DC                     _switch_servo:
   973  01DC                     	ds	2
   974  01DE                     _LUX:
   975  01DE                     	ds	1
   976  01DF                     _highCH1:
   977  01DF                     	ds	1
   978  01E0                     _lowCH1:
   979  01E0                     	ds	1
   980  01E1                     _highCH0:
   981  01E1                     	ds	1
   982  01E2                     _lowCH0:
   983  01E2                     	ds	1
   984  01E3                     _hrs:
   985  01E3                     	ds	1
   986  01E4                     _min:
   987  01E4                     	ds	1
   988  01E5                     _p:
   989  01E5                     	ds	1
   990                           
   991                           	psect	dataBANK3
   992  01E6                     __pdataBANK3:
   993  01E6                     _OLD_TEMP:
   994  01E6                     	ds	2
   995  01E8                     _last_mov:
   996  01E8                     	ds	2
   997  01EA                     _last_LUX:
   998  01EA                     	ds	1
   999  01EB                     _dir:
  1000  01EB                     	ds	1
  1001  01EC                     _pulso:
  1002  01EC                     	ds	1
  1003  01ED                     _last_hrs:
  1004  01ED                     	ds	1
  1005  01EE                     _last_min:
  1006  01EE                     	ds	1
  1007                           
  1008                           	psect	dataBANK2
  1009  0110                     __pdataBANK2:
  1010  0110                     _C:
  1011  0110                     	ds	4
  1012                           
  1013                           	psect	inittext
  1014  0800                     init_fetch0:	
  1015                           ;	Called with low address in FSR and high address in W
  1016                           
  1017  0800  087E               	movf	126,w
  1018  0801  008A               	movwf	10
  1019  0802  087F               	movf	127,w
  1020  0803  0082               	movwf	2
  1021  0804                     init_ram0:	
  1022                           ;Called with:
  1023                           ;	high address of idata address in btemp 
  1024                           ;	low address of idata address in btemp+1 
  1025                           ;	low address of data in FSR
  1026                           ;	high address + 1 of data in btemp-1
  1027                           
  1028  0804  2000  120A  158A   	fcall	init_fetch0
  1029  0807  0080               	movwf	0
  1030  0808  0A84               	incf	4,f
  1031  0809  0804               	movf	4,w
  1032  080A  067D               	xorwf	125,w
  1033  080B  1903               	btfsc	3,2
  1034  080C  3400               	retlw	0
  1035  080D  0AFF               	incf	127,f
  1036  080E  1903               	btfsc	3,2
  1037  080F  0AFE               	incf	126,f
  1038  0810  2804               	goto	init_ram0
  1039                           
  1040                           	psect	clrtext
  1041  1F55                     clear_ram0:	
  1042                           ;	Called with FSR containing the base address, and
  1043                           ;	W with the last address+1
  1044                           
  1045  1F55  0064               	clrwdt	;clear the watchdog before getting into this loop
  1046  1F56                     clrloop0:
  1047  1F56  0180               	clrf	0	;clear RAM location pointed to by FSR
  1048  1F57  0A84               	incf	4,f	;increment pointer
  1049  1F58  0604               	xorwf	4,w	;XOR with final address
  1050  1F59  1903               	btfsc	3,2	;have we reached the end yet?
  1051  1F5A  3400               	retlw	0	;all done for this memory range, return
  1052  1F5B  0604               	xorwf	4,w	;XOR again to restore value
  1053  1F5C  2F56               	goto	clrloop0	;do the next byte
  1054                           
  1055                           	psect	cstackBANK3
  1056  0190                     __pcstackBANK3:
  1057  0190                     ??_tmr0_reload:
  1058  0190                     ?_pulse_step:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0190                     ??_adc_ch_switch:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0190                     ??_USART_send:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0190                     ?_pwm_duty_cycle:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0190                     ??_I2C_Master_Start:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0190                     ?_I2C_Master_Write:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0190                     ??_I2C_Master_RepeatedStart:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0190                     ??_I2C_Master_Stop:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0190                     ??_int_osc_MHz:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0190                     ??_pwm_init:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0190                     ?_adc_init:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0190                     ??_tmr0_init:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0190                     ??_I2C_Master_Wait:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0190                     ?_I2C_Master_Read:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0190                     ?___lmul:	
  1101                           ; 2 bytes @ 0x0
  1102                           
  1103  0190                     ?___lldiv:	
  1104                           ; 4 bytes @ 0x0
  1105                           
  1106  0190                     ?___fltol:	
  1107                           ; 4 bytes @ 0x0
  1108                           
  1109  0190                     USART_send@data:	
  1110                           ; 4 bytes @ 0x0
  1111                           
  1112  0190                     adc_init@vref_plus:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0190                     pulse_step@bt:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  0190                     pwm_duty_cycle@duty_cycle:	
  1119                           ; 2 bytes @ 0x0
  1120                           
  1121  0190                     I2C_Master_Write@d:	
  1122                           ; 2 bytes @ 0x0
  1123                           
  1124  0190                     I2C_Master_Read@a:	
  1125                           ; 2 bytes @ 0x0
  1126                           
  1127  0190                     ___lmul@multiplier:	
  1128                           ; 2 bytes @ 0x0
  1129                           
  1130  0190                     ___lldiv@divisor:	
  1131                           ; 4 bytes @ 0x0
  1132                           
  1133  0190                     ___fltol@f1:	
  1134                           ; 4 bytes @ 0x0
  1135                           
  1136                           
  1137                           ; 4 bytes @ 0x0
  1138  0190                     	ds	1
  1139  0191                     adc_init@vref_minus:
  1140                           
  1141                           ; 1 bytes @ 0x1
  1142  0191                     	ds	1
  1143  0192                     ??_LUX_config:
  1144  0192                     ??_pwm_duty_cycle:	
  1145                           ; 1 bytes @ 0x2
  1146                           
  1147  0192                     ??_I2C_Master_Write:	
  1148                           ; 1 bytes @ 0x2
  1149                           
  1150  0192                     ??_I2C_Master_Read:	
  1151                           ; 1 bytes @ 0x2
  1152                           
  1153  0192                     ??_adc_init:	
  1154                           ; 1 bytes @ 0x2
  1155                           
  1156  0192                     int_osc_MHz@freq:	
  1157                           ; 1 bytes @ 0x2
  1158                           
  1159  0192                     adc_ch_switch@channels:	
  1160                           ; 1 bytes @ 0x2
  1161                           
  1162  0192                     pwm_init@channel:	
  1163                           ; 1 bytes @ 0x2
  1164                           
  1165  0192                     tmr0_init@prescaler:	
  1166                           ; 1 bytes @ 0x2
  1167                           
  1168  0192                     pulse_step@signal:	
  1169                           ; 1 bytes @ 0x2
  1170                           
  1171                           
  1172                           ; 2 bytes @ 0x2
  1173  0192                     	ds	2
  1174  0194                     ??_pulse_step:
  1175  0194                     ?_servo:	
  1176                           ; 1 bytes @ 0x4
  1177                           
  1178  0194                     ??___fltol:	
  1179                           ; 1 bytes @ 0x4
  1180                           
  1181  0194                     adc_init@adc_cs:	
  1182                           ; 1 bytes @ 0x4
  1183                           
  1184  0194                     servo@mov:	
  1185                           ; 1 bytes @ 0x4
  1186                           
  1187  0194                     I2C_Master_Read@temp:	
  1188                           ; 2 bytes @ 0x4
  1189                           
  1190  0194                     ___lmul@multiplicand:	
  1191                           ; 2 bytes @ 0x4
  1192                           
  1193  0194                     ___lldiv@dividend:	
  1194                           ; 4 bytes @ 0x4
  1195                           
  1196                           
  1197                           ; 4 bytes @ 0x4
  1198  0194                     	ds	2
  1199  0196                     ??_servo:
  1200                           
  1201                           ; 1 bytes @ 0x6
  1202  0196                     	ds	2
  1203  0198                     ??___lmul:
  1204  0198                     ??___lldiv:	
  1205                           ; 1 bytes @ 0x8
  1206                           
  1207                           
  1208                           ; 1 bytes @ 0x8
  1209  0198                     	ds	1
  1210  0199                     ___fltol@sign1:
  1211  0199                     ___lmul@product:	
  1212                           ; 1 bytes @ 0x9
  1213                           
  1214  0199                     ___lldiv@quotient:	
  1215                           ; 4 bytes @ 0x9
  1216                           
  1217                           
  1218                           ; 4 bytes @ 0x9
  1219  0199                     	ds	1
  1220  019A                     ___fltol@exp1:
  1221                           
  1222                           ; 1 bytes @ 0xA
  1223  019A                     	ds	1
  1224  019B                     ?_motor_dc:
  1225  019B                     motor_dc@temp:	
  1226                           ; 1 bytes @ 0xB
  1227                           
  1228                           
  1229                           ; 2 bytes @ 0xB
  1230  019B                     	ds	2
  1231  019D                     ??_motor_dc:
  1232  019D                     ___lldiv@counter:	
  1233                           ; 1 bytes @ 0xD
  1234                           
  1235                           
  1236                           ; 1 bytes @ 0xD
  1237  019D                     	ds	1
  1238  019E                     ?_USART_set:
  1239  019E                     ?_I2C_Master_Init:	
  1240                           ; 1 bytes @ 0xE
  1241                           
  1242  019E                     ?_calculateLux:	
  1243                           ; 1 bytes @ 0xE
  1244                           
  1245  019E                     calculateLux@broadband:	
  1246                           ; 4 bytes @ 0xE
  1247                           
  1248  019E                     USART_set@baudrate:	
  1249                           ; 2 bytes @ 0xE
  1250                           
  1251  019E                     I2C_Master_Init@c:	
  1252                           ; 4 bytes @ 0xE
  1253                           
  1254                           
  1255                           ; 4 bytes @ 0xE
  1256  019E                     	ds	2
  1257  01A0                     calculateLux@ir:
  1258                           
  1259                           ; 2 bytes @ 0x10
  1260  01A0                     	ds	2
  1261  01A2                     ??_calculateLux:
  1262  01A2                     ??_USART_set:	
  1263                           ; 1 bytes @ 0x12
  1264                           
  1265  01A2                     ??_I2C_Master_Init:	
  1266                           ; 1 bytes @ 0x12
  1267                           
  1268                           
  1269                           ; 1 bytes @ 0x12
  1270  01A2                     	ds	4
  1271  01A6                     calculateLux@lux:
  1272                           
  1273                           ; 4 bytes @ 0x16
  1274  01A6                     	ds	4
  1275  01AA                     calculateLux@ratio1:
  1276                           
  1277                           ; 4 bytes @ 0x1A
  1278  01AA                     	ds	4
  1279  01AE                     ??_setup:
  1280  01AE                     calculateLux@temp:	
  1281                           ; 1 bytes @ 0x1E
  1282                           
  1283                           
  1284                           ; 4 bytes @ 0x1E
  1285  01AE                     	ds	4
  1286  01B2                     calculateLux@b:
  1287                           
  1288                           ; 2 bytes @ 0x22
  1289  01B2                     	ds	2
  1290  01B4                     calculateLux@m:
  1291                           
  1292                           ; 2 bytes @ 0x24
  1293  01B4                     	ds	2
  1294  01B6                     calculateLux@chScale:
  1295                           
  1296                           ; 4 bytes @ 0x26
  1297  01B6                     	ds	4
  1298  01BA                     calculateLux@channel1:
  1299                           
  1300                           ; 4 bytes @ 0x2A
  1301  01BA                     	ds	4
  1302  01BE                     calculateLux@channel0:
  1303                           
  1304                           ; 4 bytes @ 0x2E
  1305  01BE                     	ds	4
  1306  01C2                     calculateLux@ratio:
  1307                           
  1308                           ; 4 bytes @ 0x32
  1309  01C2                     	ds	4
  1310  01C6                     ?___bmul:
  1311  01C6                     ___bmul@multiplicand:	
  1312                           ; 1 bytes @ 0x36
  1313                           
  1314                           
  1315                           ; 1 bytes @ 0x36
  1316  01C6                     	ds	1
  1317  01C7                     ??___bmul:
  1318                           
  1319                           ; 1 bytes @ 0x37
  1320  01C7                     	ds	1
  1321  01C8                     ___bmul@product:
  1322                           
  1323                           ; 1 bytes @ 0x38
  1324  01C8                     	ds	1
  1325  01C9                     ___bmul@multiplier:
  1326                           
  1327                           ; 1 bytes @ 0x39
  1328  01C9                     	ds	1
  1329  01CA                     ??_LUX_read:
  1330  01CA                     ??_bcd_dec:	
  1331                           ; 1 bytes @ 0x3A
  1332                           
  1333                           
  1334                           ; 1 bytes @ 0x3A
  1335  01CA                     	ds	3
  1336  01CD                     bcd_dec@no:
  1337                           
  1338                           ; 1 bytes @ 0x3D
  1339  01CD                     	ds	1
  1340  01CE                     ??_RTC_read:
  1341                           
  1342                           ; 1 bytes @ 0x3E
  1343  01CE                     	ds	2
  1344  01D0                     ??_main:
  1345                           
  1346                           ; 1 bytes @ 0x40
  1347  01D0                     	ds	4
  1348                           
  1349                           	psect	cstackBANK1
  1350  00A0                     __pcstackBANK1:
  1351  00A0                     ___fldiv@rem:
  1352                           
  1353                           ; 4 bytes @ 0x0
  1354  00A0                     	ds	4
  1355  00A4                     ___fldiv@sign:
  1356                           
  1357                           ; 1 bytes @ 0x4
  1358  00A4                     	ds	1
  1359  00A5                     ___fldiv@new_exp:
  1360                           
  1361                           ; 2 bytes @ 0x5
  1362  00A5                     	ds	2
  1363  00A7                     ___fldiv@grs:
  1364                           
  1365                           ; 4 bytes @ 0x7
  1366  00A7                     	ds	4
  1367  00AB                     ___fldiv@bexp:
  1368                           
  1369                           ; 1 bytes @ 0xB
  1370  00AB                     	ds	1
  1371  00AC                     ___fldiv@aexp:
  1372                           
  1373                           ; 1 bytes @ 0xC
  1374  00AC                     	ds	1
  1375  00AD                     ?i1___fltol:
  1376  00AD                     i1___fltol@f1:	
  1377                           ; 4 bytes @ 0xD
  1378                           
  1379                           
  1380                           ; 4 bytes @ 0xD
  1381  00AD                     	ds	4
  1382  00B1                     ??i1___fltol:
  1383                           
  1384                           ; 1 bytes @ 0x11
  1385  00B1                     	ds	5
  1386  00B6                     ?_map:
  1387  00B6                     map@x:	
  1388                           ; 2 bytes @ 0x16
  1389                           
  1390                           
  1391                           ; 2 bytes @ 0x16
  1392  00B6                     	ds	2
  1393  00B8                     map@x0:
  1394                           
  1395                           ; 2 bytes @ 0x18
  1396  00B8                     	ds	2
  1397  00BA                     map@x1:
  1398                           
  1399                           ; 2 bytes @ 0x1A
  1400  00BA                     	ds	2
  1401  00BC                     map@y0:
  1402                           
  1403                           ; 2 bytes @ 0x1C
  1404  00BC                     	ds	2
  1405  00BE                     map@y1:
  1406                           
  1407                           ; 2 bytes @ 0x1E
  1408  00BE                     	ds	2
  1409  00C0                     ??_slave:
  1410                           
  1411                           ; 1 bytes @ 0x20
  1412  00C0                     	ds	8
  1413  00C8                     _slave$1780:
  1414                           
  1415                           ; 4 bytes @ 0x28
  1416  00C8                     	ds	4
  1417  00CC                     _slave$1781:
  1418                           
  1419                           ; 4 bytes @ 0x2C
  1420  00CC                     	ds	4
  1421  00D0                     _slave$1782:
  1422                           
  1423                           ; 4 bytes @ 0x30
  1424  00D0                     	ds	4
  1425  00D4                     _slave$1783:
  1426                           
  1427                           ; 4 bytes @ 0x34
  1428  00D4                     	ds	4
  1429                           
  1430                           	psect	cstackCOMMON
  1431  0070                     __pcstackCOMMON:
  1432  0070                     ?___fleq:
  1433  0070                     ?___flge:	
  1434                           ; 1 bit 
  1435                           
  1436  0070                     ?_tmr0_reload:	
  1437                           ; 1 bit 
  1438                           
  1439  0070                     ?_setup:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0070                     ?_LUX_config:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ?_adc_ch_switch:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ?_RTC_read:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ?_LUX_read:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_USART_send:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_I2C_Master_Start:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ?_I2C_Master_RepeatedStart:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ?_bcd_dec:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?_I2C_Master_Stop:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ?_int_osc_MHz:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ?_pwm_init:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ?_tmr0_init:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ?_slave:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_main:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_I2C_Master_Wait:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?i1_tmr0_reload:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ??i1_tmr0_reload:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_adc_read:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?__Umul8_16:	
  1497                           ; 2 bytes @ 0x0
  1498                           
  1499  0070                     ?___lwdiv:	
  1500                           ; 2 bytes @ 0x0
  1501                           
  1502  0070                     __Umul8_16@multiplicand:	
  1503                           ; 2 bytes @ 0x0
  1504                           
  1505  0070                     ___lwdiv@divisor:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ___fleq@ff1:	
  1509                           ; 2 bytes @ 0x0
  1510                           
  1511  0070                     ___flge@ff1:	
  1512                           ; 4 bytes @ 0x0
  1513                           
  1514                           
  1515                           ; 4 bytes @ 0x0
  1516  0070                     	ds	2
  1517  0072                     ??_adc_read:
  1518  0072                     ??__Umul8_16:	
  1519                           ; 1 bytes @ 0x2
  1520                           
  1521  0072                     ___lwdiv@dividend:	
  1522                           ; 1 bytes @ 0x2
  1523                           
  1524                           
  1525                           ; 2 bytes @ 0x2
  1526  0072                     	ds	2
  1527  0074                     ??___lwdiv:
  1528  0074                     __Umul8_16@product:	
  1529                           ; 1 bytes @ 0x4
  1530                           
  1531  0074                     ___fleq@ff2:	
  1532                           ; 2 bytes @ 0x4
  1533                           
  1534  0074                     ___flge@ff2:	
  1535                           ; 4 bytes @ 0x4
  1536                           
  1537                           
  1538                           ; 4 bytes @ 0x4
  1539  0074                     	ds	1
  1540  0075                     ___lwdiv@quotient:
  1541                           
  1542                           ; 2 bytes @ 0x5
  1543  0075                     	ds	1
  1544  0076                     __Umul8_16@word_mpld:
  1545                           
  1546                           ; 2 bytes @ 0x6
  1547  0076                     	ds	1
  1548  0077                     ___lwdiv@counter:
  1549                           
  1550                           ; 1 bytes @ 0x7
  1551  0077                     	ds	1
  1552  0078                     ??___fleq:
  1553  0078                     ??___flge:	
  1554                           ; 1 bytes @ 0x8
  1555                           
  1556  0078                     __Umul8_16@multiplier:	
  1557                           ; 1 bytes @ 0x8
  1558                           
  1559                           
  1560                           ; 1 bytes @ 0x8
  1561  0078                     	ds	1
  1562  0079                     ?___xxtofl:
  1563  0079                     ___xxtofl@val:	
  1564                           ; 4 bytes @ 0x9
  1565                           
  1566                           
  1567                           ; 4 bytes @ 0x9
  1568  0079                     	ds	3
  1569  007C                     ??_frexp:
  1570                           
  1571                           ; 1 bytes @ 0xC
  1572  007C                     	ds	2
  1573  007E                     ??_map:
  1574  007E                     ??___flsub:	
  1575                           ; 1 bytes @ 0xE
  1576                           
  1577                           
  1578                           	psect	cstackBANK0
  1579  0020                     __pcstackBANK0:	
  1580                           ; 1 bytes @ 0xE
  1581                           
  1582  0020                     ??___xxtofl:
  1583  0020                     ?_frexp:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0020                     frexp@value:	
  1587                           ; 4 bytes @ 0x0
  1588                           
  1589                           
  1590                           ; 4 bytes @ 0x0
  1591  0020                     	ds	4
  1592  0024                     ___xxtofl@sign:
  1593  0024                     frexp@eptr:	
  1594                           ; 1 bytes @ 0x4
  1595                           
  1596                           
  1597                           ; 1 bytes @ 0x4
  1598  0024                     	ds	1
  1599  0025                     ___xxtofl@exp:
  1600                           
  1601                           ; 1 bytes @ 0x5
  1602  0025                     	ds	1
  1603  0026                     ___xxtofl@arg:
  1604                           
  1605                           ; 4 bytes @ 0x6
  1606  0026                     	ds	4
  1607  002A                     ?___fladd:
  1608  002A                     ___fladd@b:	
  1609                           ; 4 bytes @ 0xA
  1610                           
  1611                           
  1612                           ; 4 bytes @ 0xA
  1613  002A                     	ds	4
  1614  002E                     ___fladd@a:
  1615                           
  1616                           ; 4 bytes @ 0xE
  1617  002E                     	ds	4
  1618  0032                     ??___fladd:
  1619                           
  1620                           ; 1 bytes @ 0x12
  1621  0032                     	ds	8
  1622  003A                     ___fladd@signs:
  1623                           
  1624                           ; 1 bytes @ 0x1A
  1625  003A                     	ds	1
  1626  003B                     ___fladd@aexp:
  1627                           
  1628                           ; 1 bytes @ 0x1B
  1629  003B                     	ds	1
  1630  003C                     ___fladd@bexp:
  1631                           
  1632                           ; 1 bytes @ 0x1C
  1633  003C                     	ds	1
  1634  003D                     ___fladd@grs:
  1635                           
  1636                           ; 1 bytes @ 0x1D
  1637  003D                     	ds	1
  1638  003E                     ?___flmul:
  1639  003E                     ___flmul@b:	
  1640                           ; 4 bytes @ 0x1E
  1641                           
  1642                           
  1643                           ; 4 bytes @ 0x1E
  1644  003E                     	ds	4
  1645  0042                     ___flmul@a:
  1646                           
  1647                           ; 4 bytes @ 0x22
  1648  0042                     	ds	4
  1649  0046                     ??___flmul:
  1650                           
  1651                           ; 1 bytes @ 0x26
  1652  0046                     	ds	5
  1653  004B                     ___flmul@sign:
  1654                           
  1655                           ; 1 bytes @ 0x2B
  1656  004B                     	ds	1
  1657  004C                     ___flmul@aexp:
  1658                           
  1659                           ; 1 bytes @ 0x2C
  1660  004C                     	ds	1
  1661  004D                     ___flmul@grs:
  1662                           
  1663                           ; 4 bytes @ 0x2D
  1664  004D                     	ds	4
  1665  0051                     ___flmul@bexp:
  1666                           
  1667                           ; 1 bytes @ 0x31
  1668  0051                     	ds	1
  1669  0052                     ___flmul@prod:
  1670                           
  1671                           ; 4 bytes @ 0x32
  1672  0052                     	ds	4
  1673  0056                     ___flmul@temp:
  1674                           
  1675                           ; 2 bytes @ 0x36
  1676  0056                     	ds	2
  1677  0058                     ?_eval_poly:
  1678  0058                     ?___fldiv:	
  1679                           ; 4 bytes @ 0x38
  1680                           
  1681  0058                     ___fldiv@a:	
  1682                           ; 4 bytes @ 0x38
  1683                           
  1684  0058                     eval_poly@x:	
  1685                           ; 4 bytes @ 0x38
  1686                           
  1687                           
  1688                           ; 4 bytes @ 0x38
  1689  0058                     	ds	4
  1690  005C                     eval_poly@d:
  1691  005C                     ___fldiv@b:	
  1692                           ; 1 bytes @ 0x3C
  1693                           
  1694                           
  1695                           ; 4 bytes @ 0x3C
  1696  005C                     	ds	1
  1697  005D                     eval_poly@n:
  1698                           
  1699                           ; 2 bytes @ 0x3D
  1700  005D                     	ds	2
  1701  005F                     ??_eval_poly:
  1702                           
  1703                           ; 1 bytes @ 0x3F
  1704  005F                     	ds	1
  1705  0060                     ??___fldiv:
  1706                           
  1707                           ; 1 bytes @ 0x40
  1708  0060                     	ds	4
  1709  0064                     eval_poly@res:
  1710                           
  1711                           ; 4 bytes @ 0x44
  1712  0064                     	ds	1
  1713  0065                     ?___flsub:
  1714  0065                     ___flsub@a:	
  1715                           ; 4 bytes @ 0x45
  1716                           
  1717                           
  1718                           ; 4 bytes @ 0x45
  1719  0065                     	ds	3
  1720  0068                     ?_log:
  1721  0068                     log@x:	
  1722                           ; 4 bytes @ 0x48
  1723                           
  1724                           
  1725                           ; 4 bytes @ 0x48
  1726  0068                     	ds	1
  1727  0069                     ___flsub@b:
  1728                           
  1729                           ; 4 bytes @ 0x49
  1730  0069                     	ds	3
  1731  006C                     ??_log:
  1732                           
  1733                           ; 1 bytes @ 0x4C
  1734  006C                     	ds	1
  1735  006D                     i1___fltol@sign1:
  1736  006D                     log@exponent:	
  1737                           ; 1 bytes @ 0x4D
  1738                           
  1739                           
  1740                           ; 2 bytes @ 0x4D
  1741  006D                     	ds	1
  1742  006E                     i1___fltol@exp1:
  1743                           
  1744                           ; 1 bytes @ 0x4E
  1745  006E                     	ds	1
  1746                           
  1747                           	psect	maintext
  1748  13F4                     __pmaintext:	
  1749 ;;
  1750 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1751 ;;
  1752 ;; *************** function _main *****************
  1753 ;; Defined at:
  1754 ;;		line 126 in file "main_slave_p1.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : B00/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1768 ;;      Params:         0       0       0       0       0
  1769 ;;      Locals:         0       0       0       0       0
  1770 ;;      Temps:          0       0       0       4       0
  1771 ;;      Totals:         0       0       0       4       0
  1772 ;;Total ram usage:        4 bytes
  1773 ;; Hardware stack levels required when called: 8
  1774 ;; This function calls:
  1775 ;;		_LUX_config
  1776 ;;		_LUX_read
  1777 ;;		_RTC_read
  1778 ;;		___fltol
  1779 ;;		_adc_ch_switch
  1780 ;;		_motor_dc
  1781 ;;		_pulse_step
  1782 ;;		_servo
  1783 ;;		_setup
  1784 ;; This function is called by:
  1785 ;;		Startup code after reset
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789  13F4                     _main:	
  1790                           ;psect for function _main
  1791                           
  1792                           
  1793                           ;main_slave_p1.c: 127:     setup();
  1794                           
  1795                           ;incstack = 0
  1796                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1797  13F4  160A  118A  252D  160A  118A  	fcall	_setup
  1798                           
  1799                           ;main_slave_p1.c: 128:     LUX_config();
  1800  13F9  160A  118A  22D0  160A  118A  	fcall	_LUX_config
  1801  13FE                     l3943:
  1802                           
  1803                           ;main_slave_p1.c: 130:         PORTDbits.RD2 = dir & 0x01;
  1804  13FE  1683               	bsf	3,5	;RP0=1, select bank3
  1805  13FF  1703               	bsf	3,6	;RP1=1, select bank3
  1806  1400  086B               	movf	_dir^(0+384),w
  1807  1401  3901               	andlw	1
  1808  1402  00D0               	movwf	??_main^(0+384)
  1809  1403  0DD0               	rlf	??_main^(0+384),f
  1810  1404  0DD0               	rlf	??_main^(0+384),f
  1811  1405  1283               	bcf	3,5	;RP0=0, select bank0
  1812  1406  1303               	bcf	3,6	;RP1=0, select bank0
  1813  1407  0808               	movf	8,w	;volatile
  1814  1408  1683               	bsf	3,5	;RP0=1, select bank3
  1815  1409  1703               	bsf	3,6	;RP1=1, select bank3
  1816  140A  0650               	xorwf	??_main^(0+384),w
  1817  140B  39FB               	andlw	-5
  1818  140C  0650               	xorwf	??_main^(0+384),w
  1819  140D  1283               	bcf	3,5	;RP0=0, select bank0
  1820  140E  1303               	bcf	3,6	;RP1=0, select bank0
  1821  140F  0088               	movwf	8	;volatile
  1822                           
  1823                           ;main_slave_p1.c: 131:         pulse_step(dir, pulso);
  1824  1410  1683               	bsf	3,5	;RP0=1, select bank3
  1825  1411  1703               	bsf	3,6	;RP1=1, select bank3
  1826  1412  086B               	movf	_dir^(0+384),w
  1827  1413  00D0               	movwf	??_main^(0+384)
  1828  1414  01D1               	clrf	(??_main^(0+384)+1)
  1829  1415  0850               	movf	??_main^(0+384),w
  1830  1416  0090               	movwf	pulse_step@bt^(0+384)
  1831  1417  0851               	movf	(??_main+1)^(0+384),w
  1832  1418  0091               	movwf	(pulse_step@bt+1)^(0+384)
  1833  1419  086C               	movf	_pulso^(0+384),w
  1834  141A  00D2               	movwf	(??_main+2)^(0+384)
  1835  141B  01D3               	clrf	((??_main+2)^(0+384)+1)
  1836  141C  0852               	movf	(??_main+2)^(0+384),w
  1837  141D  0092               	movwf	pulse_step@signal^(0+384)
  1838  141E  0853               	movf	(??_main+3)^(0+384),w
  1839  141F  0093               	movwf	(pulse_step@signal+1)^(0+384)
  1840  1420  120A  118A  27E4  160A  118A  	fcall	_pulse_step
  1841                           
  1842                           ;main_slave_p1.c: 132:         adc_ch_switch(1);
  1843  1425  3001               	movlw	1
  1844  1426  120A  158A  2087  160A  118A  	fcall	_adc_ch_switch
  1845                           
  1846                           ;main_slave_p1.c: 133:         motor_dc(TC);
  1847  142B  1683               	bsf	3,5	;RP0=1, select bank3
  1848  142C  1703               	bsf	3,6	;RP1=1, select bank3
  1849  142D  0857               	movf	(_TC+3)^(0+384),w
  1850  142E  0093               	movwf	(___fltol@f1+3)^(0+384)
  1851  142F  0856               	movf	(_TC+2)^(0+384),w
  1852  1430  0092               	movwf	(___fltol@f1+2)^(0+384)
  1853  1431  0855               	movf	(_TC+1)^(0+384),w
  1854  1432  0091               	movwf	(___fltol@f1+1)^(0+384)
  1855  1433  0854               	movf	_TC^(0+384),w
  1856  1434  0090               	movwf	___fltol@f1^(0+384)
  1857  1435  160A  118A  24C2  160A  118A  	fcall	___fltol
  1858  143A  0811               	movf	(?___fltol+1)^(0+384),w
  1859  143B  009C               	movwf	(motor_dc@temp+1)^(0+384)
  1860  143C  0810               	movf	?___fltol^(0+384),w
  1861  143D  009B               	movwf	motor_dc@temp^(0+384)
  1862  143E  160A  118A  2044  160A  118A  	fcall	_motor_dc
  1863                           
  1864                           ;main_slave_p1.c: 134:         servo(switch_servo);
  1865  1443  1683               	bsf	3,5	;RP0=1, select bank3
  1866  1444  1703               	bsf	3,6	;RP1=1, select bank3
  1867  1445  085D               	movf	(_switch_servo+1)^(0+384),w
  1868  1446  0095               	movwf	(servo@mov+1)^(0+384)
  1869  1447  085C               	movf	_switch_servo^(0+384),w
  1870  1448  0094               	movwf	servo@mov^(0+384)
  1871  1449  160A  118A  206B  160A  118A  	fcall	_servo
  1872                           
  1873                           ;main_slave_p1.c: 135:         RTC_read();
  1874  144E  120A  158A  212B  160A  118A  	fcall	_RTC_read
  1875                           
  1876                           ;main_slave_p1.c: 136:         LUX_read();
  1877  1453  120A  158A  21DA  160A  118A  	fcall	_LUX_read
  1878  1458  2BFE               	goto	l3943
  1879  1459                     __end_of_main:
  1880                           
  1881                           	psect	text1
  1882  152D                     __ptext1:	
  1883 ;; *************** function _setup *****************
  1884 ;; Defined at:
  1885 ;;		line 275 in file "main_slave_p1.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : B00/0
  1896 ;;		On exit  : 300/100
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1899 ;;      Params:         0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0
  1902 ;;      Totals:         0       0       0       0       0
  1903 ;;Total ram usage:        0 bytes
  1904 ;; Hardware stack levels used: 1
  1905 ;; Hardware stack levels required when called: 7
  1906 ;; This function calls:
  1907 ;;		_I2C_Master_Init
  1908 ;;		_USART_set
  1909 ;;		_adc_init
  1910 ;;		_int_osc_MHz
  1911 ;;		_pwm_init
  1912 ;;		_tmr0_init
  1913 ;;		_tmr0_reload
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919  152D                     _setup:	
  1920                           ;psect for function _setup
  1921                           
  1922                           
  1923                           ;main_slave_p1.c: 276:     int_osc_MHz(1);
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1927  152D  3001               	movlw	1
  1928  152E  160A  118A  20BF  160A  118A  	fcall	_int_osc_MHz
  1929                           
  1930                           ;main_slave_p1.c: 279:     ANSEL = 0x01;
  1931  1533  3001               	movlw	1
  1932  1534  1703               	bsf	3,6	;RP1=1, select bank3
  1933  1535  0088               	movwf	8	;volatile
  1934                           
  1935                           ;main_slave_p1.c: 280:     ANSELH = 0;
  1936  1536  0189               	clrf	9	;volatile
  1937                           
  1938                           ;main_slave_p1.c: 282:     TRISAbits.TRISA0 = 1;
  1939  1537  1303               	bcf	3,6	;RP1=0, select bank1
  1940  1538  1405               	bsf	5,0	;volatile
  1941                           
  1942                           ;main_slave_p1.c: 284:     TRISAbits.TRISA4 = 0;
  1943  1539  1205               	bcf	5,4	;volatile
  1944                           
  1945                           ;main_slave_p1.c: 285:     PORTAbits.RA4 = 0;
  1946  153A  1283               	bcf	3,5	;RP0=0, select bank0
  1947  153B  1205               	bcf	5,4	;volatile
  1948                           
  1949                           ;main_slave_p1.c: 287:     TRISBbits.TRISB0 = 0;
  1950  153C  1683               	bsf	3,5	;RP0=1, select bank1
  1951  153D  1006               	bcf	6,0	;volatile
  1952                           
  1953                           ;main_slave_p1.c: 288:     PORTBbits.RB0 = 0;
  1954  153E  1283               	bcf	3,5	;RP0=0, select bank0
  1955  153F  1006               	bcf	6,0	;volatile
  1956                           
  1957                           ;main_slave_p1.c: 289:     TRISBbits.TRISB1 = 1;
  1958  1540  1683               	bsf	3,5	;RP0=1, select bank1
  1959  1541  1486               	bsf	6,1	;volatile
  1960                           
  1961                           ;main_slave_p1.c: 290:     PORTBbits.RB1 = 0;
  1962  1542  1283               	bcf	3,5	;RP0=0, select bank0
  1963  1543  1086               	bcf	6,1	;volatile
  1964                           
  1965                           ;main_slave_p1.c: 291:     TRISBbits.TRISB2 = 1;
  1966  1544  1683               	bsf	3,5	;RP0=1, select bank1
  1967  1545  1506               	bsf	6,2	;volatile
  1968                           
  1969                           ;main_slave_p1.c: 292:     PORTBbits.RB2 = 0;
  1970  1546  1283               	bcf	3,5	;RP0=0, select bank0
  1971  1547  1106               	bcf	6,2	;volatile
  1972                           
  1973                           ;main_slave_p1.c: 293:     TRISBbits.TRISB7 = 1;
  1974  1548  1683               	bsf	3,5	;RP0=1, select bank1
  1975  1549  1786               	bsf	6,7	;volatile
  1976                           
  1977                           ;main_slave_p1.c: 294:     PORTBbits.RB7 = 0;
  1978  154A  1283               	bcf	3,5	;RP0=0, select bank0
  1979  154B  1386               	bcf	6,7	;volatile
  1980                           
  1981                           ;main_slave_p1.c: 295:     OPTION_REGbits.nRBPU = 0;
  1982  154C  1683               	bsf	3,5	;RP0=1, select bank1
  1983  154D  1381               	bcf	1,7	;volatile
  1984                           
  1985                           ;main_slave_p1.c: 296:     WPUBbits.WPUB = 0x86;
  1986  154E  3086               	movlw	134
  1987  154F  0095               	movwf	21	;volatile
  1988                           
  1989                           ;main_slave_p1.c: 298:     TRISDbits.TRISD1 = 0;
  1990  1550  1088               	bcf	8,1	;volatile
  1991                           
  1992                           ;main_slave_p1.c: 299:     PORTDbits.RD1 = 0;
  1993  1551  1283               	bcf	3,5	;RP0=0, select bank0
  1994  1552  1088               	bcf	8,1	;volatile
  1995                           
  1996                           ;main_slave_p1.c: 300:     TRISDbits.TRISD2 = 0;
  1997  1553  1683               	bsf	3,5	;RP0=1, select bank1
  1998  1554  1108               	bcf	8,2	;volatile
  1999                           
  2000                           ;main_slave_p1.c: 301:     PORTDbits.RD2 = 0;
  2001  1555  1283               	bcf	3,5	;RP0=0, select bank0
  2002  1556  1108               	bcf	8,2	;volatile
  2003                           
  2004                           ;main_slave_p1.c: 302:     TRISDbits.TRISD6 = 0;
  2005  1557  1683               	bsf	3,5	;RP0=1, select bank1
  2006  1558  1308               	bcf	8,6	;volatile
  2007                           
  2008                           ;main_slave_p1.c: 303:     PORTDbits.RD6 = 0;
  2009  1559  1283               	bcf	3,5	;RP0=0, select bank0
  2010  155A  1308               	bcf	8,6	;volatile
  2011                           
  2012                           ;main_slave_p1.c: 305:     pwm_init(1);
  2013  155B  3001               	movlw	1
  2014  155C  160A  118A  2123  160A  118A  	fcall	_pwm_init
  2015                           
  2016                           ;main_slave_p1.c: 306:     USART_set(9600);
  2017  1561  3000               	movlw	0
  2018  1562  1703               	bsf	3,6	;RP1=1, select bank3
  2019  1563  00A1               	movwf	(USART_set@baudrate+3)^(0+384)
  2020  1564  3000               	movlw	0
  2021  1565  00A0               	movwf	(USART_set@baudrate+2)^(0+384)
  2022  1566  3025               	movlw	37
  2023  1567  009F               	movwf	(USART_set@baudrate+1)^(0+384)
  2024  1568  3080               	movlw	128
  2025  1569  009E               	movwf	USART_set@baudrate^(0+384)
  2026  156A  160A  118A  232F  160A  118A  	fcall	_USART_set
  2027                           
  2028                           ;main_slave_p1.c: 307:     adc_init(0,0,0);
  2029  156F  1703               	bsf	3,6	;RP1=1, select bank3
  2030  1570  0190               	clrf	adc_init@vref_plus^(0+384)
  2031  1571  0191               	clrf	adc_init@vref_minus^(0+384)
  2032  1572  3000               	movlw	0
  2033  1573  160A  118A  2459  160A  118A  	fcall	_adc_init
  2034                           
  2035                           ;main_slave_p1.c: 308:     tmr0_init(16);
  2036  1578  3010               	movlw	16
  2037  1579  160A  118A  2391  160A  118A  	fcall	_tmr0_init
  2038                           
  2039                           ;main_slave_p1.c: 309:     tmr0_reload();
  2040  157E  160A  158A  2742  160A  118A  	fcall	_tmr0_reload
  2041                           
  2042                           ;main_slave_p1.c: 310:     I2C_Master_Init(400000);
  2043  1583  3000               	movlw	0
  2044  1584  1683               	bsf	3,5	;RP0=1, select bank3
  2045  1585  1703               	bsf	3,6	;RP1=1, select bank3
  2046  1586  00A1               	movwf	(I2C_Master_Init@c+3)^(0+384)
  2047  1587  3006               	movlw	6
  2048  1588  00A0               	movwf	(I2C_Master_Init@c+2)^(0+384)
  2049  1589  301A               	movlw	26
  2050  158A  009F               	movwf	(I2C_Master_Init@c+1)^(0+384)
  2051  158B  3080               	movlw	128
  2052  158C  009E               	movwf	I2C_Master_Init@c^(0+384)
  2053  158D  160A  118A  20F0   	fcall	_I2C_Master_Init
  2054                           
  2055                           ;main_slave_p1.c: 313:     INTCONbits.GIE = 1;
  2056  1590  178B               	bsf	11,7	;volatile
  2057                           
  2058                           ;main_slave_p1.c: 314:     INTCONbits.PEIE = 1;
  2059  1591  170B               	bsf	11,6	;volatile
  2060                           
  2061                           ;main_slave_p1.c: 315:     INTCONbits.RBIE = 1;
  2062  1592  158B               	bsf	11,3	;volatile
  2063                           
  2064                           ;main_slave_p1.c: 316:     IOCBbits.IOCB1 = 1;
  2065  1593  1496               	bsf	22,1	;volatile
  2066                           
  2067                           ;main_slave_p1.c: 317:     IOCBbits.IOCB2 = 1;
  2068  1594  1516               	bsf	22,2	;volatile
  2069                           
  2070                           ;main_slave_p1.c: 318:     IOCBbits.IOCB7 = 1;
  2071  1595  1796               	bsf	22,7	;volatile
  2072                           
  2073                           ;main_slave_p1.c: 319:     INTCONbits.RBIF = 0;
  2074  1596  100B               	bcf	11,0	;volatile
  2075  1597  0008               	return
  2076  1598                     __end_of_setup:
  2077                           
  2078                           	psect	text2
  2079  1F42                     __ptext2:	
  2080 ;; *************** function _tmr0_reload *****************
  2081 ;; Defined at:
  2082 ;;		line 57 in file "tmr0.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;		None
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;		None
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      void 
  2089 ;; Registers used:
  2090 ;;		wreg
  2091 ;; Tracked objects:
  2092 ;;		On entry : 300/100
  2093 ;;		On exit  : 300/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2096 ;;      Params:         0       0       0       0       0
  2097 ;;      Locals:         0       0       0       0       0
  2098 ;;      Temps:          0       0       0       0       0
  2099 ;;      Totals:         0       0       0       0       0
  2100 ;;Total ram usage:        0 bytes
  2101 ;; Hardware stack levels used: 1
  2102 ;; Hardware stack levels required when called: 5
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_setup
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110  1F42                     _tmr0_reload:	
  2111                           ;psect for function _tmr0_reload
  2112                           
  2113                           
  2114                           ;tmr0.c: 58:     TMR0 = 178;
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _tmr0_reload: [wreg]
  2118  1F42  30B2               	movlw	178
  2119  1F43  1283               	bcf	3,5	;RP0=0, select bank0
  2120  1F44  0081               	movwf	1	;volatile
  2121                           
  2122                           ;tmr0.c: 59:     INTCONbits.T0IF = 0;
  2123  1F45  110B               	bcf	11,2	;volatile
  2124  1F46  0008               	return
  2125  1F47                     __end_of_tmr0_reload:
  2126                           
  2127                           	psect	text3
  2128  1391                     __ptext3:	
  2129 ;; *************** function _tmr0_init *****************
  2130 ;; Defined at:
  2131 ;;		line 13 in file "tmr0.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  prescaler       1    wreg     unsigned char 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  prescaler       1    2[BANK3 ] unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2140 ;; Tracked objects:
  2141 ;;		On entry : 300/0
  2142 ;;		On exit  : 300/100
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2145 ;;      Params:         0       0       0       0       0
  2146 ;;      Locals:         0       0       0       1       0
  2147 ;;      Temps:          0       0       0       2       0
  2148 ;;      Totals:         0       0       0       3       0
  2149 ;;Total ram usage:        3 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 5
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_setup
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159  1391                     _tmr0_init:	
  2160                           ;psect for function _tmr0_init
  2161                           
  2162                           
  2163                           ;incstack = 0
  2164                           ; Regs used in _tmr0_init: [wreg-fsr0h+status,2+status,0]
  2165                           ;tmr0_init@prescaler stored from wreg
  2166  1391  1683               	bsf	3,5	;RP0=1, select bank3
  2167  1392  1703               	bsf	3,6	;RP1=1, select bank3
  2168  1393  0092               	movwf	tmr0_init@prescaler^(0+384)
  2169                           
  2170                           ;tmr0.c: 14:     OPTION_REGbits.T0CS = 0;
  2171  1394  1303               	bcf	3,6	;RP1=0, select bank1
  2172  1395  1281               	bcf	1,5	;volatile
  2173                           
  2174                           ;tmr0.c: 15:     if(prescaler != 0){
  2175  1396  1703               	bsf	3,6	;RP1=1, select bank3
  2176  1397  0812               	movf	tmr0_init@prescaler^(0+384),w
  2177  1398  1903               	btfsc	3,2
  2178  1399  2B9D               	goto	l3255
  2179                           
  2180                           ;tmr0.c: 16:        OPTION_REGbits.PSA = 0;
  2181  139A  1303               	bcf	3,6	;RP1=0, select bank1
  2182  139B  1181               	bcf	1,3	;volatile
  2183                           
  2184                           ;tmr0.c: 17:     }
  2185  139C  2BCB               	goto	l3281
  2186  139D                     l3255:
  2187  139D  0812               	movf	tmr0_init@prescaler^(0+384),w
  2188  139E  1D03               	btfss	3,2
  2189  139F  2BCB               	goto	l3281
  2190                           
  2191                           ;tmr0.c: 19:         OPTION_REGbits.PSA = 1;
  2192  13A0  1303               	bcf	3,6	;RP1=0, select bank1
  2193  13A1  1581               	bsf	1,3	;volatile
  2194  13A2  2BCB               	goto	l3281
  2195  13A3                     l3259:
  2196  13A3                     l3261:	
  2197                           ;tmr0.c: 24:             break;
  2198                           
  2199                           ;tmr0.c: 23:             OPTION_REGbits.PS = 0b000;
  2200                           
  2201  13A3  2BC7               	goto	l3277
  2202  13A4                     l3263:	
  2203                           ;tmr0.c: 27:             break;
  2204                           
  2205                           ;tmr0.c: 26:             OPTION_REGbits.PS = 0b000;
  2206                           
  2207                           
  2208                           ;tmr0.c: 29:             OPTION_REGbits.PS = 0b001;
  2209  13A4  1303               	bcf	3,6	;RP1=0, select bank1
  2210  13A5  0801               	movf	1,w	;volatile
  2211  13A6  39F8               	andlw	-8
  2212  13A7  3801               	iorlw	1
  2213  13A8  2BC1               	goto	L5
  2214  13A9                     l3265:	
  2215                           ;tmr0.c: 30:             break;
  2216                           
  2217                           
  2218                           ;tmr0.c: 32:             OPTION_REGbits.PS = 0b010;
  2219  13A9  1303               	bcf	3,6	;RP1=0, select bank1
  2220  13AA  0801               	movf	1,w	;volatile
  2221  13AB  39F8               	andlw	-8
  2222  13AC  3802               	iorlw	2
  2223  13AD  2BC1               	goto	L5
  2224  13AE                     l3267:	
  2225                           ;tmr0.c: 33:             break;
  2226                           
  2227                           
  2228                           ;tmr0.c: 35:             OPTION_REGbits.PS = 0b011;
  2229  13AE  1303               	bcf	3,6	;RP1=0, select bank1
  2230  13AF  0801               	movf	1,w	;volatile
  2231  13B0  39F8               	andlw	-8
  2232  13B1  3803               	iorlw	3
  2233  13B2  2BC1               	goto	L5
  2234  13B3                     l3269:	
  2235                           ;tmr0.c: 36:             break;
  2236                           
  2237                           
  2238                           ;tmr0.c: 38:             OPTION_REGbits.PS = 0b100;
  2239  13B3  1303               	bcf	3,6	;RP1=0, select bank1
  2240  13B4  0801               	movf	1,w	;volatile
  2241  13B5  39F8               	andlw	-8
  2242  13B6  3804               	iorlw	4
  2243  13B7  2BC1               	goto	L5
  2244  13B8                     l3271:	
  2245                           ;tmr0.c: 39:             break;
  2246                           
  2247                           
  2248                           ;tmr0.c: 41:             OPTION_REGbits.PS = 0b101;
  2249  13B8  1303               	bcf	3,6	;RP1=0, select bank1
  2250  13B9  0801               	movf	1,w	;volatile
  2251  13BA  39F8               	andlw	-8
  2252  13BB  3805               	iorlw	5
  2253  13BC  2BC1               	goto	L5
  2254  13BD                     l3273:	
  2255                           ;tmr0.c: 42:             break;
  2256                           
  2257                           
  2258                           ;tmr0.c: 44:             OPTION_REGbits.PS = 0b110;
  2259  13BD  1303               	bcf	3,6	;RP1=0, select bank1
  2260  13BE  0801               	movf	1,w	;volatile
  2261  13BF  39F8               	andlw	-8
  2262  13C0  3806               	iorlw	6
  2263  13C1                     L5:
  2264  13C1  0081               	movwf	1	;volatile
  2265                           
  2266                           ;tmr0.c: 45:             break;
  2267  13C2  2BF1               	goto	l389
  2268  13C3                     l3275:
  2269                           
  2270                           ;tmr0.c: 47:             OPTION_REGbits.PS = 0b111;
  2271  13C3  3007               	movlw	7
  2272  13C4  1303               	bcf	3,6	;RP1=0, select bank1
  2273  13C5  0481               	iorwf	1,f	;volatile
  2274                           
  2275                           ;tmr0.c: 48:             break;
  2276  13C6  2BF1               	goto	l389
  2277  13C7                     l3277:
  2278                           
  2279                           ;tmr0.c: 50:             OPTION_REGbits.PS = 0b000;
  2280  13C7  30F8               	movlw	-8
  2281  13C8  1303               	bcf	3,6	;RP1=0, select bank1
  2282  13C9  0581               	andwf	1,f	;volatile
  2283                           
  2284                           ;tmr0.c: 51:             break;
  2285  13CA  2BF1               	goto	l389
  2286  13CB                     l3281:
  2287  13CB  1703               	bsf	3,6	;RP1=1, select bank3
  2288  13CC  0812               	movf	tmr0_init@prescaler^(0+384),w
  2289  13CD  0090               	movwf	??_tmr0_init^(0+384)
  2290  13CE  0191               	clrf	(??_tmr0_init^(0+384)+1)
  2291                           
  2292                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2293                           ; Switch size 1, requested type "simple"
  2294                           ; Number of cases is 1, Range of values is 0 to 0
  2295                           ; switch strategies available:
  2296                           ; Name         Instructions Cycles
  2297                           ; simple_byte            4     3 (average)
  2298                           ; direct_byte           11     8 (fixed)
  2299                           ; jumptable            260     6 (fixed)
  2300                           ;	Chosen strategy is simple_byte
  2301  13CF  0811               	movf	(??_tmr0_init+1)^(0+384),w
  2302  13D0  3A00               	xorlw	0	; case 0
  2303  13D1  1903               	skipnz
  2304  13D2  2BD4               	goto	l4127
  2305  13D3  2BC7               	goto	l3277
  2306  13D4                     l4127:
  2307                           
  2308                           ; Switch size 1, requested type "simple"
  2309                           ; Number of cases is 9, Range of values is 0 to 255
  2310                           ; switch strategies available:
  2311                           ; Name         Instructions Cycles
  2312                           ; simple_byte           28    15 (average)
  2313                           ; jumptable            260     6 (fixed)
  2314                           ;	Chosen strategy is simple_byte
  2315  13D4  0810               	movf	??_tmr0_init^(0+384),w
  2316  13D5  3A00               	xorlw	0	; case 0
  2317  13D6  1903               	skipnz
  2318  13D7  2BA3               	goto	l3259
  2319  13D8  3A02               	xorlw	2	; case 2
  2320  13D9  1903               	skipnz
  2321  13DA  2BA3               	goto	l3261
  2322  13DB  3A06               	xorlw	6	; case 4
  2323  13DC  1903               	skipnz
  2324  13DD  2BA4               	goto	l3263
  2325  13DE  3A0C               	xorlw	12	; case 8
  2326  13DF  1903               	skipnz
  2327  13E0  2BA9               	goto	l3265
  2328  13E1  3A18               	xorlw	24	; case 16
  2329  13E2  1903               	skipnz
  2330  13E3  2BAE               	goto	l3267
  2331  13E4  3A30               	xorlw	48	; case 32
  2332  13E5  1903               	skipnz
  2333  13E6  2BB3               	goto	l3269
  2334  13E7  3A60               	xorlw	96	; case 64
  2335  13E8  1903               	skipnz
  2336  13E9  2BB8               	goto	l3271
  2337  13EA  3AC0               	xorlw	192	; case 128
  2338  13EB  1903               	skipnz
  2339  13EC  2BBD               	goto	l3273
  2340  13ED  3A7F               	xorlw	127	; case 255
  2341  13EE  1903               	skipnz
  2342  13EF  2BC3               	goto	l3275
  2343  13F0  2BC7               	goto	l3277
  2344  13F1                     l389:
  2345                           
  2346                           ;tmr0.c: 53:     INTCONbits.T0IE = 1;
  2347  13F1  168B               	bsf	11,5	;volatile
  2348                           
  2349                           ;tmr0.c: 54:     INTCONbits.T0IF = 0;
  2350  13F2  110B               	bcf	11,2	;volatile
  2351  13F3  0008               	return
  2352  13F4                     __end_of_tmr0_init:
  2353                           
  2354                           	psect	text4
  2355  1123                     __ptext4:	
  2356 ;; *************** function _pwm_init *****************
  2357 ;; Defined at:
  2358 ;;		line 12 in file "pwm.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  channel         1    wreg     unsigned char 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  channel         1    2[BANK3 ] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2367 ;; Tracked objects:
  2368 ;;		On entry : B00/0
  2369 ;;		On exit  : B00/100
  2370 ;;		Unchanged: 800/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2372 ;;      Params:         0       0       0       0       0
  2373 ;;      Locals:         0       0       0       1       0
  2374 ;;      Temps:          0       0       0       2       0
  2375 ;;      Totals:         0       0       0       3       0
  2376 ;;Total ram usage:        3 bytes
  2377 ;; Hardware stack levels used: 1
  2378 ;; Hardware stack levels required when called: 5
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_setup
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386  1123                     _pwm_init:	
  2387                           ;psect for function _pwm_init
  2388                           
  2389                           
  2390                           ;incstack = 0
  2391                           ; Regs used in _pwm_init: [wreg-fsr0h+status,2+status,0]
  2392                           ;pwm_init@channel stored from wreg
  2393  1123  1683               	bsf	3,5	;RP0=1, select bank3
  2394  1124  1703               	bsf	3,6	;RP1=1, select bank3
  2395  1125  0092               	movwf	pwm_init@channel^(0+384)
  2396                           
  2397                           ;pwm.c: 13:     switch(channel) {
  2398  1126  293B               	goto	l3177
  2399  1127                     l325:	
  2400                           ;pwm.c: 14:         case 1:
  2401                           
  2402                           
  2403                           ;pwm.c: 15:             TRISCbits.TRISC2 = 1;
  2404  1127  1303               	bcf	3,6	;RP1=0, select bank1
  2405  1128  1507               	bsf	7,2	;volatile
  2406                           
  2407                           ;pwm.c: 16:             CCP1CON = 0;
  2408  1129  1283               	bcf	3,5	;RP0=0, select bank0
  2409  112A  0197               	clrf	23	;volatile
  2410                           
  2411                           ;pwm.c: 17:             CCP1CONbits.P1M = 0;
  2412  112B  303F               	movlw	-193
  2413  112C  0597               	andwf	23,f	;volatile
  2414                           
  2415                           ;pwm.c: 18:             CCP1CONbits.CCP1M = 0b1100;
  2416  112D  0817               	movf	23,w	;volatile
  2417  112E  39F0               	andlw	-16
  2418  112F  380C               	iorlw	12
  2419  1130  0097               	movwf	23	;volatile
  2420                           
  2421                           ;pwm.c: 19:             break;
  2422  1131  294B               	goto	l3179
  2423  1132                     l327:	
  2424                           ;pwm.c: 20:         case 2:
  2425                           
  2426                           
  2427                           ;pwm.c: 21:             TRISCbits.TRISC1 = 1;
  2428  1132  1303               	bcf	3,6	;RP1=0, select bank1
  2429  1133  1487               	bsf	7,1	;volatile
  2430                           
  2431                           ;pwm.c: 22:             CCP2CON = 0;
  2432  1134  1283               	bcf	3,5	;RP0=0, select bank0
  2433  1135  019D               	clrf	29	;volatile
  2434                           
  2435                           ;pwm.c: 23:             CCP2CONbits.CCP2M = 0b1100;
  2436  1136  081D               	movf	29,w	;volatile
  2437  1137  39F0               	andlw	-16
  2438  1138  380C               	iorlw	12
  2439  1139  009D               	movwf	29	;volatile
  2440                           
  2441                           ;pwm.c: 24:             break;
  2442  113A  294B               	goto	l3179
  2443  113B                     l3177:
  2444  113B  0812               	movf	pwm_init@channel^(0+384),w
  2445  113C  0090               	movwf	??_pwm_init^(0+384)
  2446  113D  0191               	clrf	(??_pwm_init^(0+384)+1)
  2447                           
  2448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2449                           ; Switch size 1, requested type "simple"
  2450                           ; Number of cases is 1, Range of values is 0 to 0
  2451                           ; switch strategies available:
  2452                           ; Name         Instructions Cycles
  2453                           ; simple_byte            4     3 (average)
  2454                           ; direct_byte           11     8 (fixed)
  2455                           ; jumptable            260     6 (fixed)
  2456                           ;	Chosen strategy is simple_byte
  2457  113E  0811               	movf	(??_pwm_init+1)^(0+384),w
  2458  113F  3A00               	xorlw	0	; case 0
  2459  1140  1903               	skipnz
  2460  1141  2943               	goto	l4129
  2461  1142  294B               	goto	l3179
  2462  1143                     l4129:
  2463                           
  2464                           ; Switch size 1, requested type "simple"
  2465                           ; Number of cases is 2, Range of values is 1 to 2
  2466                           ; switch strategies available:
  2467                           ; Name         Instructions Cycles
  2468                           ; simple_byte            7     4 (average)
  2469                           ; direct_byte           17    11 (fixed)
  2470                           ; jumptable            263     9 (fixed)
  2471                           ;	Chosen strategy is simple_byte
  2472  1143  0810               	movf	??_pwm_init^(0+384),w
  2473  1144  3A01               	xorlw	1	; case 1
  2474  1145  1903               	skipnz
  2475  1146  2927               	goto	l325
  2476  1147  3A03               	xorlw	3	; case 2
  2477  1148  1903               	skipnz
  2478  1149  2932               	goto	l327
  2479  114A  294B               	goto	l3179
  2480  114B                     l3179:
  2481                           
  2482                           ;pwm.c: 28:     T2CONbits.T2CKPS = 0b11;
  2483  114B  3003               	movlw	3
  2484  114C  1283               	bcf	3,5	;RP0=0, select bank0
  2485  114D  1303               	bcf	3,6	;RP1=0, select bank0
  2486  114E  0492               	iorwf	18,f	;volatile
  2487                           
  2488                           ;pwm.c: 29:     PR2 = 255;
  2489  114F  30FF               	movlw	255
  2490  1150  1683               	bsf	3,5	;RP0=1, select bank1
  2491  1151  0092               	movwf	18	;volatile
  2492                           
  2493                           ;pwm.c: 32:     PIR1bits.TMR2IF = 0;
  2494  1152  1283               	bcf	3,5	;RP0=0, select bank0
  2495  1153  108C               	bcf	12,1	;volatile
  2496                           
  2497                           ;pwm.c: 33:     T2CONbits.TMR2ON = 1;
  2498  1154  1512               	bsf	18,2	;volatile
  2499  1155                     l329:	
  2500                           ;pwm.c: 34:     while(!PIR1bits.TMR2IF);
  2501                           
  2502  1155  1C8C               	btfss	12,1	;volatile
  2503  1156  2955               	goto	l329
  2504                           
  2505                           ;pwm.c: 35:     PIR1bits.TMR2IF = 0;
  2506  1157  108C               	bcf	12,1	;volatile
  2507                           
  2508                           ;pwm.c: 36:     TRISCbits.TRISC2 = 0;
  2509  1158  1683               	bsf	3,5	;RP0=1, select bank1
  2510  1159  1107               	bcf	7,2	;volatile
  2511  115A  0008               	return
  2512  115B                     __end_of_pwm_init:
  2513                           
  2514                           	psect	text5
  2515  10BF                     __ptext5:	
  2516 ;; *************** function _int_osc_MHz *****************
  2517 ;; Defined at:
  2518 ;;		line 13 in file "osc.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  freq            1    wreg     unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  freq            1    2[BANK3 ] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : B00/0
  2529 ;;		On exit  : B00/100
  2530 ;;		Unchanged: 800/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2532 ;;      Params:         0       0       0       0       0
  2533 ;;      Locals:         0       0       0       1       0
  2534 ;;      Temps:          0       0       0       2       0
  2535 ;;      Totals:         0       0       0       3       0
  2536 ;;Total ram usage:        3 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 5
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_setup
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546  10BF                     _int_osc_MHz:	
  2547                           ;psect for function _int_osc_MHz
  2548                           
  2549                           
  2550                           ;incstack = 0
  2551                           ; Regs used in _int_osc_MHz: [wreg-fsr0h+status,2+status,0]
  2552                           ;int_osc_MHz@freq stored from wreg
  2553  10BF  1683               	bsf	3,5	;RP0=1, select bank3
  2554  10C0  1703               	bsf	3,6	;RP1=1, select bank3
  2555  10C1  0092               	movwf	int_osc_MHz@freq^(0+384)
  2556                           
  2557                           ;osc.c: 14:     switch(freq){
  2558  10C2  28D8               	goto	l3155
  2559  10C3                     l3143:
  2560                           
  2561                           ;osc.c: 16:             OSCCONbits.IRCF = 0b100;
  2562  10C3  1303               	bcf	3,6	;RP1=0, select bank1
  2563  10C4  080F               	movf	15,w	;volatile
  2564  10C5  398F               	andlw	-113
  2565  10C6  3840               	iorlw	64
  2566  10C7  28D6               	goto	L8
  2567  10C8                     l3145:	
  2568                           ;osc.c: 17:             break;
  2569                           
  2570                           
  2571                           ;osc.c: 19:             OSCCONbits.IRCF = 0b101;
  2572  10C8  1303               	bcf	3,6	;RP1=0, select bank1
  2573  10C9  080F               	movf	15,w	;volatile
  2574  10CA  398F               	andlw	-113
  2575  10CB  3850               	iorlw	80
  2576  10CC  28D6               	goto	L8
  2577  10CD                     l3147:	
  2578                           ;osc.c: 20:             break;
  2579                           
  2580  10CD  28D2               	goto	l3151
  2581  10CE                     l3149:	
  2582                           ;osc.c: 23:             break;
  2583                           
  2584                           ;osc.c: 22:             OSCCONbits.IRCF = 0b110;
  2585                           
  2586                           
  2587                           ;osc.c: 25:             OSCCONbits.IRCF = 0b111;
  2588  10CE  3070               	movlw	112
  2589  10CF  1303               	bcf	3,6	;RP1=0, select bank1
  2590  10D0  048F               	iorwf	15,f	;volatile
  2591                           
  2592                           ;osc.c: 26:             break;
  2593  10D1  28EE               	goto	l210
  2594  10D2                     l3151:
  2595                           
  2596                           ;osc.c: 28:             OSCCONbits.IRCF = 0b110;
  2597  10D2  1303               	bcf	3,6	;RP1=0, select bank1
  2598  10D3  080F               	movf	15,w	;volatile
  2599  10D4  398F               	andlw	-113
  2600  10D5  3860               	iorlw	96
  2601  10D6                     L8:
  2602  10D6  008F               	movwf	15	;volatile
  2603                           
  2604                           ;osc.c: 29:             break;
  2605  10D7  28EE               	goto	l210
  2606  10D8                     l3155:
  2607  10D8  0812               	movf	int_osc_MHz@freq^(0+384),w
  2608  10D9  0090               	movwf	??_int_osc_MHz^(0+384)
  2609  10DA  0191               	clrf	(??_int_osc_MHz^(0+384)+1)
  2610                           
  2611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2612                           ; Switch size 1, requested type "simple"
  2613                           ; Number of cases is 1, Range of values is 0 to 0
  2614                           ; switch strategies available:
  2615                           ; Name         Instructions Cycles
  2616                           ; simple_byte            4     3 (average)
  2617                           ; direct_byte           11     8 (fixed)
  2618                           ; jumptable            260     6 (fixed)
  2619                           ;	Chosen strategy is simple_byte
  2620  10DB  0811               	movf	(??_int_osc_MHz+1)^(0+384),w
  2621  10DC  3A00               	xorlw	0	; case 0
  2622  10DD  1903               	skipnz
  2623  10DE  28E0               	goto	l4131
  2624  10DF  28D2               	goto	l3151
  2625  10E0                     l4131:
  2626                           
  2627                           ; Switch size 1, requested type "simple"
  2628                           ; Number of cases is 4, Range of values is 1 to 8
  2629                           ; switch strategies available:
  2630                           ; Name         Instructions Cycles
  2631                           ; simple_byte           13     7 (average)
  2632                           ; direct_byte           35    11 (fixed)
  2633                           ; jumptable            263     9 (fixed)
  2634                           ;	Chosen strategy is simple_byte
  2635  10E0  0810               	movf	??_int_osc_MHz^(0+384),w
  2636  10E1  3A01               	xorlw	1	; case 1
  2637  10E2  1903               	skipnz
  2638  10E3  28C3               	goto	l3143
  2639  10E4  3A03               	xorlw	3	; case 2
  2640  10E5  1903               	skipnz
  2641  10E6  28C8               	goto	l3145
  2642  10E7  3A06               	xorlw	6	; case 4
  2643  10E8  1903               	skipnz
  2644  10E9  28CD               	goto	l3147
  2645  10EA  3A0C               	xorlw	12	; case 8
  2646  10EB  1903               	skipnz
  2647  10EC  28CE               	goto	l3149
  2648  10ED  28D2               	goto	l3151
  2649  10EE                     l210:
  2650                           
  2651                           ;osc.c: 31:     OSCCONbits.SCS = 1;
  2652  10EE  140F               	bsf	15,0	;volatile
  2653  10EF  0008               	return
  2654  10F0                     __end_of_int_osc_MHz:
  2655                           
  2656                           	psect	text6
  2657  1459                     __ptext6:	
  2658 ;; *************** function _adc_init *****************
  2659 ;; Defined at:
  2660 ;;		line 14 in file "adc.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  adc_cs          1    wreg     unsigned char 
  2663 ;;  vref_plus       1    0[BANK3 ] unsigned char 
  2664 ;;  vref_minus      1    1[BANK3 ] unsigned char 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  adc_cs          1    4[BANK3 ] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2671 ;; Tracked objects:
  2672 ;;		On entry : 300/300
  2673 ;;		On exit  : 300/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         0       0       0       2       0
  2677 ;;      Locals:         0       0       0       1       0
  2678 ;;      Temps:          0       0       0       2       0
  2679 ;;      Totals:         0       0       0       5       0
  2680 ;;Total ram usage:        5 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 5
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_setup
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690  1459                     _adc_init:	
  2691                           ;psect for function _adc_init
  2692                           
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _adc_init: [wreg-fsr0h+status,2+status,0]
  2696                           ;adc_init@adc_cs stored from wreg
  2697  1459  0094               	movwf	adc_init@adc_cs^(0+384)
  2698                           
  2699                           ;adc.c: 15:     switch(adc_cs){
  2700  145A  2C73               	goto	l3221
  2701  145B                     l3209:
  2702                           
  2703                           ;adc.c: 17:             ADCON0bits.ADCS = 0b00;
  2704  145B  303F               	movlw	-193
  2705  145C  1283               	bcf	3,5	;RP0=0, select bank0
  2706  145D  1303               	bcf	3,6	;RP1=0, select bank0
  2707  145E  059F               	andwf	31,f	;volatile
  2708                           
  2709                           ;adc.c: 18:             break;
  2710  145F  2C90               	goto	l3225
  2711  1460                     l3211:
  2712  1460  2C6C               	goto	l3217
  2713  1461                     l3213:	
  2714                           ;adc.c: 21:             break;
  2715                           
  2716                           ;adc.c: 20:             ADCON0bits.ADCS = 0b01;
  2717                           
  2718                           
  2719                           ;adc.c: 23:             ADCON0bits.ADCS = 0b10;
  2720  1461  1283               	bcf	3,5	;RP0=0, select bank0
  2721  1462  1303               	bcf	3,6	;RP1=0, select bank0
  2722  1463  081F               	movf	31,w	;volatile
  2723  1464  393F               	andlw	-193
  2724  1465  3880               	iorlw	128
  2725  1466  2C71               	goto	L10
  2726  1467                     l3215:	
  2727                           ;adc.c: 24:             break;
  2728                           
  2729                           
  2730                           ;adc.c: 26:             ADCON0bits.ADCS = 0b11;
  2731  1467  30C0               	movlw	192
  2732  1468  1283               	bcf	3,5	;RP0=0, select bank0
  2733  1469  1303               	bcf	3,6	;RP1=0, select bank0
  2734  146A  049F               	iorwf	31,f	;volatile
  2735                           
  2736                           ;adc.c: 27:             break;
  2737  146B  2C90               	goto	l3225
  2738  146C                     l3217:
  2739                           
  2740                           ;adc.c: 29:             ADCON0bits.ADCS = 0b01;
  2741  146C  1283               	bcf	3,5	;RP0=0, select bank0
  2742  146D  1303               	bcf	3,6	;RP1=0, select bank0
  2743  146E  081F               	movf	31,w	;volatile
  2744  146F  393F               	andlw	-193
  2745  1470  3840               	iorlw	64
  2746  1471                     L10:
  2747  1471  009F               	movwf	31	;volatile
  2748                           
  2749                           ;adc.c: 30:             break;
  2750  1472  2C90               	goto	l3225
  2751  1473                     l3221:
  2752  1473  0814               	movf	adc_init@adc_cs^(0+384),w
  2753  1474  0092               	movwf	??_adc_init^(0+384)
  2754  1475  0193               	clrf	(??_adc_init^(0+384)+1)
  2755                           
  2756                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2757                           ; Switch size 1, requested type "simple"
  2758                           ; Number of cases is 1, Range of values is 0 to 0
  2759                           ; switch strategies available:
  2760                           ; Name         Instructions Cycles
  2761                           ; simple_byte            4     3 (average)
  2762                           ; direct_byte           11     8 (fixed)
  2763                           ; jumptable            260     6 (fixed)
  2764                           ;	Chosen strategy is simple_byte
  2765  1476  0813               	movf	(??_adc_init+1)^(0+384),w
  2766  1477  3A00               	xorlw	0	; case 0
  2767  1478  1903               	skipnz
  2768  1479  2C7B               	goto	l4133
  2769  147A  2C6C               	goto	l3217
  2770  147B                     l4133:
  2771                           
  2772                           ; Switch size 1, requested type "simple"
  2773                           ; Number of cases is 4, Range of values is 0 to 3
  2774                           ; switch strategies available:
  2775                           ; Name         Instructions Cycles
  2776                           ; simple_byte           13     7 (average)
  2777                           ; direct_byte           20     8 (fixed)
  2778                           ; jumptable            260     6 (fixed)
  2779                           ;	Chosen strategy is simple_byte
  2780  147B  0812               	movf	??_adc_init^(0+384),w
  2781  147C  3A00               	xorlw	0	; case 0
  2782  147D  1903               	skipnz
  2783  147E  2C5B               	goto	l3209
  2784  147F  3A01               	xorlw	1	; case 1
  2785  1480  1903               	skipnz
  2786  1481  2C60               	goto	l3211
  2787  1482  3A03               	xorlw	3	; case 2
  2788  1483  1903               	skipnz
  2789  1484  2C61               	goto	l3213
  2790  1485  3A01               	xorlw	1	; case 3
  2791  1486  1903               	skipnz
  2792  1487  2C67               	goto	l3215
  2793  1488  2C6C               	goto	l3217
  2794  1489                     l267:	
  2795                           ;adc.c: 33:         case 0:
  2796                           
  2797  1489  2C8D               	goto	l270
  2798  148A                     l269:	
  2799                           ;adc.c: 36:         case 1:
  2800                           
  2801                           ;adc.c: 35:             break;
  2802                           
  2803                           ;adc.c: 34:             ADCON1bits.VCFG0 = 0;
  2804                           
  2805                           
  2806                           ;adc.c: 37:             ADCON1bits.VCFG0 = 1;
  2807  148A  1303               	bcf	3,6	;RP1=0, select bank1
  2808  148B  161F               	bsf	31,4	;volatile
  2809                           
  2810                           ;adc.c: 38:             break;
  2811  148C  2CA9               	goto	l3229
  2812  148D                     l270:	
  2813                           ;adc.c: 39:         default:
  2814                           
  2815                           
  2816                           ;adc.c: 40:             ADCON1bits.VCFG0 = 0;
  2817  148D  1303               	bcf	3,6	;RP1=0, select bank1
  2818  148E  121F               	bcf	31,4	;volatile
  2819                           
  2820                           ;adc.c: 41:             break;
  2821  148F  2CA9               	goto	l3229
  2822  1490                     l3225:
  2823  1490  1683               	bsf	3,5	;RP0=1, select bank3
  2824  1491  1703               	bsf	3,6	;RP1=1, select bank3
  2825  1492  0810               	movf	adc_init@vref_plus^(0+384),w
  2826  1493  0092               	movwf	??_adc_init^(0+384)
  2827  1494  0193               	clrf	(??_adc_init^(0+384)+1)
  2828                           
  2829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2830                           ; Switch size 1, requested type "simple"
  2831                           ; Number of cases is 1, Range of values is 0 to 0
  2832                           ; switch strategies available:
  2833                           ; Name         Instructions Cycles
  2834                           ; simple_byte            4     3 (average)
  2835                           ; direct_byte           11     8 (fixed)
  2836                           ; jumptable            260     6 (fixed)
  2837                           ;	Chosen strategy is simple_byte
  2838  1495  0813               	movf	(??_adc_init+1)^(0+384),w
  2839  1496  3A00               	xorlw	0	; case 0
  2840  1497  1903               	skipnz
  2841  1498  2C9A               	goto	l4135
  2842  1499  2C8D               	goto	l270
  2843  149A                     l4135:
  2844                           
  2845                           ; Switch size 1, requested type "simple"
  2846                           ; Number of cases is 2, Range of values is 0 to 1
  2847                           ; switch strategies available:
  2848                           ; Name         Instructions Cycles
  2849                           ; simple_byte            7     4 (average)
  2850                           ; direct_byte           14     8 (fixed)
  2851                           ; jumptable            260     6 (fixed)
  2852                           ;	Chosen strategy is simple_byte
  2853  149A  0812               	movf	??_adc_init^(0+384),w
  2854  149B  3A00               	xorlw	0	; case 0
  2855  149C  1903               	skipnz
  2856  149D  2C89               	goto	l267
  2857  149E  3A01               	xorlw	1	; case 1
  2858  149F  1903               	skipnz
  2859  14A0  2C8A               	goto	l269
  2860  14A1  2C8D               	goto	l270
  2861  14A2                     l272:	
  2862                           ;adc.c: 44:         case 0:
  2863                           
  2864  14A2  2CA6               	goto	l275
  2865  14A3                     l274:	
  2866                           ;adc.c: 47:         case 1:
  2867                           
  2868                           ;adc.c: 46:             break;
  2869                           
  2870                           ;adc.c: 45:             ADCON1bits.VCFG1 = 0;
  2871                           
  2872                           
  2873                           ;adc.c: 48:             ADCON1bits.VCFG1 = 1;
  2874  14A3  1303               	bcf	3,6	;RP1=0, select bank1
  2875  14A4  169F               	bsf	31,5	;volatile
  2876                           
  2877                           ;adc.c: 49:             break;
  2878  14A5  2CBA               	goto	l273
  2879  14A6                     l275:	
  2880                           ;adc.c: 50:         default:
  2881                           
  2882                           
  2883                           ;adc.c: 51:             ADCON1bits.VCFG1 = 0;
  2884  14A6  1303               	bcf	3,6	;RP1=0, select bank1
  2885  14A7  129F               	bcf	31,5	;volatile
  2886                           
  2887                           ;adc.c: 52:             break;
  2888  14A8  2CBA               	goto	l273
  2889  14A9                     l3229:
  2890  14A9  1703               	bsf	3,6	;RP1=1, select bank3
  2891  14AA  0811               	movf	adc_init@vref_minus^(0+384),w
  2892  14AB  0092               	movwf	??_adc_init^(0+384)
  2893  14AC  0193               	clrf	(??_adc_init^(0+384)+1)
  2894                           
  2895                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2896                           ; Switch size 1, requested type "simple"
  2897                           ; Number of cases is 1, Range of values is 0 to 0
  2898                           ; switch strategies available:
  2899                           ; Name         Instructions Cycles
  2900                           ; simple_byte            4     3 (average)
  2901                           ; direct_byte           11     8 (fixed)
  2902                           ; jumptable            260     6 (fixed)
  2903                           ;	Chosen strategy is simple_byte
  2904  14AD  0813               	movf	(??_adc_init+1)^(0+384),w
  2905  14AE  3A00               	xorlw	0	; case 0
  2906  14AF  1903               	skipnz
  2907  14B0  2CB2               	goto	l4137
  2908  14B1  2CA6               	goto	l275
  2909  14B2                     l4137:
  2910                           
  2911                           ; Switch size 1, requested type "simple"
  2912                           ; Number of cases is 2, Range of values is 0 to 1
  2913                           ; switch strategies available:
  2914                           ; Name         Instructions Cycles
  2915                           ; simple_byte            7     4 (average)
  2916                           ; direct_byte           14     8 (fixed)
  2917                           ; jumptable            260     6 (fixed)
  2918                           ;	Chosen strategy is simple_byte
  2919  14B2  0812               	movf	??_adc_init^(0+384),w
  2920  14B3  3A00               	xorlw	0	; case 0
  2921  14B4  1903               	skipnz
  2922  14B5  2CA2               	goto	l272
  2923  14B6  3A01               	xorlw	1	; case 1
  2924  14B7  1903               	skipnz
  2925  14B8  2CA3               	goto	l274
  2926  14B9  2CA6               	goto	l275
  2927  14BA                     l273:
  2928                           
  2929                           ;adc.c: 54:     ADCON1bits.ADFM = 1;
  2930  14BA  179F               	bsf	31,7	;volatile
  2931                           
  2932                           ;adc.c: 55:     ADCON0bits.ADON = 1;
  2933  14BB  1283               	bcf	3,5	;RP0=0, select bank0
  2934  14BC  141F               	bsf	31,0	;volatile
  2935                           
  2936                           ;adc.c: 56:     PIE1bits.ADIE = 1;
  2937  14BD  1683               	bsf	3,5	;RP0=1, select bank1
  2938  14BE  170C               	bsf	12,6	;volatile
  2939                           
  2940                           ;adc.c: 57:     PIR1bits.ADIF = 0;
  2941  14BF  1283               	bcf	3,5	;RP0=0, select bank0
  2942  14C0  130C               	bcf	12,6	;volatile
  2943  14C1  0008               	return
  2944  14C2                     __end_of_adc_init:
  2945                           
  2946                           	psect	text7
  2947  132F                     __ptext7:	
  2948 ;; *************** function _USART_set *****************
  2949 ;; Defined at:
  2950 ;;		line 12 in file "USART.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  baudrate        4   14[BANK3 ] const unsigned long 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;		None
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0, pclath, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : B00/300
  2961 ;;		On exit  : 300/100
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2964 ;;      Params:         0       0       0       4       0
  2965 ;;      Locals:         0       0       0       0       0
  2966 ;;      Temps:          0       0       0      12       0
  2967 ;;      Totals:         0       0       0      16       0
  2968 ;;Total ram usage:       16 bytes
  2969 ;; Hardware stack levels used: 1
  2970 ;; Hardware stack levels required when called: 6
  2971 ;; This function calls:
  2972 ;;		___lldiv
  2973 ;; This function is called by:
  2974 ;;		_setup
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978  132F                     _USART_set:	
  2979                           ;psect for function _USART_set
  2980                           
  2981                           
  2982                           ;USART.c: 12: void USART_set(const unsigned long int baudrate);USART.c: 13: {;USART.c: 1
      +                          4:     TXSTAbits.BRGH = 1;
  2983                           
  2984                           ;incstack = 0
  2985                           ; Regs used in _USART_set: [wreg+status,2+status,0+pclath+cstack]
  2986  132F  1303               	bcf	3,6	;RP1=0, select bank1
  2987  1330  1518               	bsf	24,2	;volatile
  2988                           
  2989                           ;USART.c: 15:     BAUDCTLbits.BRG16 = 1;
  2990  1331  1703               	bsf	3,6	;RP1=1, select bank3
  2991  1332  1587               	bsf	7,3	;volatile
  2992                           
  2993                           ;USART.c: 16:     SPBRGH = 0;
  2994  1333  1303               	bcf	3,6	;RP1=0, select bank1
  2995  1334  019A               	clrf	26	;volatile
  2996                           
  2997                           ;USART.c: 17:     SPBRG = (1000000 - baudrate * 4) / (baudrate * 4);
  2998  1335  1703               	bsf	3,6	;RP1=1, select bank3
  2999  1336  081E               	movf	USART_set@baudrate^(0+384),w
  3000  1337  00A2               	movwf	??_USART_set^(0+384)
  3001  1338  081F               	movf	(USART_set@baudrate+1)^(0+384),w
  3002  1339  00A3               	movwf	(??_USART_set^(0+384)+1)
  3003  133A  0820               	movf	(USART_set@baudrate+2)^(0+384),w
  3004  133B  00A4               	movwf	(??_USART_set^(0+384)+2)
  3005  133C  0821               	movf	(USART_set@baudrate+3)^(0+384),w
  3006  133D  00A5               	movwf	(??_USART_set^(0+384)+3)
  3007  133E  3002               	movlw	2
  3008  133F                     u3765:
  3009  133F  1003               	clrc
  3010  1340  0DA2               	rlf	??_USART_set^(0+384),f
  3011  1341  0DA3               	rlf	(??_USART_set^(0+384)+1),f
  3012  1342  0DA4               	rlf	(??_USART_set^(0+384)+2),f
  3013  1343  0DA5               	rlf	(??_USART_set^(0+384)+3),f
  3014  1344  3EFF               	addlw	-1
  3015  1345  1D03               	skipz
  3016  1346  2B3F               	goto	u3765
  3017  1347  0825               	movf	(??_USART_set+3)^(0+384),w
  3018  1348  0093               	movwf	(___lldiv@divisor+3)^(0+384)
  3019  1349  0824               	movf	(??_USART_set+2)^(0+384),w
  3020  134A  0092               	movwf	(___lldiv@divisor+2)^(0+384)
  3021  134B  0823               	movf	(??_USART_set+1)^(0+384),w
  3022  134C  0091               	movwf	(___lldiv@divisor+1)^(0+384)
  3023  134D  0822               	movf	??_USART_set^(0+384),w
  3024  134E  0090               	movwf	___lldiv@divisor^(0+384)
  3025  134F  081E               	movf	USART_set@baudrate^(0+384),w
  3026  1350  00A6               	movwf	(??_USART_set+4)^(0+384)
  3027  1351  081F               	movf	(USART_set@baudrate+1)^(0+384),w
  3028  1352  00A7               	movwf	((??_USART_set+4)^(0+384)+1)
  3029  1353  0820               	movf	(USART_set@baudrate+2)^(0+384),w
  3030  1354  00A8               	movwf	((??_USART_set+4)^(0+384)+2)
  3031  1355  0821               	movf	(USART_set@baudrate+3)^(0+384),w
  3032  1356  00A9               	movwf	((??_USART_set+4)^(0+384)+3)
  3033  1357  3002               	movlw	2
  3034  1358                     u3775:
  3035  1358  1003               	clrc
  3036  1359  0DA6               	rlf	(??_USART_set+4)^(0+384),f
  3037  135A  0DA7               	rlf	((??_USART_set+4)^(0+384)+1),f
  3038  135B  0DA8               	rlf	((??_USART_set+4)^(0+384)+2),f
  3039  135C  0DA9               	rlf	((??_USART_set+4)^(0+384)+3),f
  3040  135D  3EFF               	addlw	-1
  3041  135E  1D03               	skipz
  3042  135F  2B58               	goto	u3775
  3043  1360  3040               	movlw	64
  3044  1361  00AA               	movwf	(??_USART_set+8)^(0+384)
  3045  1362  3042               	movlw	66
  3046  1363  00AB               	movwf	((??_USART_set+8)^(0+384)+1)
  3047  1364  300F               	movlw	15
  3048  1365  00AC               	movwf	((??_USART_set+8)^(0+384)+2)
  3049  1366  3000               	movlw	0
  3050  1367  00AD               	movwf	((??_USART_set+8)^(0+384)+3)
  3051  1368  0826               	movf	(??_USART_set+4)^(0+384),w
  3052  1369  02AA               	subwf	(??_USART_set+8)^(0+384),f
  3053  136A  0827               	movf	(??_USART_set+5)^(0+384),w
  3054  136B  1C03               	skipc
  3055  136C  0F27               	incfsz	(??_USART_set+5)^(0+384),w
  3056  136D  2B6F               	goto	u3781
  3057  136E  2B70               	goto	u3782
  3058  136F                     u3781:
  3059  136F  02AB               	subwf	((??_USART_set+8)^(0+384)+1),f
  3060  1370                     u3782:
  3061  1370  0828               	movf	(??_USART_set+6)^(0+384),w
  3062  1371  1C03               	skipc
  3063  1372  0F28               	incfsz	(??_USART_set+6)^(0+384),w
  3064  1373  2B75               	goto	u3783
  3065  1374  2B76               	goto	u3784
  3066  1375                     u3783:
  3067  1375  02AC               	subwf	((??_USART_set+8)^(0+384)+2),f
  3068  1376                     u3784:
  3069  1376  0829               	movf	(??_USART_set+7)^(0+384),w
  3070  1377  1C03               	skipc
  3071  1378  0F29               	incfsz	(??_USART_set+7)^(0+384),w
  3072  1379  2B7B               	goto	u3785
  3073  137A  2B7C               	goto	u3786
  3074  137B                     u3785:
  3075  137B  02AD               	subwf	((??_USART_set+8)^(0+384)+3),f
  3076  137C                     u3786:
  3077  137C  082D               	movf	(??_USART_set+11)^(0+384),w
  3078  137D  0097               	movwf	(___lldiv@dividend+3)^(0+384)
  3079  137E  082C               	movf	(??_USART_set+10)^(0+384),w
  3080  137F  0096               	movwf	(___lldiv@dividend+2)^(0+384)
  3081  1380  082B               	movf	(??_USART_set+9)^(0+384),w
  3082  1381  0095               	movwf	(___lldiv@dividend+1)^(0+384)
  3083  1382  082A               	movf	(??_USART_set+8)^(0+384),w
  3084  1383  0094               	movwf	___lldiv@dividend^(0+384)
  3085  1384  160A  118A  2272   	fcall	___lldiv
  3086  1387  0810               	movf	?___lldiv^(0+384),w
  3087  1388  1303               	bcf	3,6	;RP1=0, select bank1
  3088  1389  0099               	movwf	25	;volatile
  3089                           
  3090                           ;USART.c: 18:     TXSTAbits.SYNC = 0;
  3091  138A  1218               	bcf	24,4	;volatile
  3092                           
  3093                           ;USART.c: 19:     RCSTAbits.SPEN = 1;
  3094  138B  1283               	bcf	3,5	;RP0=0, select bank0
  3095  138C  1798               	bsf	24,7	;volatile
  3096                           
  3097                           ;USART.c: 22:     TXSTAbits.TX9 = 0;
  3098  138D  1683               	bsf	3,5	;RP0=1, select bank1
  3099  138E  1318               	bcf	24,6	;volatile
  3100                           
  3101                           ;USART.c: 24:     TXSTAbits.TXEN = 1;
  3102  138F  1698               	bsf	24,5	;volatile
  3103  1390  0008               	return
  3104  1391                     __end_of_USART_set:
  3105                           
  3106                           	psect	text8
  3107  10F0                     __ptext8:	
  3108 ;; *************** function _I2C_Master_Init *****************
  3109 ;; Defined at:
  3110 ;;		line 14 in file "I2C.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  c               4   14[BANK3 ] const unsigned long 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;		None
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0, pclath, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 300/300
  3121 ;;		On exit  : 300/100
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3124 ;;      Params:         0       0       0       4       0
  3125 ;;      Locals:         0       0       0       0       0
  3126 ;;      Temps:          0       0       0       4       0
  3127 ;;      Totals:         0       0       0       8       0
  3128 ;;Total ram usage:        8 bytes
  3129 ;; Hardware stack levels used: 1
  3130 ;; Hardware stack levels required when called: 6
  3131 ;; This function calls:
  3132 ;;		___lldiv
  3133 ;; This function is called by:
  3134 ;;		_setup
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138  10F0                     _I2C_Master_Init:	
  3139                           ;psect for function _I2C_Master_Init
  3140                           
  3141                           
  3142                           ;I2C.c: 14: void I2C_Master_Init(const unsigned long c);I2C.c: 15: {;I2C.c: 16:     SSPC
      +                          ON = 0b00101000;
  3143                           
  3144                           ;incstack = 0
  3145                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3146  10F0  3028               	movlw	40
  3147  10F1  1283               	bcf	3,5	;RP0=0, select bank0
  3148  10F2  1303               	bcf	3,6	;RP1=0, select bank0
  3149  10F3  0094               	movwf	20	;volatile
  3150                           
  3151                           ;I2C.c: 17:     SSPCON2 = 0;
  3152  10F4  1683               	bsf	3,5	;RP0=1, select bank1
  3153  10F5  0191               	clrf	17	;volatile
  3154                           
  3155                           ;I2C.c: 18:     SSPADD = (1000000/(4*c))-1;
  3156  10F6  1703               	bsf	3,6	;RP1=1, select bank3
  3157  10F7  081E               	movf	I2C_Master_Init@c^(0+384),w
  3158  10F8  00A2               	movwf	??_I2C_Master_Init^(0+384)
  3159  10F9  081F               	movf	(I2C_Master_Init@c+1)^(0+384),w
  3160  10FA  00A3               	movwf	(??_I2C_Master_Init^(0+384)+1)
  3161  10FB  0820               	movf	(I2C_Master_Init@c+2)^(0+384),w
  3162  10FC  00A4               	movwf	(??_I2C_Master_Init^(0+384)+2)
  3163  10FD  0821               	movf	(I2C_Master_Init@c+3)^(0+384),w
  3164  10FE  00A5               	movwf	(??_I2C_Master_Init^(0+384)+3)
  3165  10FF  3002               	movlw	2
  3166  1100                     u3815:
  3167  1100  1003               	clrc
  3168  1101  0DA2               	rlf	??_I2C_Master_Init^(0+384),f
  3169  1102  0DA3               	rlf	(??_I2C_Master_Init^(0+384)+1),f
  3170  1103  0DA4               	rlf	(??_I2C_Master_Init^(0+384)+2),f
  3171  1104  0DA5               	rlf	(??_I2C_Master_Init^(0+384)+3),f
  3172  1105  3EFF               	addlw	-1
  3173  1106  1D03               	skipz
  3174  1107  2900               	goto	u3815
  3175  1108  0825               	movf	(??_I2C_Master_Init+3)^(0+384),w
  3176  1109  0093               	movwf	(___lldiv@divisor+3)^(0+384)
  3177  110A  0824               	movf	(??_I2C_Master_Init+2)^(0+384),w
  3178  110B  0092               	movwf	(___lldiv@divisor+2)^(0+384)
  3179  110C  0823               	movf	(??_I2C_Master_Init+1)^(0+384),w
  3180  110D  0091               	movwf	(___lldiv@divisor+1)^(0+384)
  3181  110E  0822               	movf	??_I2C_Master_Init^(0+384),w
  3182  110F  0090               	movwf	___lldiv@divisor^(0+384)
  3183  1110  3000               	movlw	0
  3184  1111  0097               	movwf	(___lldiv@dividend+3)^(0+384)
  3185  1112  300F               	movlw	15
  3186  1113  0096               	movwf	(___lldiv@dividend+2)^(0+384)
  3187  1114  3042               	movlw	66
  3188  1115  0095               	movwf	(___lldiv@dividend+1)^(0+384)
  3189  1116  3040               	movlw	64
  3190  1117  0094               	movwf	___lldiv@dividend^(0+384)
  3191  1118  160A  118A  2272   	fcall	___lldiv
  3192  111B  0810               	movf	?___lldiv^(0+384),w
  3193  111C  3EFF               	addlw	255
  3194  111D  1303               	bcf	3,6	;RP1=0, select bank1
  3195  111E  0093               	movwf	19	;volatile
  3196                           
  3197                           ;I2C.c: 19:     SSPSTAT = 0;
  3198  111F  0194               	clrf	20	;volatile
  3199                           
  3200                           ;I2C.c: 20:     TRISCbits.TRISC3 = 1;
  3201  1120  1587               	bsf	7,3	;volatile
  3202                           
  3203                           ;I2C.c: 21:     TRISCbits.TRISC4 = 1;
  3204  1121  1607               	bsf	7,4	;volatile
  3205  1122  0008               	return
  3206  1123                     __end_of_I2C_Master_Init:
  3207                           
  3208                           	psect	text9
  3209  106B                     __ptext9:	
  3210 ;; *************** function _servo *****************
  3211 ;; Defined at:
  3212 ;;		line 163 in file "main_slave_p1.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  mov             2    4[BANK3 ] unsigned short 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;		None
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, status,2, status,0, pclath, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 300/300
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3226 ;;      Params:         0       0       0       2       0
  3227 ;;      Locals:         0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0
  3229 ;;      Totals:         0       0       0       2       0
  3230 ;;Total ram usage:        2 bytes
  3231 ;; Hardware stack levels used: 1
  3232 ;; Hardware stack levels required when called: 6
  3233 ;; This function calls:
  3234 ;;		_USART_send
  3235 ;;		_pwm_duty_cycle
  3236 ;; This function is called by:
  3237 ;;		_main
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241  106B                     _servo:	
  3242                           ;psect for function _servo
  3243                           
  3244                           
  3245                           ;main_slave_p1.c: 164:     if (mov == 1){
  3246                           
  3247                           ;incstack = 0
  3248                           ; Regs used in _servo: [wreg+status,2+status,0+pclath+cstack]
  3249  106B  0314               	decf	servo@mov^(0+384),w
  3250  106C  0415               	iorwf	(servo@mov+1)^(0+384),w
  3251  106D  1D03               	btfss	3,2
  3252  106E  2871               	goto	l3761
  3253                           
  3254                           ;main_slave_p1.c: 165:         pwm_duty_cycle(94);
  3255  106F  305E               	movlw	94
  3256  1070  2872               	goto	L11
  3257  1071                     l3761:	
  3258                           ;main_slave_p1.c: 166:     }
  3259                           
  3260                           
  3261                           ;main_slave_p1.c: 168:         pwm_duty_cycle(31);
  3262  1071  301F               	movlw	31
  3263  1072                     L11:
  3264  1072  0090               	movwf	pwm_duty_cycle@duty_cycle^(0+384)
  3265  1073  3000               	movlw	0
  3266  1074  0091               	movwf	(pwm_duty_cycle@duty_cycle^(0+384)+1)
  3267  1075  160A  158A  27BD  160A  118A  	fcall	_pwm_duty_cycle
  3268                           
  3269                           ;main_slave_p1.c: 171:     if (mov != last_mov){
  3270  107A  1683               	bsf	3,5	;RP0=1, select bank3
  3271  107B  1703               	bsf	3,6	;RP1=1, select bank3
  3272  107C  0869               	movf	(_last_mov+1)^(0+384),w
  3273  107D  0615               	xorwf	(servo@mov+1)^(0+384),w
  3274  107E  1D03               	skipz
  3275  107F  2882               	goto	u4625
  3276  1080  0868               	movf	_last_mov^(0+384),w
  3277  1081  0614               	xorwf	servo@mov^(0+384),w
  3278  1082                     u4625:
  3279  1082  1903               	skipnz
  3280  1083  0008               	return
  3281                           
  3282                           ;main_slave_p1.c: 172:         last_mov = mov;
  3283  1084  0815               	movf	(servo@mov+1)^(0+384),w
  3284  1085  00E9               	movwf	(_last_mov+1)^(0+384)
  3285  1086  0814               	movf	servo@mov^(0+384),w
  3286  1087  00E8               	movwf	_last_mov^(0+384)
  3287                           
  3288                           ;main_slave_p1.c: 173:         USART_send(!mov + 128);
  3289  1088  0814               	movf	servo@mov^(0+384),w
  3290  1089  0415               	iorwf	(servo@mov+1)^(0+384),w
  3291  108A  1D03               	btfss	3,2
  3292  108B  288E               	goto	u4630
  3293  108C  3001               	movlw	1
  3294  108D  288F               	goto	u4640
  3295  108E                     u4630:
  3296  108E  3000               	movlw	0
  3297  108F                     u4640:
  3298  108F  3E80               	addlw	128
  3299  1090  160A  158A  2778   	fcall	_USART_send
  3300  1093  0008               	return
  3301  1094                     __end_of_servo:
  3302                           
  3303                           	psect	text10
  3304  1FBD                     __ptext10:	
  3305 ;; *************** function _pwm_duty_cycle *****************
  3306 ;; Defined at:
  3307 ;;		line 40 in file "pwm.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  duty_cycle      2    0[BANK3 ] unsigned int 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0
  3316 ;; Tracked objects:
  3317 ;;		On entry : 300/300
  3318 ;;		On exit  : 300/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3321 ;;      Params:         0       0       0       2       0
  3322 ;;      Locals:         0       0       0       0       0
  3323 ;;      Temps:          0       0       0       2       0
  3324 ;;      Totals:         0       0       0       4       0
  3325 ;;Total ram usage:        4 bytes
  3326 ;; Hardware stack levels used: 1
  3327 ;; Hardware stack levels required when called: 5
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_servo
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335  1FBD                     _pwm_duty_cycle:	
  3336                           ;psect for function _pwm_duty_cycle
  3337                           
  3338                           
  3339                           ;pwm.c: 41:     CCPR1L = (uint8_t)(duty_cycle>>2);
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _pwm_duty_cycle: [wreg+status,2+status,0]
  3343  1FBD  0811               	movf	(pwm_duty_cycle@duty_cycle+1)^(0+384),w
  3344  1FBE  0093               	movwf	(??_pwm_duty_cycle^(0+384)+1)
  3345  1FBF  0810               	movf	pwm_duty_cycle@duty_cycle^(0+384),w
  3346  1FC0  0092               	movwf	??_pwm_duty_cycle^(0+384)
  3347  1FC1  1003               	clrc
  3348  1FC2  0C93               	rrf	(??_pwm_duty_cycle^(0+384)+1),f
  3349  1FC3  0C92               	rrf	??_pwm_duty_cycle^(0+384),f
  3350  1FC4  1003               	clrc
  3351  1FC5  0C93               	rrf	(??_pwm_duty_cycle^(0+384)+1),f
  3352  1FC6  0C92               	rrf	??_pwm_duty_cycle^(0+384),f
  3353  1FC7  0812               	movf	??_pwm_duty_cycle^(0+384),w
  3354  1FC8  1283               	bcf	3,5	;RP0=0, select bank0
  3355  1FC9  1303               	bcf	3,6	;RP1=0, select bank0
  3356  1FCA  0095               	movwf	21	;volatile
  3357                           
  3358                           ;pwm.c: 42:     CCP1CONbits.DC1B = duty_cycle & 0b11;
  3359  1FCB  1683               	bsf	3,5	;RP0=1, select bank3
  3360  1FCC  1703               	bsf	3,6	;RP1=1, select bank3
  3361  1FCD  0810               	movf	pwm_duty_cycle@duty_cycle^(0+384),w
  3362  1FCE  3903               	andlw	3
  3363  1FCF  0092               	movwf	??_pwm_duty_cycle^(0+384)
  3364  1FD0  0E92               	swapf	??_pwm_duty_cycle^(0+384),f
  3365  1FD1  1283               	bcf	3,5	;RP0=0, select bank0
  3366  1FD2  1303               	bcf	3,6	;RP1=0, select bank0
  3367  1FD3  0817               	movf	23,w	;volatile
  3368  1FD4  1683               	bsf	3,5	;RP0=1, select bank3
  3369  1FD5  1703               	bsf	3,6	;RP1=1, select bank3
  3370  1FD6  0612               	xorwf	??_pwm_duty_cycle^(0+384),w
  3371  1FD7  39CF               	andlw	-49
  3372  1FD8  0612               	xorwf	??_pwm_duty_cycle^(0+384),w
  3373  1FD9  1283               	bcf	3,5	;RP0=0, select bank0
  3374  1FDA  1303               	bcf	3,6	;RP1=0, select bank0
  3375  1FDB  0097               	movwf	23	;volatile
  3376  1FDC  0008               	return
  3377  1FDD                     __end_of_pwm_duty_cycle:
  3378                           
  3379                           	psect	text11
  3380  07E4                     __ptext11:	
  3381 ;; *************** function _pulse_step *****************
  3382 ;; Defined at:
  3383 ;;		line 177 in file "main_slave_p1.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  bt              2    0[BANK3 ] unsigned short 
  3386 ;;  signal          2    2[BANK3 ] unsigned short 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0
  3393 ;; Tracked objects:
  3394 ;;		On entry : 300/300
  3395 ;;		On exit  : 300/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3398 ;;      Params:         0       0       0       4       0
  3399 ;;      Locals:         0       0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0
  3401 ;;      Totals:         0       0       0       4       0
  3402 ;;Total ram usage:        4 bytes
  3403 ;; Hardware stack levels used: 1
  3404 ;; Hardware stack levels required when called: 5
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_main
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412  07E4                     _pulse_step:	
  3413                           ;psect for function _pulse_step
  3414                           
  3415                           
  3416                           ;main_slave_p1.c: 178:     if (bt == 1){
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in _pulse_step: [wreg+status,2+status,0]
  3420  07E4  0310               	decf	pulse_step@bt^(0+384),w
  3421  07E5  0411               	iorwf	(pulse_step@bt+1)^(0+384),w
  3422  07E6  1D03               	btfss	3,2
  3423  07E7  2FF0               	goto	l3685
  3424                           
  3425                           ;main_slave_p1.c: 179:         PORTDbits.RD1 = signal;
  3426  07E8  0C12               	rrf	pulse_step@signal^(0+384),w
  3427  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  3428  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  3429  07EB  1C03               	skipc
  3430  07EC  1088               	bcf	8,1	;volatile
  3431  07ED  1803               	skipnc
  3432  07EE  1488               	bsf	8,1	;volatile
  3433                           
  3434                           ;main_slave_p1.c: 180:     }
  3435  07EF  0008               	return
  3436  07F0                     l3685:
  3437  07F0  0810               	movf	pulse_step@bt^(0+384),w
  3438  07F1  0411               	iorwf	(pulse_step@bt+1)^(0+384),w
  3439  07F2  1D03               	btfss	3,2
  3440  07F3  2FFC               	goto	l179
  3441                           
  3442                           ;main_slave_p1.c: 182:         PORTDbits.RD1 = signal;
  3443  07F4  0C12               	rrf	pulse_step@signal^(0+384),w
  3444  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  3445  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  3446  07F7  1C03               	skipc
  3447  07F8  1088               	bcf	8,1	;volatile
  3448  07F9  1803               	skipnc
  3449  07FA  1488               	bsf	8,1	;volatile
  3450                           
  3451                           ;main_slave_p1.c: 183:     }
  3452  07FB  0008               	return
  3453  07FC                     l179:	
  3454                           ;main_slave_p1.c: 184:     else {PORTDbits.RD1 = 0;}
  3455                           
  3456  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  3457  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  3458  07FE  1088               	bcf	8,1	;volatile
  3459  07FF  0008               	return
  3460  0800                     __end_of_pulse_step:
  3461                           
  3462                           	psect	text12
  3463  1044                     __ptext12:	
  3464 ;; *************** function _motor_dc *****************
  3465 ;; Defined at:
  3466 ;;		line 149 in file "main_slave_p1.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  temp            2   11[BANK3 ] int 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 300/300
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3480 ;;      Params:         0       0       0       2       0
  3481 ;;      Locals:         0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0
  3483 ;;      Totals:         0       0       0       2       0
  3484 ;;Total ram usage:        2 bytes
  3485 ;; Hardware stack levels used: 1
  3486 ;; Hardware stack levels required when called: 6
  3487 ;; This function calls:
  3488 ;;		_USART_send
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494  1044                     _motor_dc:	
  3495                           ;psect for function _motor_dc
  3496                           
  3497                           
  3498                           ;main_slave_p1.c: 150:     if(temp >= 22){
  3499                           
  3500                           ;incstack = 0
  3501                           ; Regs used in _motor_dc: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3502  1044  081C               	movf	(motor_dc@temp+1)^(0+384),w
  3503  1045  3A80               	xorlw	128
  3504  1046  00FF               	movwf	127
  3505  1047  3080               	movlw	128
  3506  1048  027F               	subwf	127,w
  3507  1049  1D03               	skipz
  3508  104A  284D               	goto	u4595
  3509  104B  3016               	movlw	22
  3510  104C  021B               	subwf	motor_dc@temp^(0+384),w
  3511  104D                     u4595:
  3512  104D  1C03               	skipc
  3513  104E  2853               	goto	l165
  3514                           
  3515                           ;main_slave_p1.c: 151:         PORTBbits.RB0 = 1;
  3516  104F  1283               	bcf	3,5	;RP0=0, select bank0
  3517  1050  1303               	bcf	3,6	;RP1=0, select bank0
  3518  1051  1406               	bsf	6,0	;volatile
  3519                           
  3520                           ;main_slave_p1.c: 152:     }
  3521  1052  2856               	goto	l3749
  3522  1053                     l165:	
  3523                           ;main_slave_p1.c: 153:     else{
  3524                           
  3525                           
  3526                           ;main_slave_p1.c: 154:         PORTBbits.RB0 = 0;
  3527  1053  1283               	bcf	3,5	;RP0=0, select bank0
  3528  1054  1303               	bcf	3,6	;RP1=0, select bank0
  3529  1055  1006               	bcf	6,0	;volatile
  3530  1056                     l3749:
  3531                           
  3532                           ;main_slave_p1.c: 157:     if (temp != OLD_TEMP){
  3533  1056  1683               	bsf	3,5	;RP0=1, select bank3
  3534  1057  1703               	bsf	3,6	;RP1=1, select bank3
  3535  1058  0867               	movf	(_OLD_TEMP+1)^(0+384),w
  3536  1059  061C               	xorwf	(motor_dc@temp+1)^(0+384),w
  3537  105A  1D03               	skipz
  3538  105B  285E               	goto	u4605
  3539  105C  0866               	movf	_OLD_TEMP^(0+384),w
  3540  105D  061B               	xorwf	motor_dc@temp^(0+384),w
  3541  105E                     u4605:
  3542  105E  1903               	skipnz
  3543  105F  0008               	return
  3544                           
  3545                           ;main_slave_p1.c: 158:         OLD_TEMP = temp;
  3546  1060  081C               	movf	(motor_dc@temp+1)^(0+384),w
  3547  1061  00E7               	movwf	(_OLD_TEMP+1)^(0+384)
  3548  1062  081B               	movf	motor_dc@temp^(0+384),w
  3549  1063  00E6               	movwf	_OLD_TEMP^(0+384)
  3550                           
  3551                           ;main_slave_p1.c: 159:         USART_send(160 + (temp & 31));
  3552  1064  081B               	movf	motor_dc@temp^(0+384),w
  3553  1065  391F               	andlw	31
  3554  1066  3EA0               	addlw	160
  3555  1067  160A  158A  2778   	fcall	_USART_send
  3556  106A  0008               	return
  3557  106B                     __end_of_motor_dc:
  3558                           
  3559                           	psect	text13
  3560  0887                     __ptext13:	
  3561 ;; *************** function _adc_ch_switch *****************
  3562 ;; Defined at:
  3563 ;;		line 71 in file "adc.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  channels        1    wreg     unsigned char 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  channels        1    2[BANK3 ] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3572 ;; Tracked objects:
  3573 ;;		On entry : 300/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3577 ;;      Params:         0       0       0       0       0
  3578 ;;      Locals:         0       0       0       1       0
  3579 ;;      Temps:          0       0       0       2       0
  3580 ;;      Totals:         0       0       0       3       0
  3581 ;;Total ram usage:        3 bytes
  3582 ;; Hardware stack levels used: 1
  3583 ;; Hardware stack levels required when called: 5
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591  0887                     _adc_ch_switch:	
  3592                           ;psect for function _adc_ch_switch
  3593                           
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _adc_ch_switch: [wreg-fsr0h+status,2+status,0]
  3597                           ;adc_ch_switch@channels stored from wreg
  3598  0887  1683               	bsf	3,5	;RP0=1, select bank3
  3599  0888  1703               	bsf	3,6	;RP1=1, select bank3
  3600  0889  0092               	movwf	adc_ch_switch@channels^(0+384)
  3601                           
  3602                           ;adc.c: 72:     switch(channels){
  3603  088A  2917               	goto	l3737
  3604  088B                     l287:	
  3605                           ;adc.c: 73:         case 1:
  3606                           
  3607                           
  3608                           ;adc.c: 74:             if (ADCON0bits.GO == 0){
  3609  088B  1283               	bcf	3,5	;RP0=0, select bank0
  3610  088C  1303               	bcf	3,6	;RP1=0, select bank0
  3611  088D  189F               	btfsc	31,1	;volatile
  3612  088E  0008               	return
  3613                           
  3614                           ;adc.c: 75:                 ADCON0bits.CHS = 0;
  3615  088F  30C3               	movlw	-61
  3616  0890  059F               	andwf	31,f	;volatile
  3617                           
  3618                           ;adc.c: 76:                 _delay((unsigned long)((40)*(1000000/4000000.0)));
  3619  0891  3002               	movlw	2
  3620  0892  1683               	bsf	3,5	;RP0=1, select bank3
  3621  0893  1703               	bsf	3,6	;RP1=1, select bank3
  3622  0894  0090               	movwf	??_adc_ch_switch^(0+384)
  3623  0895                     u5007:
  3624  0895  0B90               	decfsz	??_adc_ch_switch^(0+384),f
  3625  0896  2895               	goto	u5007
  3626  0897  0000               	nop
  3627                           
  3628                           ;adc.c: 77:                 ADCON0bits.GO = 1;
  3629  0898  1283               	bcf	3,5	;RP0=0, select bank0
  3630  0899  1303               	bcf	3,6	;RP1=0, select bank0
  3631  089A  149F               	bsf	31,1	;volatile
  3632  089B  0008               	return
  3633  089C                     l290:	
  3634                           ;adc.c: 80:         case 2:
  3635                           
  3636                           
  3637                           ;adc.c: 81:             if (ADCON0bits.GO == 0){
  3638  089C  1283               	bcf	3,5	;RP0=0, select bank0
  3639  089D  1303               	bcf	3,6	;RP1=0, select bank0
  3640  089E  189F               	btfsc	31,1	;volatile
  3641  089F  0008               	return
  3642                           
  3643                           ;adc.c: 82:                 if (ADCON0bits.CHS == 0){
  3644  08A0  0C1F               	rrf	31,w	;volatile
  3645  08A1  1683               	bsf	3,5	;RP0=1, select bank3
  3646  08A2  1703               	bsf	3,6	;RP1=1, select bank3
  3647  08A3  0090               	movwf	??_adc_ch_switch^(0+384)
  3648  08A4  0C10               	rrf	??_adc_ch_switch^(0+384),w
  3649  08A5  390F               	andlw	15
  3650  08A6  3A00               	xorlw	0
  3651  08A7  1D03               	skipz
  3652  08A8  28B0               	goto	l3703
  3653                           
  3654                           ;adc.c: 83:                     ADCON0bits.CHS = 1;
  3655  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  3656  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  3657  08AB  081F               	movf	31,w	;volatile
  3658  08AC  39C3               	andlw	-61
  3659  08AD  3804               	iorlw	4
  3660  08AE  009F               	movwf	31	;volatile
  3661                           
  3662                           ;adc.c: 85:                 }
  3663  08AF  28BF               	goto	l3701
  3664  08B0                     l3703:
  3665  08B0  1283               	bcf	3,5	;RP0=0, select bank0
  3666  08B1  1303               	bcf	3,6	;RP1=0, select bank0
  3667  08B2  0C1F               	rrf	31,w	;volatile
  3668  08B3  1683               	bsf	3,5	;RP0=1, select bank3
  3669  08B4  1703               	bsf	3,6	;RP1=1, select bank3
  3670  08B5  0090               	movwf	??_adc_ch_switch^(0+384)
  3671  08B6  0C10               	rrf	??_adc_ch_switch^(0+384),w
  3672  08B7  390F               	andlw	15
  3673  08B8  3A01               	xorlw	1
  3674  08B9  1D03               	skipz
  3675  08BA  28C6               	goto	l3709
  3676                           
  3677                           ;adc.c: 87:                     ADCON0bits.CHS = 0;
  3678  08BB  30C3               	movlw	-61
  3679  08BC  1283               	bcf	3,5	;RP0=0, select bank0
  3680  08BD  1303               	bcf	3,6	;RP1=0, select bank0
  3681  08BE  059F               	andwf	31,f	;volatile
  3682  08BF                     l3701:
  3683                           
  3684                           ;adc.c: 84:                     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3685  08BF  3002               	movlw	2
  3686  08C0  1683               	bsf	3,5	;RP0=1, select bank3
  3687  08C1  1703               	bsf	3,6	;RP1=1, select bank3
  3688  08C2  0090               	movwf	??_adc_ch_switch^(0+384)
  3689  08C3                     u5017:
  3690  08C3  0B90               	decfsz	??_adc_ch_switch^(0+384),f
  3691  08C4  28C3               	goto	u5017
  3692  08C5  0000               	nop
  3693  08C6                     l3709:
  3694                           
  3695                           ;adc.c: 90:                 _delay((unsigned long)((40)*(1000000/4000000.0)));
  3696  08C6  3002               	movlw	2
  3697  08C7  1683               	bsf	3,5	;RP0=1, select bank3
  3698  08C8  1703               	bsf	3,6	;RP1=1, select bank3
  3699  08C9  0090               	movwf	??_adc_ch_switch^(0+384)
  3700  08CA                     u5027:
  3701  08CA  0B90               	decfsz	??_adc_ch_switch^(0+384),f
  3702  08CB  28CA               	goto	u5027
  3703  08CC  0000               	nop
  3704                           
  3705                           ;adc.c: 91:                 ADCON0bits.GO = 1;
  3706  08CD  1283               	bcf	3,5	;RP0=0, select bank0
  3707  08CE  1303               	bcf	3,6	;RP1=0, select bank0
  3708  08CF  149F               	bsf	31,1	;volatile
  3709  08D0  0008               	return
  3710  08D1                     l295:	
  3711                           ;adc.c: 94:         case 3:
  3712                           
  3713                           
  3714                           ;adc.c: 95:             if (ADCON0bits.GO == 0){
  3715  08D1  1283               	bcf	3,5	;RP0=0, select bank0
  3716  08D2  1303               	bcf	3,6	;RP1=0, select bank0
  3717  08D3  189F               	btfsc	31,1	;volatile
  3718  08D4  0008               	return
  3719                           
  3720                           ;adc.c: 96:                 if (ADCON0bits.CHS == 0){
  3721  08D5  0C1F               	rrf	31,w	;volatile
  3722  08D6  1683               	bsf	3,5	;RP0=1, select bank3
  3723  08D7  1703               	bsf	3,6	;RP1=1, select bank3
  3724  08D8  0090               	movwf	??_adc_ch_switch^(0+384)
  3725  08D9  0C10               	rrf	??_adc_ch_switch^(0+384),w
  3726  08DA  390F               	andlw	15
  3727  08DB  3A00               	xorlw	0
  3728  08DC  1D03               	skipz
  3729  08DD  28E5               	goto	l3719
  3730                           
  3731                           ;adc.c: 97:                     ADCON0bits.CHS = 1;
  3732  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  3733  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  3734  08E0  081F               	movf	31,w	;volatile
  3735  08E1  39C3               	andlw	-61
  3736  08E2  3804               	iorlw	4
  3737  08E3                     L12:
  3738  08E3  009F               	movwf	31	;volatile
  3739                           
  3740                           ;adc.c: 99:                 }
  3741  08E4  2905               	goto	l3717
  3742  08E5                     l3719:
  3743  08E5  1283               	bcf	3,5	;RP0=0, select bank0
  3744  08E6  1303               	bcf	3,6	;RP1=0, select bank0
  3745  08E7  0C1F               	rrf	31,w	;volatile
  3746  08E8  1683               	bsf	3,5	;RP0=1, select bank3
  3747  08E9  1703               	bsf	3,6	;RP1=1, select bank3
  3748  08EA  0090               	movwf	??_adc_ch_switch^(0+384)
  3749  08EB  0C10               	rrf	??_adc_ch_switch^(0+384),w
  3750  08EC  390F               	andlw	15
  3751  08ED  3A01               	xorlw	1
  3752  08EE  1D03               	skipz
  3753  08EF  28F6               	goto	l3725
  3754                           
  3755                           ;adc.c: 101:                     ADCON0bits.CHS = 2;
  3756  08F0  1283               	bcf	3,5	;RP0=0, select bank0
  3757  08F1  1303               	bcf	3,6	;RP1=0, select bank0
  3758  08F2  081F               	movf	31,w	;volatile
  3759  08F3  39C3               	andlw	-61
  3760  08F4  3808               	iorlw	8
  3761  08F5  28E3               	goto	L12
  3762  08F6                     l3725:
  3763  08F6  1283               	bcf	3,5	;RP0=0, select bank0
  3764  08F7  1303               	bcf	3,6	;RP1=0, select bank0
  3765  08F8  0C1F               	rrf	31,w	;volatile
  3766  08F9  1683               	bsf	3,5	;RP0=1, select bank3
  3767  08FA  1703               	bsf	3,6	;RP1=1, select bank3
  3768  08FB  0090               	movwf	??_adc_ch_switch^(0+384)
  3769  08FC  0C10               	rrf	??_adc_ch_switch^(0+384),w
  3770  08FD  390F               	andlw	15
  3771  08FE  3A02               	xorlw	2
  3772  08FF  1D03               	skipz
  3773  0900  290C               	goto	l3731
  3774                           
  3775                           ;adc.c: 105:                     ADCON0bits.CHS = 0;
  3776  0901  30C3               	movlw	-61
  3777  0902  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0903  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0904  059F               	andwf	31,f	;volatile
  3780  0905                     l3717:
  3781                           
  3782                           ;adc.c: 98:                     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3783  0905  3002               	movlw	2
  3784  0906  1683               	bsf	3,5	;RP0=1, select bank3
  3785  0907  1703               	bsf	3,6	;RP1=1, select bank3
  3786  0908  0090               	movwf	??_adc_ch_switch^(0+384)
  3787  0909                     u5037:
  3788  0909  0B90               	decfsz	??_adc_ch_switch^(0+384),f
  3789  090A  2909               	goto	u5037
  3790  090B  0000               	nop
  3791  090C                     l3731:
  3792                           
  3793                           ;adc.c: 108:                 _delay((unsigned long)((40)*(1000000/4000000.0)));
  3794  090C  3002               	movlw	2
  3795  090D  1683               	bsf	3,5	;RP0=1, select bank3
  3796  090E  1703               	bsf	3,6	;RP1=1, select bank3
  3797  090F  0090               	movwf	??_adc_ch_switch^(0+384)
  3798  0910                     u5047:
  3799  0910  0B90               	decfsz	??_adc_ch_switch^(0+384),f
  3800  0911  2910               	goto	u5047
  3801  0912  0000               	nop
  3802                           
  3803                           ;adc.c: 109:                 ADCON0bits.GO = 1;
  3804  0913  1283               	bcf	3,5	;RP0=0, select bank0
  3805  0914  1303               	bcf	3,6	;RP1=0, select bank0
  3806  0915  149F               	bsf	31,1	;volatile
  3807  0916  0008               	return
  3808  0917                     l3737:
  3809  0917  0812               	movf	adc_ch_switch@channels^(0+384),w
  3810  0918  0090               	movwf	??_adc_ch_switch^(0+384)
  3811  0919  0191               	clrf	(??_adc_ch_switch^(0+384)+1)
  3812                           
  3813                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3814                           ; Switch size 1, requested type "simple"
  3815                           ; Number of cases is 1, Range of values is 0 to 0
  3816                           ; switch strategies available:
  3817                           ; Name         Instructions Cycles
  3818                           ; simple_byte            4     3 (average)
  3819                           ; direct_byte           11     8 (fixed)
  3820                           ; jumptable            260     6 (fixed)
  3821                           ;	Chosen strategy is simple_byte
  3822  091A  0811               	movf	(??_adc_ch_switch+1)^(0+384),w
  3823  091B  3A00               	xorlw	0	; case 0
  3824  091C  1903               	skipnz
  3825  091D  291F               	goto	l4139
  3826  091E  292A               	goto	l303
  3827  091F                     l4139:
  3828                           
  3829                           ; Switch size 1, requested type "simple"
  3830                           ; Number of cases is 3, Range of values is 1 to 3
  3831                           ; switch strategies available:
  3832                           ; Name         Instructions Cycles
  3833                           ; simple_byte           10     6 (average)
  3834                           ; direct_byte           20    11 (fixed)
  3835                           ; jumptable            263     9 (fixed)
  3836                           ;	Chosen strategy is simple_byte
  3837  091F  0810               	movf	??_adc_ch_switch^(0+384),w
  3838  0920  3A01               	xorlw	1	; case 1
  3839  0921  1903               	skipnz
  3840  0922  288B               	goto	l287
  3841  0923  3A03               	xorlw	3	; case 2
  3842  0924  1903               	skipnz
  3843  0925  289C               	goto	l290
  3844  0926  3A01               	xorlw	1	; case 3
  3845  0927  1903               	skipnz
  3846  0928  28D1               	goto	l295
  3847  0929  292A               	goto	l303
  3848  092A                     l303:
  3849  092A  0008               	return
  3850  092B                     __end_of_adc_ch_switch:
  3851                           
  3852                           	psect	text14
  3853  14C2                     __ptext14:	
  3854 ;; *************** function ___fltol *****************
  3855 ;; Defined at:
  3856 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\fltol.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  f1              4    0[BANK3 ] void 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  exp1            1   10[BANK3 ] unsigned char 
  3861 ;;  sign1           1    9[BANK3 ] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  4    0[BANK3 ] long 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0
  3866 ;; Tracked objects:
  3867 ;;		On entry : 300/300
  3868 ;;		On exit  : 300/300
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3871 ;;      Params:         0       0       0       4       0
  3872 ;;      Locals:         0       0       0       2       0
  3873 ;;      Temps:          0       0       0       5       0
  3874 ;;      Totals:         0       0       0      11       0
  3875 ;;Total ram usage:       11 bytes
  3876 ;; Hardware stack levels used: 1
  3877 ;; Hardware stack levels required when called: 5
  3878 ;; This function calls:
  3879 ;;		Nothing
  3880 ;; This function is called by:
  3881 ;;		_main
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885  14C2                     ___fltol:	
  3886                           ;psect for function ___fltol
  3887                           
  3888                           
  3889                           ;incstack = 0
  3890                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  3891  14C2  1003               	clrc
  3892  14C3  0D12               	rlf	(___fltol@f1+2)^(0+384),w
  3893  14C4  0D13               	rlf	(___fltol@f1+3)^(0+384),w
  3894  14C5  0094               	movwf	??___fltol^(0+384)
  3895  14C6  0814               	movf	??___fltol^(0+384),w
  3896  14C7  009A               	movwf	___fltol@exp1^(0+384)
  3897  14C8  081A               	movf	___fltol@exp1^(0+384),w
  3898  14C9  1D03               	btfss	3,2
  3899  14CA  2CD4               	goto	l3821
  3900  14CB                     l3817:
  3901  14CB  3000               	movlw	0
  3902  14CC  0093               	movwf	(?___fltol+3)^(0+384)
  3903  14CD  3000               	movlw	0
  3904  14CE  0092               	movwf	(?___fltol+2)^(0+384)
  3905  14CF  3000               	movlw	0
  3906  14D0  0091               	movwf	(?___fltol+1)^(0+384)
  3907  14D1  3000               	movlw	0
  3908  14D2  0090               	movwf	?___fltol^(0+384)
  3909  14D3  0008               	return
  3910  14D4                     l3821:
  3911  14D4  0810               	movf	___fltol@f1^(0+384),w
  3912  14D5  0094               	movwf	??___fltol^(0+384)
  3913  14D6  0811               	movf	(___fltol@f1+1)^(0+384),w
  3914  14D7  0095               	movwf	(??___fltol^(0+384)+1)
  3915  14D8  0812               	movf	(___fltol@f1+2)^(0+384),w
  3916  14D9  0096               	movwf	(??___fltol^(0+384)+2)
  3917  14DA  0813               	movf	(___fltol@f1+3)^(0+384),w
  3918  14DB  0097               	movwf	(??___fltol^(0+384)+3)
  3919  14DC  301F               	movlw	31
  3920  14DD                     u4745:
  3921  14DD  1003               	clrc
  3922  14DE  0C97               	rrf	(??___fltol^(0+384)+3),f
  3923  14DF  0C96               	rrf	(??___fltol^(0+384)+2),f
  3924  14E0  0C95               	rrf	(??___fltol^(0+384)+1),f
  3925  14E1  0C94               	rrf	??___fltol^(0+384),f
  3926  14E2  3EFF               	addlw	-1
  3927  14E3  1D03               	skipz
  3928  14E4  2CDD               	goto	u4745
  3929  14E5  0814               	movf	??___fltol^(0+384),w
  3930  14E6  0098               	movwf	(??___fltol+4)^(0+384)
  3931  14E7  0818               	movf	(??___fltol+4)^(0+384),w
  3932  14E8  0099               	movwf	___fltol@sign1^(0+384)
  3933  14E9  1792               	bsf	(___fltol@f1^(0+384)+2),7
  3934  14EA  30FF               	movlw	255
  3935  14EB  0590               	andwf	___fltol@f1^(0+384),f
  3936  14EC  30FF               	movlw	255
  3937  14ED  0591               	andwf	(___fltol@f1+1)^(0+384),f
  3938  14EE  30FF               	movlw	255
  3939  14EF  0592               	andwf	(___fltol@f1+2)^(0+384),f
  3940  14F0  3000               	movlw	0
  3941  14F1  0593               	andwf	(___fltol@f1+3)^(0+384),f
  3942  14F2  3096               	movlw	150
  3943  14F3  029A               	subwf	___fltol@exp1^(0+384),f
  3944  14F4  1F9A               	btfss	___fltol@exp1^(0+384),7
  3945  14F5  2D0B               	goto	l3839
  3946  14F6  081A               	movf	___fltol@exp1^(0+384),w
  3947  14F7  3A80               	xorlw	128
  3948  14F8  3E97               	addlw	151
  3949  14F9  1C03               	btfss	3,0
  3950  14FA  2CCB               	goto	l3817
  3951  14FB                     l3837:
  3952  14FB  3001               	movlw	1
  3953  14FC                     u4775:
  3954  14FC  1003               	clrc
  3955  14FD  0C93               	rrf	(___fltol@f1+3)^(0+384),f
  3956  14FE  0C92               	rrf	(___fltol@f1+2)^(0+384),f
  3957  14FF  0C91               	rrf	(___fltol@f1+1)^(0+384),f
  3958  1500  0C90               	rrf	___fltol@f1^(0+384),f
  3959  1501  3EFF               	addlw	-1
  3960  1502  1D03               	skipz
  3961  1503  2CFC               	goto	u4775
  3962  1504  3001               	movlw	1
  3963  1505  0094               	movwf	??___fltol^(0+384)
  3964  1506  0814               	movf	??___fltol^(0+384),w
  3965  1507  079A               	addwf	___fltol@exp1^(0+384),f
  3966  1508  1903               	btfsc	3,2
  3967  1509  2D1E               	goto	l3847
  3968  150A  2CFB               	goto	l3837
  3969  150B                     l3839:
  3970  150B  3020               	movlw	32
  3971  150C  021A               	subwf	___fltol@exp1^(0+384),w
  3972  150D  1803               	btfsc	3,0
  3973  150E  2CCB               	goto	l3817
  3974  150F                     l702:
  3975  150F  081A               	movf	___fltol@exp1^(0+384),w
  3976  1510  1903               	btfsc	3,2
  3977  1511  2D1E               	goto	l3847
  3978  1512  3001               	movlw	1
  3979  1513  0094               	movwf	??___fltol^(0+384)
  3980  1514                     u4805:
  3981  1514  1003               	clrc
  3982  1515  0D90               	rlf	___fltol@f1^(0+384),f
  3983  1516  0D91               	rlf	(___fltol@f1+1)^(0+384),f
  3984  1517  0D92               	rlf	(___fltol@f1+2)^(0+384),f
  3985  1518  0D93               	rlf	(___fltol@f1+3)^(0+384),f
  3986  1519  0B94               	decfsz	??___fltol^(0+384),f
  3987  151A  2D14               	goto	u4805
  3988  151B  3001               	movlw	1
  3989  151C  029A               	subwf	___fltol@exp1^(0+384),f
  3990  151D  2D0F               	goto	l702
  3991  151E                     l3847:
  3992  151E  0819               	movf	___fltol@sign1^(0+384),w
  3993  151F  1903               	btfsc	3,2
  3994  1520  0008               	return
  3995  1521  0990               	comf	___fltol@f1^(0+384),f
  3996  1522  0991               	comf	(___fltol@f1+1)^(0+384),f
  3997  1523  0992               	comf	(___fltol@f1+2)^(0+384),f
  3998  1524  0993               	comf	(___fltol@f1+3)^(0+384),f
  3999  1525  0A90               	incf	___fltol@f1^(0+384),f
  4000  1526  1903               	skipnz
  4001  1527  0A91               	incf	(___fltol@f1+1)^(0+384),f
  4002  1528  1903               	skipnz
  4003  1529  0A92               	incf	(___fltol@f1+2)^(0+384),f
  4004  152A  1903               	skipnz
  4005  152B  0A93               	incf	(___fltol@f1+3)^(0+384),f
  4006  152C  0008               	return
  4007  152D                     __end_of___fltol:
  4008                           
  4009                           	psect	text15
  4010  092B                     __ptext15:	
  4011 ;; *************** function _RTC_read *****************
  4012 ;; Defined at:
  4013 ;;		line 187 in file "main_slave_p1.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0, pclath, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4027 ;;      Params:         0       0       0       0       0
  4028 ;;      Locals:         0       0       0       0       0
  4029 ;;      Temps:          0       0       0       2       0
  4030 ;;      Totals:         0       0       0       2       0
  4031 ;;Total ram usage:        2 bytes
  4032 ;; Hardware stack levels used: 1
  4033 ;; Hardware stack levels required when called: 7
  4034 ;; This function calls:
  4035 ;;		_I2C_Master_Read
  4036 ;;		_I2C_Master_RepeatedStart
  4037 ;;		_I2C_Master_Start
  4038 ;;		_I2C_Master_Stop
  4039 ;;		_I2C_Master_Write
  4040 ;;		_USART_send
  4041 ;;		_bcd_dec
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047  092B                     _RTC_read:	
  4048                           ;psect for function _RTC_read
  4049                           
  4050                           
  4051                           ;main_slave_p1.c: 188:     I2C_Master_Start();
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _RTC_read: [wreg+status,2+status,0+pclath+cstack]
  4055  092B  160A  158A  2733  120A  158A  	fcall	_I2C_Master_Start
  4056                           
  4057                           ;main_slave_p1.c: 189:     I2C_Master_Write(0xD0);
  4058  0930  30D0               	movlw	208
  4059  0931  1703               	bsf	3,6	;RP1=1, select bank3
  4060  0932  0090               	movwf	I2C_Master_Write@d^(0+384)
  4061  0933  3000               	movlw	0
  4062  0934  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4063  0935  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4064                           
  4065                           ;main_slave_p1.c: 190:     I2C_Master_Write(0);
  4066  093A  3000               	movlw	0
  4067  093B  1683               	bsf	3,5	;RP0=1, select bank3
  4068  093C  1703               	bsf	3,6	;RP1=1, select bank3
  4069  093D  0090               	movwf	I2C_Master_Write@d^(0+384)
  4070  093E  0091               	movwf	(I2C_Master_Write@d+1)^(0+384)
  4071  093F  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4072                           
  4073                           ;main_slave_p1.c: 191:     I2C_Master_RepeatedStart();
  4074  0944  160A  158A  273D  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4075                           
  4076                           ;main_slave_p1.c: 192:     I2C_Master_Write(0xD1);
  4077  0949  30D1               	movlw	209
  4078  094A  1703               	bsf	3,6	;RP1=1, select bank3
  4079  094B  0090               	movwf	I2C_Master_Write@d^(0+384)
  4080  094C  3000               	movlw	0
  4081  094D  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4082  094E  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4083                           
  4084                           ;main_slave_p1.c: 193:     I2C_Master_Read(1);
  4085  0953  3001               	movlw	1
  4086  0954  1683               	bsf	3,5	;RP0=1, select bank3
  4087  0955  1703               	bsf	3,6	;RP1=1, select bank3
  4088  0956  0090               	movwf	I2C_Master_Read@a^(0+384)
  4089  0957  3000               	movlw	0
  4090  0958  0091               	movwf	(I2C_Master_Read@a^(0+384)+1)
  4091  0959  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4092                           
  4093                           ;main_slave_p1.c: 194:     min = bcd_dec(I2C_Master_Read(1));
  4094  095E  3001               	movlw	1
  4095  095F  0090               	movwf	I2C_Master_Read@a^(0+384)
  4096  0960  3000               	movlw	0
  4097  0961  0091               	movwf	(I2C_Master_Read@a^(0+384)+1)
  4098  0962  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4099  0967  0810               	movf	?_I2C_Master_Read^(0+384),w
  4100  0968  160A  118A  202E  120A  158A  	fcall	_bcd_dec
  4101  096D  00CE               	movwf	??_RTC_read^(0+384)
  4102  096E  084E               	movf	??_RTC_read^(0+384),w
  4103  096F  00E4               	movwf	_min^(0+384)
  4104                           
  4105                           ;main_slave_p1.c: 195:     hrs = bcd_dec(I2C_Master_Read(0));
  4106  0970  3000               	movlw	0
  4107  0971  0090               	movwf	I2C_Master_Read@a^(0+384)
  4108  0972  0091               	movwf	(I2C_Master_Read@a+1)^(0+384)
  4109  0973  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4110  0978  0810               	movf	?_I2C_Master_Read^(0+384),w
  4111  0979  160A  118A  202E  120A  158A  	fcall	_bcd_dec
  4112  097E  00CE               	movwf	??_RTC_read^(0+384)
  4113  097F  084E               	movf	??_RTC_read^(0+384),w
  4114  0980  00E3               	movwf	_hrs^(0+384)
  4115                           
  4116                           ;main_slave_p1.c: 196:     I2C_Master_Stop();
  4117  0981  160A  158A  2738  120A  158A  	fcall	_I2C_Master_Stop
  4118                           
  4119                           ;main_slave_p1.c: 198:     if (min != last_min){
  4120  0986  1703               	bsf	3,6	;RP1=1, select bank3
  4121  0987  0864               	movf	_min^(0+384),w
  4122  0988  066E               	xorwf	_last_min^(0+384),w
  4123  0989  1903               	skipnz
  4124  098A  2995               	goto	l3779
  4125                           
  4126                           ;main_slave_p1.c: 199:         last_min = min;
  4127  098B  0864               	movf	_min^(0+384),w
  4128  098C  00CE               	movwf	??_RTC_read^(0+384)
  4129  098D  084E               	movf	??_RTC_read^(0+384),w
  4130  098E  00EE               	movwf	_last_min^(0+384)
  4131                           
  4132                           ;main_slave_p1.c: 200:         USART_send(min);
  4133  098F  0864               	movf	_min^(0+384),w
  4134  0990  160A  158A  2778  120A  158A  	fcall	_USART_send
  4135  0995                     l3779:
  4136                           
  4137                           ;main_slave_p1.c: 202:     if (hrs != last_hrs){
  4138  0995  1683               	bsf	3,5	;RP0=1, select bank3
  4139  0996  1703               	bsf	3,6	;RP1=1, select bank3
  4140  0997  0863               	movf	_hrs^(0+384),w
  4141  0998  066D               	xorwf	_last_hrs^(0+384),w
  4142  0999  1903               	skipnz
  4143  099A  29A6               	goto	l3785
  4144                           
  4145                           ;main_slave_p1.c: 203:         last_hrs = hrs;
  4146  099B  0863               	movf	_hrs^(0+384),w
  4147  099C  00CE               	movwf	??_RTC_read^(0+384)
  4148  099D  084E               	movf	??_RTC_read^(0+384),w
  4149  099E  00ED               	movwf	_last_hrs^(0+384)
  4150                           
  4151                           ;main_slave_p1.c: 204:         USART_send(hrs + 224);
  4152  099F  0863               	movf	_hrs^(0+384),w
  4153  09A0  3EE0               	addlw	224
  4154  09A1  160A  158A  2778  120A  158A  	fcall	_USART_send
  4155  09A6                     l3785:
  4156                           
  4157                           ;main_slave_p1.c: 206:     if (min == 0 && p <= 8){
  4158  09A6  1683               	bsf	3,5	;RP0=1, select bank3
  4159  09A7  1703               	bsf	3,6	;RP1=1, select bank3
  4160  09A8  0864               	movf	_min^(0+384),w
  4161  09A9  1D03               	btfss	3,2
  4162  09AA  29CC               	goto	l3795
  4163  09AB  3009               	movlw	9
  4164  09AC  0265               	subwf	_p^(0+384),w
  4165  09AD  1803               	skipnc
  4166  09AE  29CC               	goto	l3795
  4167                           
  4168                           ;main_slave_p1.c: 207:            p++;
  4169  09AF  3001               	movlw	1
  4170  09B0  00CE               	movwf	??_RTC_read^(0+384)
  4171  09B1  084E               	movf	??_RTC_read^(0+384),w
  4172  09B2  07E5               	addwf	_p^(0+384),f
  4173                           
  4174                           ;main_slave_p1.c: 208:            PORTDbits.RD6 = !PORTDbits.RD6;
  4175  09B3  1003               	clrc
  4176  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  4177  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  4178  09B6  1F08               	btfss	8,6	;volatile
  4179  09B7  1403               	setc
  4180  09B8  1C03               	btfss	3,0
  4181  09B9  29BE               	goto	u4690
  4182  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  4183  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  4184  09BC  1708               	bsf	8,6	;volatile
  4185  09BD  29C1               	goto	l3793
  4186  09BE                     u4690:
  4187  09BE  1283               	bcf	3,5	;RP0=0, select bank0
  4188  09BF  1303               	bcf	3,6	;RP1=0, select bank0
  4189  09C0  1308               	bcf	8,6	;volatile
  4190  09C1                     l3793:
  4191                           
  4192                           ;main_slave_p1.c: 209:            _delay((unsigned long)((10)*(1000000/4000.0)));
  4193  09C1  3004               	movlw	4
  4194  09C2  1683               	bsf	3,5	;RP0=1, select bank3
  4195  09C3  1703               	bsf	3,6	;RP1=1, select bank3
  4196  09C4  00CF               	movwf	(??_RTC_read^(0+384)+1)
  4197  09C5  303D               	movlw	61
  4198  09C6  00CE               	movwf	??_RTC_read^(0+384)
  4199  09C7                     u5057:
  4200  09C7  0BCE               	decfsz	??_RTC_read^(0+384),f
  4201  09C8  29C7               	goto	u5057
  4202  09C9  0BCF               	decfsz	(??_RTC_read^(0+384)+1),f
  4203  09CA  29C7               	goto	u5057
  4204                           
  4205                           ;main_slave_p1.c: 210:     }
  4206  09CB  0008               	return
  4207  09CC                     l3795:
  4208  09CC  0864               	movf	_min^(0+384),w
  4209  09CD  1903               	btfsc	3,2
  4210  09CE  29D6               	goto	l188
  4211                           
  4212                           ;main_slave_p1.c: 212:         PORTDbits.RD6 = 0;
  4213  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  4214  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  4215  09D1  1308               	bcf	8,6	;volatile
  4216                           
  4217                           ;main_slave_p1.c: 213:         p = 0;
  4218  09D2  1683               	bsf	3,5	;RP0=1, select bank3
  4219  09D3  1703               	bsf	3,6	;RP1=1, select bank3
  4220  09D4  01E5               	clrf	_p^(0+384)
  4221                           
  4222                           ;main_slave_p1.c: 214:     }
  4223  09D5  0008               	return
  4224  09D6                     l188:	
  4225                           ;main_slave_p1.c: 215:     else{
  4226                           
  4227                           
  4228                           ;main_slave_p1.c: 216:         PORTDbits.RD6 = 0;
  4229  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  4230  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  4231  09D8  1308               	bcf	8,6	;volatile
  4232  09D9  0008               	return
  4233  09DA                     __end_of_RTC_read:
  4234                           
  4235                           	psect	text16
  4236  102E                     __ptext16:	
  4237 ;; *************** function _bcd_dec *****************
  4238 ;; Defined at:
  4239 ;;		line 220 in file "main_slave_p1.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  no              1    wreg     unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  no              1   61[BANK3 ] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      unsigned char 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0, pclath, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 300/300
  4250 ;;		On exit  : 300/300
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4253 ;;      Params:         0       0       0       0       0
  4254 ;;      Locals:         0       0       0       1       0
  4255 ;;      Temps:          0       0       0       3       0
  4256 ;;      Totals:         0       0       0       4       0
  4257 ;;Total ram usage:        4 bytes
  4258 ;; Hardware stack levels used: 1
  4259 ;; Hardware stack levels required when called: 6
  4260 ;; This function calls:
  4261 ;;		___bmul
  4262 ;; This function is called by:
  4263 ;;		_RTC_read
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267  102E                     _bcd_dec:	
  4268                           ;psect for function _bcd_dec
  4269                           
  4270                           
  4271                           ;incstack = 0
  4272                           ; Regs used in _bcd_dec: [wreg+status,2+status,0+pclath+cstack]
  4273                           ;bcd_dec@no stored from wreg
  4274  102E  00CD               	movwf	bcd_dec@no^(0+384)
  4275                           
  4276                           ;main_slave_p1.c: 221:     return ((no >> 4) * 10 + (no & 0x0F));
  4277  102F  300F               	movlw	15
  4278  1030  054D               	andwf	bcd_dec@no^(0+384),w
  4279  1031  00CA               	movwf	??_bcd_dec^(0+384)
  4280  1032  300A               	movlw	10
  4281  1033  00CB               	movwf	(??_bcd_dec+1)^(0+384)
  4282  1034  084B               	movf	(??_bcd_dec+1)^(0+384),w
  4283  1035  00C6               	movwf	___bmul@multiplicand^(0+384)
  4284  1036  084D               	movf	bcd_dec@no^(0+384),w
  4285  1037  00CC               	movwf	(??_bcd_dec+2)^(0+384)
  4286  1038  3004               	movlw	4
  4287  1039                     u3565:
  4288  1039  1003               	clrc
  4289  103A  0CCC               	rrf	(??_bcd_dec+2)^(0+384),f
  4290  103B  3EFF               	addlw	-1
  4291  103C  1D03               	skipz
  4292  103D  2839               	goto	u3565
  4293  103E  084C               	movf	(??_bcd_dec+2)^(0+384),w
  4294  103F  160A  158A  278E   	fcall	___bmul
  4295  1042  074A               	addwf	??_bcd_dec^(0+384),w
  4296  1043  0008               	return
  4297  1044                     __end_of_bcd_dec:
  4298                           
  4299                           	psect	text17
  4300  09DA                     __ptext17:	
  4301 ;; *************** function _LUX_read *****************
  4302 ;; Defined at:
  4303 ;;		line 240 in file "main_slave_p1.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4317 ;;      Params:         0       0       0       0       0
  4318 ;;      Locals:         0       0       0       0       0
  4319 ;;      Temps:          0       0       0       2       0
  4320 ;;      Totals:         0       0       0       2       0
  4321 ;;Total ram usage:        2 bytes
  4322 ;; Hardware stack levels used: 1
  4323 ;; Hardware stack levels required when called: 7
  4324 ;; This function calls:
  4325 ;;		_I2C_Master_Read
  4326 ;;		_I2C_Master_RepeatedStart
  4327 ;;		_I2C_Master_Start
  4328 ;;		_I2C_Master_Stop
  4329 ;;		_I2C_Master_Write
  4330 ;;		_USART_send
  4331 ;;		___bmul
  4332 ;;		_calculateLux
  4333 ;; This function is called by:
  4334 ;;		_main
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338  09DA                     _LUX_read:	
  4339                           ;psect for function _LUX_read
  4340                           
  4341                           
  4342                           ;main_slave_p1.c: 242:     I2C_Master_Start();
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in _LUX_read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4346  09DA  160A  158A  2733  120A  158A  	fcall	_I2C_Master_Start
  4347                           
  4348                           ;main_slave_p1.c: 243:     I2C_Master_Write(0x72);
  4349  09DF  3072               	movlw	114
  4350  09E0  1703               	bsf	3,6	;RP1=1, select bank3
  4351  09E1  0090               	movwf	I2C_Master_Write@d^(0+384)
  4352  09E2  3000               	movlw	0
  4353  09E3  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4354  09E4  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4355                           
  4356                           ;main_slave_p1.c: 244:     I2C_Master_Write(0x8C);
  4357  09E9  308C               	movlw	140
  4358  09EA  1683               	bsf	3,5	;RP0=1, select bank3
  4359  09EB  1703               	bsf	3,6	;RP1=1, select bank3
  4360  09EC  0090               	movwf	I2C_Master_Write@d^(0+384)
  4361  09ED  3000               	movlw	0
  4362  09EE  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4363  09EF  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4364                           
  4365                           ;main_slave_p1.c: 245:     I2C_Master_RepeatedStart();
  4366  09F4  160A  158A  273D  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4367                           
  4368                           ;main_slave_p1.c: 246:     I2C_Master_Write(0x73);
  4369  09F9  3073               	movlw	115
  4370  09FA  1703               	bsf	3,6	;RP1=1, select bank3
  4371  09FB  0090               	movwf	I2C_Master_Write@d^(0+384)
  4372  09FC  3000               	movlw	0
  4373  09FD  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4374  09FE  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4375                           
  4376                           ;main_slave_p1.c: 247:     lowCH0 = I2C_Master_Read(1);
  4377  0A03  3001               	movlw	1
  4378  0A04  1683               	bsf	3,5	;RP0=1, select bank3
  4379  0A05  1703               	bsf	3,6	;RP1=1, select bank3
  4380  0A06  0090               	movwf	I2C_Master_Read@a^(0+384)
  4381  0A07  3000               	movlw	0
  4382  0A08  0091               	movwf	(I2C_Master_Read@a^(0+384)+1)
  4383  0A09  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4384  0A0E  0810               	movf	?_I2C_Master_Read^(0+384),w
  4385  0A0F  00CA               	movwf	??_LUX_read^(0+384)
  4386  0A10  084A               	movf	??_LUX_read^(0+384),w
  4387  0A11  00E2               	movwf	_lowCH0^(0+384)
  4388                           
  4389                           ;main_slave_p1.c: 248:     highCH0 = I2C_Master_Read(0);
  4390  0A12  3000               	movlw	0
  4391  0A13  0090               	movwf	I2C_Master_Read@a^(0+384)
  4392  0A14  0091               	movwf	(I2C_Master_Read@a+1)^(0+384)
  4393  0A15  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4394  0A1A  0810               	movf	?_I2C_Master_Read^(0+384),w
  4395  0A1B  00CA               	movwf	??_LUX_read^(0+384)
  4396  0A1C  084A               	movf	??_LUX_read^(0+384),w
  4397  0A1D  00E1               	movwf	_highCH0^(0+384)
  4398                           
  4399                           ;main_slave_p1.c: 249:     I2C_Master_Stop();
  4400  0A1E  160A  158A  2738  120A  158A  	fcall	_I2C_Master_Stop
  4401                           
  4402                           ;main_slave_p1.c: 251:     I2C_Master_Start();
  4403  0A23  160A  158A  2733  120A  158A  	fcall	_I2C_Master_Start
  4404                           
  4405                           ;main_slave_p1.c: 252:     I2C_Master_Write(0x72);
  4406  0A28  3072               	movlw	114
  4407  0A29  1703               	bsf	3,6	;RP1=1, select bank3
  4408  0A2A  0090               	movwf	I2C_Master_Write@d^(0+384)
  4409  0A2B  3000               	movlw	0
  4410  0A2C  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4411  0A2D  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4412                           
  4413                           ;main_slave_p1.c: 253:     I2C_Master_Write(0x8E);
  4414  0A32  308E               	movlw	142
  4415  0A33  1683               	bsf	3,5	;RP0=1, select bank3
  4416  0A34  1703               	bsf	3,6	;RP1=1, select bank3
  4417  0A35  0090               	movwf	I2C_Master_Write@d^(0+384)
  4418  0A36  3000               	movlw	0
  4419  0A37  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4420  0A38  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4421                           
  4422                           ;main_slave_p1.c: 254:     I2C_Master_RepeatedStart();
  4423  0A3D  160A  158A  273D  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4424                           
  4425                           ;main_slave_p1.c: 255:     I2C_Master_Write(0x73);
  4426  0A42  3073               	movlw	115
  4427  0A43  1703               	bsf	3,6	;RP1=1, select bank3
  4428  0A44  0090               	movwf	I2C_Master_Write@d^(0+384)
  4429  0A45  3000               	movlw	0
  4430  0A46  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  4431  0A47  160A  158A  2766  120A  158A  	fcall	_I2C_Master_Write
  4432                           
  4433                           ;main_slave_p1.c: 256:     lowCH1 = I2C_Master_Read(1);
  4434  0A4C  3001               	movlw	1
  4435  0A4D  1683               	bsf	3,5	;RP0=1, select bank3
  4436  0A4E  1703               	bsf	3,6	;RP1=1, select bank3
  4437  0A4F  0090               	movwf	I2C_Master_Read@a^(0+384)
  4438  0A50  3000               	movlw	0
  4439  0A51  0091               	movwf	(I2C_Master_Read@a^(0+384)+1)
  4440  0A52  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4441  0A57  0810               	movf	?_I2C_Master_Read^(0+384),w
  4442  0A58  00CA               	movwf	??_LUX_read^(0+384)
  4443  0A59  084A               	movf	??_LUX_read^(0+384),w
  4444  0A5A  00E0               	movwf	_lowCH1^(0+384)
  4445                           
  4446                           ;main_slave_p1.c: 257:     highCH1 = I2C_Master_Read(0);
  4447  0A5B  3000               	movlw	0
  4448  0A5C  0090               	movwf	I2C_Master_Read@a^(0+384)
  4449  0A5D  0091               	movwf	(I2C_Master_Read@a+1)^(0+384)
  4450  0A5E  160A  118A  2094  120A  158A  	fcall	_I2C_Master_Read
  4451  0A63  0810               	movf	?_I2C_Master_Read^(0+384),w
  4452  0A64  00CA               	movwf	??_LUX_read^(0+384)
  4453  0A65  084A               	movf	??_LUX_read^(0+384),w
  4454  0A66  00DF               	movwf	_highCH1^(0+384)
  4455                           
  4456                           ;main_slave_p1.c: 258:     I2C_Master_Stop();
  4457  0A67  160A  158A  2738  120A  158A  	fcall	_I2C_Master_Stop
  4458                           
  4459                           ;main_slave_p1.c: 260:     CH0 = (highCH0 << 8) + lowCH0;
  4460  0A6C  1703               	bsf	3,6	;RP1=1, select bank3
  4461  0A6D  0861               	movf	_highCH0^(0+384),w
  4462  0A6E  00CA               	movwf	??_LUX_read^(0+384)
  4463  0A6F  01CB               	clrf	(??_LUX_read^(0+384)+1)
  4464  0A70  084A               	movf	??_LUX_read^(0+384),w
  4465  0A71  00CB               	movwf	(??_LUX_read^(0+384)+1)
  4466  0A72  01CA               	clrf	??_LUX_read^(0+384)
  4467  0A73  0862               	movf	_lowCH0^(0+384),w
  4468  0A74  074A               	addwf	??_LUX_read^(0+384),w
  4469  0A75  00DA               	movwf	_CH0^(0+384)
  4470  0A76  3000               	movlw	0
  4471  0A77  1803               	skipnc
  4472  0A78  3001               	movlw	1
  4473  0A79  074B               	addwf	(??_LUX_read+1)^(0+384),w
  4474  0A7A  00DB               	movwf	(_CH0+1)^(0+384)
  4475                           
  4476                           ;main_slave_p1.c: 261:     CH1 = (highCH1 << 8) + lowCH1;
  4477  0A7B  085F               	movf	_highCH1^(0+384),w
  4478  0A7C  00CA               	movwf	??_LUX_read^(0+384)
  4479  0A7D  01CB               	clrf	(??_LUX_read^(0+384)+1)
  4480  0A7E  084A               	movf	??_LUX_read^(0+384),w
  4481  0A7F  00CB               	movwf	(??_LUX_read^(0+384)+1)
  4482  0A80  01CA               	clrf	??_LUX_read^(0+384)
  4483  0A81  0860               	movf	_lowCH1^(0+384),w
  4484  0A82  074A               	addwf	??_LUX_read^(0+384),w
  4485  0A83  00D8               	movwf	_CH1^(0+384)
  4486  0A84  3000               	movlw	0
  4487  0A85  1803               	skipnc
  4488  0A86  3001               	movlw	1
  4489  0A87  074B               	addwf	(??_LUX_read+1)^(0+384),w
  4490  0A88  00D9               	movwf	(_CH1+1)^(0+384)
  4491                           
  4492                           ;main_slave_p1.c: 263:     LUX = ((calculateLux(CH0, CH1)) * (10/40000));
  4493  0A89  01C6               	clrf	___bmul@multiplicand^(0+384)
  4494  0A8A  0859               	movf	(_CH1+1)^(0+384),w
  4495  0A8B  00A1               	movwf	(calculateLux@ir+1)^(0+384)
  4496  0A8C  0858               	movf	_CH1^(0+384),w
  4497  0A8D  00A0               	movwf	calculateLux@ir^(0+384)
  4498  0A8E  085B               	movf	(_CH0+1)^(0+384),w
  4499  0A8F  009F               	movwf	(calculateLux@broadband+1)^(0+384)
  4500  0A90  085A               	movf	_CH0^(0+384),w
  4501  0A91  009E               	movwf	calculateLux@broadband^(0+384)
  4502  0A92  120A  158A  25AA  120A  158A  	fcall	_calculateLux
  4503  0A97  081E               	movf	?_calculateLux^(0+384),w
  4504  0A98  160A  158A  278E  120A  158A  	fcall	___bmul
  4505  0A9D  00CA               	movwf	??_LUX_read^(0+384)
  4506  0A9E  084A               	movf	??_LUX_read^(0+384),w
  4507  0A9F  00DE               	movwf	_LUX^(0+384)
  4508                           
  4509                           ;main_slave_p1.c: 265:     if (LUX != last_LUX){
  4510  0AA0  085E               	movf	_LUX^(0+384),w
  4511  0AA1  066A               	xorwf	_last_LUX^(0+384),w
  4512  0AA2  1903               	skipnz
  4513  0AA3  0008               	return
  4514                           
  4515                           ;main_slave_p1.c: 266:         last_LUX = LUX;
  4516  0AA4  085E               	movf	_LUX^(0+384),w
  4517  0AA5  00CA               	movwf	??_LUX_read^(0+384)
  4518  0AA6  084A               	movf	??_LUX_read^(0+384),w
  4519  0AA7  00EA               	movwf	_last_LUX^(0+384)
  4520                           
  4521                           ;main_slave_p1.c: 267:         USART_send(192 + LUX);
  4522  0AA8  085E               	movf	_LUX^(0+384),w
  4523  0AA9  3EC0               	addlw	192
  4524  0AAA  160A  158A  2778   	fcall	_USART_send
  4525  0AAD  0008               	return
  4526  0AAE                     __end_of_LUX_read:
  4527                           
  4528                           	psect	text18
  4529  0DAA                     __ptext18:	
  4530 ;; *************** function _calculateLux *****************
  4531 ;; Defined at:
  4532 ;;		line 10 in file "tsl2561.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  broadband       2   14[BANK3 ] unsigned int 
  4535 ;;  ir              2   16[BANK3 ] unsigned int 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  ratio           4   50[BANK3 ] unsigned long 
  4538 ;;  channel0        4   46[BANK3 ] unsigned long 
  4539 ;;  channel1        4   42[BANK3 ] unsigned long 
  4540 ;;  chScale         4   38[BANK3 ] unsigned long 
  4541 ;;  temp            4   30[BANK3 ] unsigned long 
  4542 ;;  ratio1          4   26[BANK3 ] unsigned long 
  4543 ;;  lux             4   22[BANK3 ] unsigned long 
  4544 ;;  m               2   36[BANK3 ] unsigned int 
  4545 ;;  b               2   34[BANK3 ] unsigned int 
  4546 ;;  clipThreshol    2    0        unsigned int 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  4   14[BANK3 ] unsigned long 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 300/300
  4553 ;;		On exit  : 300/300
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4556 ;;      Params:         0       0       0       4       0
  4557 ;;      Locals:         0       0       0      32       0
  4558 ;;      Temps:          0       0       0       4       0
  4559 ;;      Totals:         0       0       0      40       0
  4560 ;;Total ram usage:       40 bytes
  4561 ;; Hardware stack levels used: 1
  4562 ;; Hardware stack levels required when called: 6
  4563 ;; This function calls:
  4564 ;;		___lldiv
  4565 ;;		___lmul
  4566 ;; This function is called by:
  4567 ;;		_LUX_read
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571  0DAA                     _calculateLux:	
  4572                           ;psect for function _calculateLux
  4573                           
  4574                           
  4575                           ;tsl2561.c: 23:   chScale = (0x7517);
  4576                           
  4577                           ;tsl2561.c: 19:   if ((broadband > 0xFFFF) || (ir > 0xFFFF)) {
  4578                           
  4579                           ;incstack = 0
  4580                           ; Regs used in _calculateLux: [wreg+status,2+status,0+pclath+cstack]
  4581  0DAA  3000               	movlw	0
  4582  0DAB  00B9               	movwf	(calculateLux@chScale+3)^(0+384)
  4583  0DAC  3000               	movlw	0
  4584  0DAD  00B8               	movwf	(calculateLux@chScale+2)^(0+384)
  4585  0DAE  3075               	movlw	117
  4586  0DAF  00B7               	movwf	(calculateLux@chScale+1)^(0+384)
  4587  0DB0  3017               	movlw	23
  4588  0DB1  00B6               	movwf	calculateLux@chScale^(0+384)
  4589                           
  4590                           ;tsl2561.c: 24:   chScale = chScale<<4;
  4591  0DB2  0836               	movf	calculateLux@chScale^(0+384),w
  4592  0DB3  00A2               	movwf	??_calculateLux^(0+384)
  4593  0DB4  0837               	movf	(calculateLux@chScale+1)^(0+384),w
  4594  0DB5  00A3               	movwf	(??_calculateLux^(0+384)+1)
  4595  0DB6  0838               	movf	(calculateLux@chScale+2)^(0+384),w
  4596  0DB7  00A4               	movwf	(??_calculateLux^(0+384)+2)
  4597  0DB8  0839               	movf	(calculateLux@chScale+3)^(0+384),w
  4598  0DB9  00A5               	movwf	(??_calculateLux^(0+384)+3)
  4599  0DBA  3004               	movlw	4
  4600  0DBB                     u3575:
  4601  0DBB  1003               	clrc
  4602  0DBC  0DA2               	rlf	??_calculateLux^(0+384),f
  4603  0DBD  0DA3               	rlf	(??_calculateLux^(0+384)+1),f
  4604  0DBE  0DA4               	rlf	(??_calculateLux^(0+384)+2),f
  4605  0DBF  0DA5               	rlf	(??_calculateLux^(0+384)+3),f
  4606  0DC0  3EFF               	addlw	-1
  4607  0DC1  1D03               	skipz
  4608  0DC2  2DBB               	goto	u3575
  4609  0DC3  0825               	movf	(??_calculateLux+3)^(0+384),w
  4610  0DC4  00B9               	movwf	(calculateLux@chScale+3)^(0+384)
  4611  0DC5  0824               	movf	(??_calculateLux+2)^(0+384),w
  4612  0DC6  00B8               	movwf	(calculateLux@chScale+2)^(0+384)
  4613  0DC7  0823               	movf	(??_calculateLux+1)^(0+384),w
  4614  0DC8  00B7               	movwf	(calculateLux@chScale+1)^(0+384)
  4615  0DC9  0822               	movf	??_calculateLux^(0+384),w
  4616  0DCA  00B6               	movwf	calculateLux@chScale^(0+384)
  4617                           
  4618                           ;tsl2561.c: 26:   channel0 = (broadband * chScale) >> (10);
  4619  0DCB  081E               	movf	calculateLux@broadband^(0+384),w
  4620  0DCC  0090               	movwf	___lmul@multiplier^(0+384)
  4621  0DCD  081F               	movf	(calculateLux@broadband+1)^(0+384),w
  4622  0DCE  0091               	movwf	(___lmul@multiplier^(0+384)+1)
  4623  0DCF  0192               	clrf	(___lmul@multiplier^(0+384)+2)
  4624  0DD0  0193               	clrf	(___lmul@multiplier^(0+384)+3)
  4625  0DD1  0839               	movf	(calculateLux@chScale+3)^(0+384),w
  4626  0DD2  0097               	movwf	(___lmul@multiplicand+3)^(0+384)
  4627  0DD3  0838               	movf	(calculateLux@chScale+2)^(0+384),w
  4628  0DD4  0096               	movwf	(___lmul@multiplicand+2)^(0+384)
  4629  0DD5  0837               	movf	(calculateLux@chScale+1)^(0+384),w
  4630  0DD6  0095               	movwf	(___lmul@multiplicand+1)^(0+384)
  4631  0DD7  0836               	movf	calculateLux@chScale^(0+384),w
  4632  0DD8  0094               	movwf	___lmul@multiplicand^(0+384)
  4633  0DD9  160A  118A  2197  120A  158A  	fcall	___lmul
  4634  0DDE  0810               	movf	?___lmul^(0+384),w
  4635  0DDF  00A2               	movwf	??_calculateLux^(0+384)
  4636  0DE0  0811               	movf	(?___lmul+1)^(0+384),w
  4637  0DE1  00A3               	movwf	(??_calculateLux^(0+384)+1)
  4638  0DE2  0812               	movf	(?___lmul+2)^(0+384),w
  4639  0DE3  00A4               	movwf	(??_calculateLux^(0+384)+2)
  4640  0DE4  0813               	movf	(?___lmul+3)^(0+384),w
  4641  0DE5  00A5               	movwf	(??_calculateLux^(0+384)+3)
  4642  0DE6  300A               	movlw	10
  4643  0DE7                     u3585:
  4644  0DE7  1003               	clrc
  4645  0DE8  0CA5               	rrf	(??_calculateLux^(0+384)+3),f
  4646  0DE9  0CA4               	rrf	(??_calculateLux^(0+384)+2),f
  4647  0DEA  0CA3               	rrf	(??_calculateLux^(0+384)+1),f
  4648  0DEB  0CA2               	rrf	??_calculateLux^(0+384),f
  4649  0DEC  3EFF               	addlw	-1
  4650  0DED  1D03               	skipz
  4651  0DEE  2DE7               	goto	u3585
  4652  0DEF  0825               	movf	(??_calculateLux+3)^(0+384),w
  4653  0DF0  00C1               	movwf	(calculateLux@channel0+3)^(0+384)
  4654  0DF1  0824               	movf	(??_calculateLux+2)^(0+384),w
  4655  0DF2  00C0               	movwf	(calculateLux@channel0+2)^(0+384)
  4656  0DF3  0823               	movf	(??_calculateLux+1)^(0+384),w
  4657  0DF4  00BF               	movwf	(calculateLux@channel0+1)^(0+384)
  4658  0DF5  0822               	movf	??_calculateLux^(0+384),w
  4659  0DF6  00BE               	movwf	calculateLux@channel0^(0+384)
  4660                           
  4661                           ;tsl2561.c: 27:   channel1 = (ir * chScale) >> (10);
  4662  0DF7  0820               	movf	calculateLux@ir^(0+384),w
  4663  0DF8  0090               	movwf	___lmul@multiplier^(0+384)
  4664  0DF9  0821               	movf	(calculateLux@ir+1)^(0+384),w
  4665  0DFA  0091               	movwf	(___lmul@multiplier^(0+384)+1)
  4666  0DFB  0192               	clrf	(___lmul@multiplier^(0+384)+2)
  4667  0DFC  0193               	clrf	(___lmul@multiplier^(0+384)+3)
  4668  0DFD  0839               	movf	(calculateLux@chScale+3)^(0+384),w
  4669  0DFE  0097               	movwf	(___lmul@multiplicand+3)^(0+384)
  4670  0DFF  0838               	movf	(calculateLux@chScale+2)^(0+384),w
  4671  0E00  0096               	movwf	(___lmul@multiplicand+2)^(0+384)
  4672  0E01  0837               	movf	(calculateLux@chScale+1)^(0+384),w
  4673  0E02  0095               	movwf	(___lmul@multiplicand+1)^(0+384)
  4674  0E03  0836               	movf	calculateLux@chScale^(0+384),w
  4675  0E04  0094               	movwf	___lmul@multiplicand^(0+384)
  4676  0E05  160A  118A  2197  120A  158A  	fcall	___lmul
  4677  0E0A  0810               	movf	?___lmul^(0+384),w
  4678  0E0B  00A2               	movwf	??_calculateLux^(0+384)
  4679  0E0C  0811               	movf	(?___lmul+1)^(0+384),w
  4680  0E0D  00A3               	movwf	(??_calculateLux^(0+384)+1)
  4681  0E0E  0812               	movf	(?___lmul+2)^(0+384),w
  4682  0E0F  00A4               	movwf	(??_calculateLux^(0+384)+2)
  4683  0E10  0813               	movf	(?___lmul+3)^(0+384),w
  4684  0E11  00A5               	movwf	(??_calculateLux^(0+384)+3)
  4685  0E12  300A               	movlw	10
  4686  0E13                     u3595:
  4687  0E13  1003               	clrc
  4688  0E14  0CA5               	rrf	(??_calculateLux^(0+384)+3),f
  4689  0E15  0CA4               	rrf	(??_calculateLux^(0+384)+2),f
  4690  0E16  0CA3               	rrf	(??_calculateLux^(0+384)+1),f
  4691  0E17  0CA2               	rrf	??_calculateLux^(0+384),f
  4692  0E18  3EFF               	addlw	-1
  4693  0E19  1D03               	skipz
  4694  0E1A  2E13               	goto	u3595
  4695  0E1B  0825               	movf	(??_calculateLux+3)^(0+384),w
  4696  0E1C  00BD               	movwf	(calculateLux@channel1+3)^(0+384)
  4697  0E1D  0824               	movf	(??_calculateLux+2)^(0+384),w
  4698  0E1E  00BC               	movwf	(calculateLux@channel1+2)^(0+384)
  4699  0E1F  0823               	movf	(??_calculateLux+1)^(0+384),w
  4700  0E20  00BB               	movwf	(calculateLux@channel1+1)^(0+384)
  4701  0E21  0822               	movf	??_calculateLux^(0+384),w
  4702  0E22  00BA               	movwf	calculateLux@channel1^(0+384)
  4703                           
  4704                           ;tsl2561.c: 29:   unsigned long ratio1 = 0;
  4705  0E23  3000               	movlw	0
  4706  0E24  00AD               	movwf	(calculateLux@ratio1+3)^(0+384)
  4707  0E25  3000               	movlw	0
  4708  0E26  00AC               	movwf	(calculateLux@ratio1+2)^(0+384)
  4709  0E27  3000               	movlw	0
  4710  0E28  00AB               	movwf	(calculateLux@ratio1+1)^(0+384)
  4711  0E29  3000               	movlw	0
  4712  0E2A  00AA               	movwf	calculateLux@ratio1^(0+384)
  4713                           
  4714                           ;tsl2561.c: 30:   if (channel0 != 0)
  4715  0E2B  0841               	movf	(calculateLux@channel0+3)^(0+384),w
  4716  0E2C  0440               	iorwf	(calculateLux@channel0+2)^(0+384),w
  4717  0E2D  043F               	iorwf	(calculateLux@channel0+1)^(0+384),w
  4718  0E2E  043E               	iorwf	calculateLux@channel0^(0+384),w
  4719  0E2F  1903               	skipnz
  4720  0E30  2E5F               	goto	l3091
  4721                           
  4722                           ;tsl2561.c: 31:     ratio1 = (channel1 << ((9) + 1)) / channel0;
  4723  0E31  0841               	movf	(calculateLux@channel0+3)^(0+384),w
  4724  0E32  0093               	movwf	(___lldiv@divisor+3)^(0+384)
  4725  0E33  0840               	movf	(calculateLux@channel0+2)^(0+384),w
  4726  0E34  0092               	movwf	(___lldiv@divisor+2)^(0+384)
  4727  0E35  083F               	movf	(calculateLux@channel0+1)^(0+384),w
  4728  0E36  0091               	movwf	(___lldiv@divisor+1)^(0+384)
  4729  0E37  083E               	movf	calculateLux@channel0^(0+384),w
  4730  0E38  0090               	movwf	___lldiv@divisor^(0+384)
  4731  0E39  083A               	movf	calculateLux@channel1^(0+384),w
  4732  0E3A  00A2               	movwf	??_calculateLux^(0+384)
  4733  0E3B  083B               	movf	(calculateLux@channel1+1)^(0+384),w
  4734  0E3C  00A3               	movwf	(??_calculateLux^(0+384)+1)
  4735  0E3D  083C               	movf	(calculateLux@channel1+2)^(0+384),w
  4736  0E3E  00A4               	movwf	(??_calculateLux^(0+384)+2)
  4737  0E3F  083D               	movf	(calculateLux@channel1+3)^(0+384),w
  4738  0E40  00A5               	movwf	(??_calculateLux^(0+384)+3)
  4739  0E41  300A               	movlw	10
  4740  0E42                     u3615:
  4741  0E42  1003               	clrc
  4742  0E43  0DA2               	rlf	??_calculateLux^(0+384),f
  4743  0E44  0DA3               	rlf	(??_calculateLux^(0+384)+1),f
  4744  0E45  0DA4               	rlf	(??_calculateLux^(0+384)+2),f
  4745  0E46  0DA5               	rlf	(??_calculateLux^(0+384)+3),f
  4746  0E47  3EFF               	addlw	-1
  4747  0E48  1D03               	skipz
  4748  0E49  2E42               	goto	u3615
  4749  0E4A  0825               	movf	(??_calculateLux+3)^(0+384),w
  4750  0E4B  0097               	movwf	(___lldiv@dividend+3)^(0+384)
  4751  0E4C  0824               	movf	(??_calculateLux+2)^(0+384),w
  4752  0E4D  0096               	movwf	(___lldiv@dividend+2)^(0+384)
  4753  0E4E  0823               	movf	(??_calculateLux+1)^(0+384),w
  4754  0E4F  0095               	movwf	(___lldiv@dividend+1)^(0+384)
  4755  0E50  0822               	movf	??_calculateLux^(0+384),w
  4756  0E51  0094               	movwf	___lldiv@dividend^(0+384)
  4757  0E52  160A  118A  2272  120A  158A  	fcall	___lldiv
  4758  0E57  0813               	movf	(?___lldiv+3)^(0+384),w
  4759  0E58  00AD               	movwf	(calculateLux@ratio1+3)^(0+384)
  4760  0E59  0812               	movf	(?___lldiv+2)^(0+384),w
  4761  0E5A  00AC               	movwf	(calculateLux@ratio1+2)^(0+384)
  4762  0E5B  0811               	movf	(?___lldiv+1)^(0+384),w
  4763  0E5C  00AB               	movwf	(calculateLux@ratio1+1)^(0+384)
  4764  0E5D  0810               	movf	?___lldiv^(0+384),w
  4765  0E5E  00AA               	movwf	calculateLux@ratio1^(0+384)
  4766  0E5F                     l3091:
  4767                           
  4768                           ;tsl2561.c: 33:   unsigned long ratio = (ratio1 + 1) >> 1;
  4769  0E5F  3001               	movlw	1
  4770  0E60  00A2               	movwf	??_calculateLux^(0+384)
  4771  0E61  3000               	movlw	0
  4772  0E62  00A3               	movwf	(??_calculateLux^(0+384)+1)
  4773  0E63  3000               	movlw	0
  4774  0E64  00A4               	movwf	(??_calculateLux^(0+384)+2)
  4775  0E65  3000               	movlw	0
  4776  0E66  00A5               	movwf	(??_calculateLux^(0+384)+3)
  4777  0E67  082A               	movf	calculateLux@ratio1^(0+384),w
  4778  0E68  07A2               	addwf	??_calculateLux^(0+384),f
  4779  0E69  082B               	movf	(calculateLux@ratio1+1)^(0+384),w
  4780  0E6A  1803               	skipnc
  4781  0E6B  0F2B               	incfsz	(calculateLux@ratio1+1)^(0+384),w
  4782  0E6C  2E6E               	goto	u3620
  4783  0E6D  2E6F               	goto	u3621
  4784  0E6E                     u3620:
  4785  0E6E  07A3               	addwf	(??_calculateLux^(0+384)+1),f
  4786  0E6F                     u3621:
  4787  0E6F  082C               	movf	(calculateLux@ratio1+2)^(0+384),w
  4788  0E70  1803               	skipnc
  4789  0E71  0F2C               	incfsz	(calculateLux@ratio1+2)^(0+384),w
  4790  0E72  2E74               	goto	u3622
  4791  0E73  2E75               	goto	u3623
  4792  0E74                     u3622:
  4793  0E74  07A4               	addwf	(??_calculateLux^(0+384)+2),f
  4794  0E75                     u3623:
  4795  0E75  082D               	movf	(calculateLux@ratio1+3)^(0+384),w
  4796  0E76  1803               	skipnc
  4797  0E77  0A2D               	incf	(calculateLux@ratio1+3)^(0+384),w
  4798  0E78  07A5               	addwf	(??_calculateLux^(0+384)+3),f
  4799  0E79  3001               	movlw	1
  4800  0E7A                     u3635:
  4801  0E7A  1003               	clrc
  4802  0E7B  0CA5               	rrf	(??_calculateLux^(0+384)+3),f
  4803  0E7C  0CA4               	rrf	(??_calculateLux^(0+384)+2),f
  4804  0E7D  0CA3               	rrf	(??_calculateLux^(0+384)+1),f
  4805  0E7E  0CA2               	rrf	??_calculateLux^(0+384),f
  4806  0E7F  3EFF               	addlw	-1
  4807  0E80  1D03               	skipz
  4808  0E81  2E7A               	goto	u3635
  4809  0E82  0825               	movf	(??_calculateLux+3)^(0+384),w
  4810  0E83  00C5               	movwf	(calculateLux@ratio+3)^(0+384)
  4811  0E84  0824               	movf	(??_calculateLux+2)^(0+384),w
  4812  0E85  00C4               	movwf	(calculateLux@ratio+2)^(0+384)
  4813  0E86  0823               	movf	(??_calculateLux+1)^(0+384),w
  4814  0E87  00C3               	movwf	(calculateLux@ratio+1)^(0+384)
  4815  0E88  0822               	movf	??_calculateLux^(0+384),w
  4816  0E89  00C2               	movwf	calculateLux@ratio^(0+384)
  4817                           
  4818                           ;tsl2561.c: 35:   unsigned int b, m;;tsl2561.c: 37:   if ((ratio >= 0) && (ratio <= (0x0
      +                          040))) {
  4819  0E8A  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  4820  0E8B  1D03               	btfss	3,2
  4821  0E8C  2EA1               	goto	l3097
  4822  0E8D  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  4823  0E8E  1D03               	btfss	3,2
  4824  0E8F  2EA1               	goto	l3097
  4825  0E90  0843               	movf	(calculateLux@ratio+1)^(0+384),w
  4826  0E91  1D03               	btfss	3,2
  4827  0E92  2EA1               	goto	l3097
  4828  0E93  3041               	movlw	65
  4829  0E94  0242               	subwf	calculateLux@ratio^(0+384),w
  4830  0E95  1D03               	skipz
  4831  0E96  2E97               	goto	u3643
  4832  0E97                     u3643:
  4833  0E97  1803               	btfsc	3,0
  4834  0E98  2EA1               	goto	l3097
  4835                           
  4836                           ;tsl2561.c: 38:     b = (0x01f2);
  4837  0E99  30F2               	movlw	242
  4838  0E9A  1683               	bsf	3,5	;RP0=1, select bank3
  4839  0E9B  1703               	bsf	3,6	;RP1=1, select bank3
  4840  0E9C  00B2               	movwf	calculateLux@b^(0+384)
  4841  0E9D  3001               	movlw	1
  4842  0E9E  00B3               	movwf	(calculateLux@b^(0+384)+1)
  4843                           
  4844                           ;tsl2561.c: 39:     m = (0x01be);
  4845  0E9F  30BE               	movlw	190
  4846  0EA0  2F0A               	goto	L21
  4847  0EA1                     l3097:	
  4848                           ;tsl2561.c: 40:   } else if (ratio <= (0x0080)) {
  4849                           
  4850  0EA1  1683               	bsf	3,5	;RP0=1, select bank3
  4851  0EA2  1703               	bsf	3,6	;RP1=1, select bank3
  4852  0EA3  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  4853  0EA4  1D03               	btfss	3,2
  4854  0EA5  2EBC               	goto	l3101
  4855  0EA6  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  4856  0EA7  1D03               	btfss	3,2
  4857  0EA8  2EBC               	goto	l3101
  4858  0EA9  0843               	movf	(calculateLux@ratio+1)^(0+384),w
  4859  0EAA  1D03               	btfss	3,2
  4860  0EAB  2EBC               	goto	l3101
  4861  0EAC  3081               	movlw	129
  4862  0EAD  0242               	subwf	calculateLux@ratio^(0+384),w
  4863  0EAE  1D03               	skipz
  4864  0EAF  2EB0               	goto	u3653
  4865  0EB0                     u3653:
  4866  0EB0  1803               	btfsc	3,0
  4867  0EB1  2EBC               	goto	l3101
  4868                           
  4869                           ;tsl2561.c: 41:     b = (0x0214);
  4870  0EB2  3014               	movlw	20
  4871  0EB3  1683               	bsf	3,5	;RP0=1, select bank3
  4872  0EB4  1703               	bsf	3,6	;RP1=1, select bank3
  4873  0EB5  00B2               	movwf	calculateLux@b^(0+384)
  4874  0EB6  3002               	movlw	2
  4875  0EB7  00B3               	movwf	(calculateLux@b^(0+384)+1)
  4876                           
  4877                           ;tsl2561.c: 42:     m = (0x02d1);
  4878  0EB8  30D1               	movlw	209
  4879  0EB9  00B4               	movwf	calculateLux@m^(0+384)
  4880  0EBA  3002               	movlw	2
  4881  0EBB  2F42               	goto	L18
  4882  0EBC                     l3101:	
  4883                           ;tsl2561.c: 43:   } else if (ratio <= (0x00c0)) {
  4884                           
  4885  0EBC  1683               	bsf	3,5	;RP0=1, select bank3
  4886  0EBD  1703               	bsf	3,6	;RP1=1, select bank3
  4887  0EBE  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  4888  0EBF  1D03               	btfss	3,2
  4889  0EC0  2ED5               	goto	l3105
  4890  0EC1  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  4891  0EC2  1D03               	btfss	3,2
  4892  0EC3  2ED5               	goto	l3105
  4893  0EC4  0843               	movf	(calculateLux@ratio+1)^(0+384),w
  4894  0EC5  1D03               	btfss	3,2
  4895  0EC6  2ED5               	goto	l3105
  4896  0EC7  30C1               	movlw	193
  4897  0EC8  0242               	subwf	calculateLux@ratio^(0+384),w
  4898  0EC9  1D03               	skipz
  4899  0ECA  2ECB               	goto	u3663
  4900  0ECB                     u3663:
  4901  0ECB  1803               	btfsc	3,0
  4902  0ECC  2ED5               	goto	l3105
  4903                           
  4904                           ;tsl2561.c: 44:     b = (0x023f);
  4905  0ECD  303F               	movlw	63
  4906  0ECE  1683               	bsf	3,5	;RP0=1, select bank3
  4907  0ECF  1703               	bsf	3,6	;RP1=1, select bank3
  4908  0ED0  00B2               	movwf	calculateLux@b^(0+384)
  4909  0ED1  3002               	movlw	2
  4910  0ED2  00B3               	movwf	(calculateLux@b^(0+384)+1)
  4911                           
  4912                           ;tsl2561.c: 45:     m = (0x037b);
  4913  0ED3  307B               	movlw	123
  4914  0ED4  2EEE               	goto	L19
  4915  0ED5                     l3105:	
  4916                           ;tsl2561.c: 46:   } else if (ratio <= (0x0100)) {
  4917                           
  4918  0ED5  1683               	bsf	3,5	;RP0=1, select bank3
  4919  0ED6  1703               	bsf	3,6	;RP1=1, select bank3
  4920  0ED7  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  4921  0ED8  1D03               	btfss	3,2
  4922  0ED9  2EF1               	goto	l3109
  4923  0EDA  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  4924  0EDB  1D03               	btfss	3,2
  4925  0EDC  2EF1               	goto	l3109
  4926  0EDD  3001               	movlw	1
  4927  0EDE  0243               	subwf	(calculateLux@ratio+1)^(0+384),w
  4928  0EDF  1D03               	skipz
  4929  0EE0  2EE5               	goto	u3673
  4930  0EE1  3001               	movlw	1
  4931  0EE2  0242               	subwf	calculateLux@ratio^(0+384),w
  4932  0EE3  1D03               	skipz
  4933  0EE4  2EE5               	goto	u3673
  4934  0EE5                     u3673:
  4935  0EE5  1803               	btfsc	3,0
  4936  0EE6  2EF1               	goto	l3109
  4937                           
  4938                           ;tsl2561.c: 47:     b = (0x0270);
  4939  0EE7  3070               	movlw	112
  4940  0EE8  1683               	bsf	3,5	;RP0=1, select bank3
  4941  0EE9  1703               	bsf	3,6	;RP1=1, select bank3
  4942  0EEA  00B2               	movwf	calculateLux@b^(0+384)
  4943  0EEB  3002               	movlw	2
  4944  0EEC  00B3               	movwf	(calculateLux@b^(0+384)+1)
  4945                           
  4946                           ;tsl2561.c: 48:     m = (0x03fe);
  4947  0EED  30FE               	movlw	254
  4948  0EEE                     L19:
  4949  0EEE  00B4               	movwf	calculateLux@m^(0+384)
  4950  0EEF  3003               	movlw	3
  4951  0EF0  2F42               	goto	L18
  4952  0EF1                     l3109:	
  4953                           ;tsl2561.c: 49:   } else if (ratio <= (0x0138)) {
  4954                           
  4955  0EF1  1683               	bsf	3,5	;RP0=1, select bank3
  4956  0EF2  1703               	bsf	3,6	;RP1=1, select bank3
  4957  0EF3  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  4958  0EF4  1D03               	btfss	3,2
  4959  0EF5  2F0D               	goto	l3113
  4960  0EF6  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  4961  0EF7  1D03               	btfss	3,2
  4962  0EF8  2F0D               	goto	l3113
  4963  0EF9  3001               	movlw	1
  4964  0EFA  0243               	subwf	(calculateLux@ratio+1)^(0+384),w
  4965  0EFB  1D03               	skipz
  4966  0EFC  2F01               	goto	u3683
  4967  0EFD  3039               	movlw	57
  4968  0EFE  0242               	subwf	calculateLux@ratio^(0+384),w
  4969  0EFF  1D03               	skipz
  4970  0F00  2F01               	goto	u3683
  4971  0F01                     u3683:
  4972  0F01  1803               	btfsc	3,0
  4973  0F02  2F0D               	goto	l3113
  4974                           
  4975                           ;tsl2561.c: 50:     b = (0x016f);
  4976  0F03  306F               	movlw	111
  4977  0F04  1683               	bsf	3,5	;RP0=1, select bank3
  4978  0F05  1703               	bsf	3,6	;RP1=1, select bank3
  4979  0F06  00B2               	movwf	calculateLux@b^(0+384)
  4980  0F07  3001               	movlw	1
  4981  0F08  00B3               	movwf	(calculateLux@b^(0+384)+1)
  4982                           
  4983                           ;tsl2561.c: 51:     m = (0x01fc);
  4984  0F09  30FC               	movlw	252
  4985  0F0A                     L21:
  4986  0F0A  00B4               	movwf	calculateLux@m^(0+384)
  4987  0F0B  3001               	movlw	1
  4988  0F0C  2F42               	goto	L18
  4989  0F0D                     l3113:	
  4990                           ;tsl2561.c: 52:   } else if (ratio <= (0x019a)) {
  4991                           
  4992  0F0D  1683               	bsf	3,5	;RP0=1, select bank3
  4993  0F0E  1703               	bsf	3,6	;RP1=1, select bank3
  4994  0F0F  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  4995  0F10  1D03               	btfss	3,2
  4996  0F11  2F27               	goto	l3117
  4997  0F12  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  4998  0F13  1D03               	btfss	3,2
  4999  0F14  2F27               	goto	l3117
  5000  0F15  3001               	movlw	1
  5001  0F16  0243               	subwf	(calculateLux@ratio+1)^(0+384),w
  5002  0F17  1D03               	skipz
  5003  0F18  2F1D               	goto	u3693
  5004  0F19  309B               	movlw	155
  5005  0F1A  0242               	subwf	calculateLux@ratio^(0+384),w
  5006  0F1B  1D03               	skipz
  5007  0F1C  2F1D               	goto	u3693
  5008  0F1D                     u3693:
  5009  0F1D  1803               	btfsc	3,0
  5010  0F1E  2F27               	goto	l3117
  5011                           
  5012                           ;tsl2561.c: 53:     b = (0x00d2);
  5013  0F1F  30D2               	movlw	210
  5014  0F20  1683               	bsf	3,5	;RP0=1, select bank3
  5015  0F21  1703               	bsf	3,6	;RP1=1, select bank3
  5016  0F22  00B2               	movwf	calculateLux@b^(0+384)
  5017  0F23  3000               	movlw	0
  5018  0F24  00B3               	movwf	(calculateLux@b^(0+384)+1)
  5019                           
  5020                           ;tsl2561.c: 54:     m = (0x00fb);
  5021  0F25  30FB               	movlw	251
  5022  0F26  2F40               	goto	L20
  5023  0F27                     l3117:	
  5024                           ;tsl2561.c: 55:   } else if (ratio <= (0x029a)) {
  5025                           
  5026  0F27  1683               	bsf	3,5	;RP0=1, select bank3
  5027  0F28  1703               	bsf	3,6	;RP1=1, select bank3
  5028  0F29  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  5029  0F2A  1D03               	btfss	3,2
  5030  0F2B  2F44               	goto	l3121
  5031  0F2C  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  5032  0F2D  1D03               	btfss	3,2
  5033  0F2E  2F44               	goto	l3121
  5034  0F2F  3002               	movlw	2
  5035  0F30  0243               	subwf	(calculateLux@ratio+1)^(0+384),w
  5036  0F31  1D03               	skipz
  5037  0F32  2F37               	goto	u3703
  5038  0F33  309B               	movlw	155
  5039  0F34  0242               	subwf	calculateLux@ratio^(0+384),w
  5040  0F35  1D03               	skipz
  5041  0F36  2F37               	goto	u3703
  5042  0F37                     u3703:
  5043  0F37  1803               	btfsc	3,0
  5044  0F38  2F44               	goto	l3121
  5045                           
  5046                           ;tsl2561.c: 56:     b = (0x0018);
  5047  0F39  3018               	movlw	24
  5048  0F3A  1683               	bsf	3,5	;RP0=1, select bank3
  5049  0F3B  1703               	bsf	3,6	;RP1=1, select bank3
  5050  0F3C  00B2               	movwf	calculateLux@b^(0+384)
  5051  0F3D  3000               	movlw	0
  5052  0F3E  00B3               	movwf	(calculateLux@b^(0+384)+1)
  5053                           
  5054                           ;tsl2561.c: 57:     m = (0x0012);
  5055  0F3F  3012               	movlw	18
  5056  0F40                     L20:
  5057  0F40  00B4               	movwf	calculateLux@m^(0+384)
  5058  0F41  3000               	movlw	0
  5059  0F42                     L18:
  5060  0F42  00B5               	movwf	(calculateLux@m^(0+384)+1)
  5061                           
  5062                           ;tsl2561.c: 58:   } else if (ratio > (0x029a)) {
  5063  0F43  2F5C               	goto	l3125
  5064  0F44                     l3121:
  5065  0F44  1683               	bsf	3,5	;RP0=1, select bank3
  5066  0F45  1703               	bsf	3,6	;RP1=1, select bank3
  5067  0F46  0845               	movf	(calculateLux@ratio+3)^(0+384),w
  5068  0F47  1D03               	btfss	3,2
  5069  0F48  2F56               	goto	l3123
  5070  0F49  0844               	movf	(calculateLux@ratio+2)^(0+384),w
  5071  0F4A  1D03               	btfss	3,2
  5072  0F4B  2F56               	goto	l3123
  5073  0F4C  3002               	movlw	2
  5074  0F4D  0243               	subwf	(calculateLux@ratio+1)^(0+384),w
  5075  0F4E  1D03               	skipz
  5076  0F4F  2F54               	goto	u3713
  5077  0F50  309B               	movlw	155
  5078  0F51  0242               	subwf	calculateLux@ratio^(0+384),w
  5079  0F52  1D03               	skipz
  5080  0F53  2F54               	goto	u3713
  5081  0F54                     u3713:
  5082  0F54  1C03               	btfss	3,0
  5083  0F55  2F5C               	goto	l3125
  5084  0F56                     l3123:
  5085                           
  5086                           ;tsl2561.c: 59:     b = (0x0000);
  5087  0F56  1683               	bsf	3,5	;RP0=1, select bank3
  5088  0F57  1703               	bsf	3,6	;RP1=1, select bank3
  5089  0F58  01B2               	clrf	calculateLux@b^(0+384)
  5090  0F59  01B3               	clrf	(calculateLux@b+1)^(0+384)
  5091                           
  5092                           ;tsl2561.c: 60:     m = (0x0000);
  5093  0F5A  01B4               	clrf	calculateLux@m^(0+384)
  5094  0F5B  01B5               	clrf	(calculateLux@m+1)^(0+384)
  5095  0F5C                     l3125:
  5096                           
  5097                           ;tsl2561.c: 63:   unsigned long temp;;tsl2561.c: 64:   channel0 = channel0 * b;
  5098  0F5C  1683               	bsf	3,5	;RP0=1, select bank3
  5099  0F5D  1703               	bsf	3,6	;RP1=1, select bank3
  5100  0F5E  0832               	movf	calculateLux@b^(0+384),w
  5101  0F5F  0090               	movwf	___lmul@multiplier^(0+384)
  5102  0F60  0833               	movf	(calculateLux@b+1)^(0+384),w
  5103  0F61  0091               	movwf	(___lmul@multiplier^(0+384)+1)
  5104  0F62  0192               	clrf	(___lmul@multiplier^(0+384)+2)
  5105  0F63  0193               	clrf	(___lmul@multiplier^(0+384)+3)
  5106  0F64  0841               	movf	(calculateLux@channel0+3)^(0+384),w
  5107  0F65  0097               	movwf	(___lmul@multiplicand+3)^(0+384)
  5108  0F66  0840               	movf	(calculateLux@channel0+2)^(0+384),w
  5109  0F67  0096               	movwf	(___lmul@multiplicand+2)^(0+384)
  5110  0F68  083F               	movf	(calculateLux@channel0+1)^(0+384),w
  5111  0F69  0095               	movwf	(___lmul@multiplicand+1)^(0+384)
  5112  0F6A  083E               	movf	calculateLux@channel0^(0+384),w
  5113  0F6B  0094               	movwf	___lmul@multiplicand^(0+384)
  5114  0F6C  160A  118A  2197  120A  158A  	fcall	___lmul
  5115  0F71  0813               	movf	(?___lmul+3)^(0+384),w
  5116  0F72  00C1               	movwf	(calculateLux@channel0+3)^(0+384)
  5117  0F73  0812               	movf	(?___lmul+2)^(0+384),w
  5118  0F74  00C0               	movwf	(calculateLux@channel0+2)^(0+384)
  5119  0F75  0811               	movf	(?___lmul+1)^(0+384),w
  5120  0F76  00BF               	movwf	(calculateLux@channel0+1)^(0+384)
  5121  0F77  0810               	movf	?___lmul^(0+384),w
  5122  0F78  00BE               	movwf	calculateLux@channel0^(0+384)
  5123                           
  5124                           ;tsl2561.c: 65:   channel1 = channel1 * m;
  5125  0F79  0834               	movf	calculateLux@m^(0+384),w
  5126  0F7A  0090               	movwf	___lmul@multiplier^(0+384)
  5127  0F7B  0835               	movf	(calculateLux@m+1)^(0+384),w
  5128  0F7C  0091               	movwf	(___lmul@multiplier^(0+384)+1)
  5129  0F7D  0192               	clrf	(___lmul@multiplier^(0+384)+2)
  5130  0F7E  0193               	clrf	(___lmul@multiplier^(0+384)+3)
  5131  0F7F  083D               	movf	(calculateLux@channel1+3)^(0+384),w
  5132  0F80  0097               	movwf	(___lmul@multiplicand+3)^(0+384)
  5133  0F81  083C               	movf	(calculateLux@channel1+2)^(0+384),w
  5134  0F82  0096               	movwf	(___lmul@multiplicand+2)^(0+384)
  5135  0F83  083B               	movf	(calculateLux@channel1+1)^(0+384),w
  5136  0F84  0095               	movwf	(___lmul@multiplicand+1)^(0+384)
  5137  0F85  083A               	movf	calculateLux@channel1^(0+384),w
  5138  0F86  0094               	movwf	___lmul@multiplicand^(0+384)
  5139  0F87  160A  118A  2197  120A  158A  	fcall	___lmul
  5140  0F8C  0813               	movf	(?___lmul+3)^(0+384),w
  5141  0F8D  00BD               	movwf	(calculateLux@channel1+3)^(0+384)
  5142  0F8E  0812               	movf	(?___lmul+2)^(0+384),w
  5143  0F8F  00BC               	movwf	(calculateLux@channel1+2)^(0+384)
  5144  0F90  0811               	movf	(?___lmul+1)^(0+384),w
  5145  0F91  00BB               	movwf	(calculateLux@channel1+1)^(0+384)
  5146  0F92  0810               	movf	?___lmul^(0+384),w
  5147  0F93  00BA               	movwf	calculateLux@channel1^(0+384)
  5148                           
  5149                           ;tsl2561.c: 67:   temp = 0;
  5150  0F94  3000               	movlw	0
  5151  0F95  00B1               	movwf	(calculateLux@temp+3)^(0+384)
  5152  0F96  3000               	movlw	0
  5153  0F97  00B0               	movwf	(calculateLux@temp+2)^(0+384)
  5154  0F98  3000               	movlw	0
  5155  0F99  00AF               	movwf	(calculateLux@temp+1)^(0+384)
  5156  0F9A  3000               	movlw	0
  5157  0F9B  00AE               	movwf	calculateLux@temp^(0+384)
  5158                           
  5159                           ;tsl2561.c: 69:   if (channel0 > channel1)
  5160  0F9C  0841               	movf	(calculateLux@channel0+3)^(0+384),w
  5161  0F9D  023D               	subwf	(calculateLux@channel1+3)^(0+384),w
  5162  0F9E  1D03               	skipz
  5163  0F9F  2FAA               	goto	u3725
  5164  0FA0  0840               	movf	(calculateLux@channel0+2)^(0+384),w
  5165  0FA1  023C               	subwf	(calculateLux@channel1+2)^(0+384),w
  5166  0FA2  1D03               	skipz
  5167  0FA3  2FAA               	goto	u3725
  5168  0FA4  083F               	movf	(calculateLux@channel0+1)^(0+384),w
  5169  0FA5  023B               	subwf	(calculateLux@channel1+1)^(0+384),w
  5170  0FA6  1D03               	skipz
  5171  0FA7  2FAA               	goto	u3725
  5172  0FA8  083E               	movf	calculateLux@channel0^(0+384),w
  5173  0FA9  023A               	subwf	calculateLux@channel1^(0+384),w
  5174  0FAA                     u3725:
  5175  0FAA  1803               	skipnc
  5176  0FAB  2FD0               	goto	l423
  5177                           
  5178                           ;tsl2561.c: 70:     temp = channel0 - channel1;
  5179  0FAC  083E               	movf	calculateLux@channel0^(0+384),w
  5180  0FAD  00A2               	movwf	??_calculateLux^(0+384)
  5181  0FAE  083F               	movf	(calculateLux@channel0+1)^(0+384),w
  5182  0FAF  00A3               	movwf	(??_calculateLux^(0+384)+1)
  5183  0FB0  0840               	movf	(calculateLux@channel0+2)^(0+384),w
  5184  0FB1  00A4               	movwf	(??_calculateLux^(0+384)+2)
  5185  0FB2  0841               	movf	(calculateLux@channel0+3)^(0+384),w
  5186  0FB3  00A5               	movwf	(??_calculateLux^(0+384)+3)
  5187  0FB4  083A               	movf	calculateLux@channel1^(0+384),w
  5188  0FB5  02A2               	subwf	??_calculateLux^(0+384),f
  5189  0FB6  083B               	movf	(calculateLux@channel1+1)^(0+384),w
  5190  0FB7  1C03               	skipc
  5191  0FB8  0F3B               	incfsz	(calculateLux@channel1+1)^(0+384),w
  5192  0FB9  2FBB               	goto	u3731
  5193  0FBA  2FBC               	goto	u3732
  5194  0FBB                     u3731:
  5195  0FBB  02A3               	subwf	(??_calculateLux^(0+384)+1),f
  5196  0FBC                     u3732:
  5197  0FBC  083C               	movf	(calculateLux@channel1+2)^(0+384),w
  5198  0FBD  1C03               	skipc
  5199  0FBE  0F3C               	incfsz	(calculateLux@channel1+2)^(0+384),w
  5200  0FBF  2FC1               	goto	u3733
  5201  0FC0  2FC2               	goto	u3734
  5202  0FC1                     u3733:
  5203  0FC1  02A4               	subwf	(??_calculateLux^(0+384)+2),f
  5204  0FC2                     u3734:
  5205  0FC2  083D               	movf	(calculateLux@channel1+3)^(0+384),w
  5206  0FC3  1C03               	skipc
  5207  0FC4  0F3D               	incfsz	(calculateLux@channel1+3)^(0+384),w
  5208  0FC5  2FC7               	goto	u3735
  5209  0FC6  2FC8               	goto	u3736
  5210  0FC7                     u3735:
  5211  0FC7  02A5               	subwf	(??_calculateLux^(0+384)+3),f
  5212  0FC8                     u3736:
  5213  0FC8  0825               	movf	(??_calculateLux+3)^(0+384),w
  5214  0FC9  00B1               	movwf	(calculateLux@temp+3)^(0+384)
  5215  0FCA  0824               	movf	(??_calculateLux+2)^(0+384),w
  5216  0FCB  00B0               	movwf	(calculateLux@temp+2)^(0+384)
  5217  0FCC  0823               	movf	(??_calculateLux+1)^(0+384),w
  5218  0FCD  00AF               	movwf	(calculateLux@temp+1)^(0+384)
  5219  0FCE  0822               	movf	??_calculateLux^(0+384),w
  5220  0FCF  00AE               	movwf	calculateLux@temp^(0+384)
  5221  0FD0                     l423:
  5222                           
  5223                           ;tsl2561.c: 73:   temp += (1 << ((14) - 1));
  5224  0FD0  3000               	movlw	0
  5225  0FD1  07AE               	addwf	calculateLux@temp^(0+384),f
  5226  0FD2  3020               	movlw	32
  5227  0FD3  1803               	skipnc
  5228  0FD4  3021               	movlw	33
  5229  0FD5  07AF               	addwf	(calculateLux@temp+1)^(0+384),f
  5230  0FD6  3000               	movlw	0
  5231  0FD7  1803               	skipnc
  5232  0FD8  3001               	movlw	1
  5233  0FD9  07B0               	addwf	(calculateLux@temp+2)^(0+384),f
  5234  0FDA  3000               	movlw	0
  5235  0FDB  1803               	skipnc
  5236  0FDC  3001               	movlw	1
  5237  0FDD  07B1               	addwf	(calculateLux@temp+3)^(0+384),f
  5238                           
  5239                           ;tsl2561.c: 76:   uint32_t lux = temp >> (14);
  5240  0FDE  082E               	movf	calculateLux@temp^(0+384),w
  5241  0FDF  00A2               	movwf	??_calculateLux^(0+384)
  5242  0FE0  082F               	movf	(calculateLux@temp+1)^(0+384),w
  5243  0FE1  00A3               	movwf	(??_calculateLux^(0+384)+1)
  5244  0FE2  0830               	movf	(calculateLux@temp+2)^(0+384),w
  5245  0FE3  00A4               	movwf	(??_calculateLux^(0+384)+2)
  5246  0FE4  0831               	movf	(calculateLux@temp+3)^(0+384),w
  5247  0FE5  00A5               	movwf	(??_calculateLux^(0+384)+3)
  5248  0FE6  300E               	movlw	14
  5249  0FE7                     u3745:
  5250  0FE7  1003               	clrc
  5251  0FE8  0CA5               	rrf	(??_calculateLux^(0+384)+3),f
  5252  0FE9  0CA4               	rrf	(??_calculateLux^(0+384)+2),f
  5253  0FEA  0CA3               	rrf	(??_calculateLux^(0+384)+1),f
  5254  0FEB  0CA2               	rrf	??_calculateLux^(0+384),f
  5255  0FEC  3EFF               	addlw	-1
  5256  0FED  1D03               	skipz
  5257  0FEE  2FE7               	goto	u3745
  5258  0FEF  0825               	movf	(??_calculateLux+3)^(0+384),w
  5259  0FF0  00A9               	movwf	(calculateLux@lux+3)^(0+384)
  5260  0FF1  0824               	movf	(??_calculateLux+2)^(0+384),w
  5261  0FF2  00A8               	movwf	(calculateLux@lux+2)^(0+384)
  5262  0FF3  0823               	movf	(??_calculateLux+1)^(0+384),w
  5263  0FF4  00A7               	movwf	(calculateLux@lux+1)^(0+384)
  5264  0FF5  0822               	movf	??_calculateLux^(0+384),w
  5265  0FF6  00A6               	movwf	calculateLux@lux^(0+384)
  5266                           
  5267                           ;tsl2561.c: 79:   return lux;
  5268  0FF7  0829               	movf	(calculateLux@lux+3)^(0+384),w
  5269  0FF8  00A1               	movwf	(?_calculateLux+3)^(0+384)
  5270  0FF9  0828               	movf	(calculateLux@lux+2)^(0+384),w
  5271  0FFA  00A0               	movwf	(?_calculateLux+2)^(0+384)
  5272  0FFB  0827               	movf	(calculateLux@lux+1)^(0+384),w
  5273  0FFC  009F               	movwf	(?_calculateLux+1)^(0+384)
  5274  0FFD  0826               	movf	calculateLux@lux^(0+384),w
  5275  0FFE  009E               	movwf	?_calculateLux^(0+384)
  5276  0FFF  0008               	return
  5277  1000                     __end_of_calculateLux:
  5278                           
  5279                           	psect	text19
  5280  1197                     __ptext19:	
  5281 ;; *************** function ___lmul *****************
  5282 ;; Defined at:
  5283 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul32.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  multiplier      4    0[BANK3 ] unsigned long 
  5286 ;;  multiplicand    4    4[BANK3 ] unsigned long 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  product         4    9[BANK3 ] unsigned long 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  4    0[BANK3 ] unsigned long 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2, status,0
  5293 ;; Tracked objects:
  5294 ;;		On entry : 300/300
  5295 ;;		On exit  : 300/300
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5298 ;;      Params:         0       0       0       8       0
  5299 ;;      Locals:         0       0       0       4       0
  5300 ;;      Temps:          0       0       0       1       0
  5301 ;;      Totals:         0       0       0      13       0
  5302 ;;Total ram usage:       13 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; Hardware stack levels required when called: 5
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_calculateLux
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312  1197                     ___lmul:	
  5313                           ;psect for function ___lmul
  5314                           
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5318  1197  3000               	movlw	0
  5319  1198  009C               	movwf	(___lmul@product+3)^(0+384)
  5320  1199  3000               	movlw	0
  5321  119A  009B               	movwf	(___lmul@product+2)^(0+384)
  5322  119B  3000               	movlw	0
  5323  119C  009A               	movwf	(___lmul@product+1)^(0+384)
  5324  119D  3000               	movlw	0
  5325  119E  0099               	movwf	___lmul@product^(0+384)
  5326  119F                     l2629:
  5327  119F  1C10               	btfss	___lmul@multiplier^(0+384),0
  5328  11A0  29B5               	goto	l2633
  5329  11A1  0814               	movf	___lmul@multiplicand^(0+384),w
  5330  11A2  0799               	addwf	___lmul@product^(0+384),f
  5331  11A3  0815               	movf	(___lmul@multiplicand+1)^(0+384),w
  5332  11A4  1103               	clrz
  5333  11A5  1803               	skipnc
  5334  11A6  3E01               	addlw	1
  5335  11A7  1D03               	btfss	3,2
  5336  11A8  079A               	addwf	(___lmul@product+1)^(0+384),f
  5337  11A9  0816               	movf	(___lmul@multiplicand+2)^(0+384),w
  5338  11AA  1103               	clrz
  5339  11AB  1803               	skipnc
  5340  11AC  3E01               	addlw	1
  5341  11AD  1D03               	btfss	3,2
  5342  11AE  079B               	addwf	(___lmul@product+2)^(0+384),f
  5343  11AF  0817               	movf	(___lmul@multiplicand+3)^(0+384),w
  5344  11B0  1103               	clrz
  5345  11B1  1803               	skipnc
  5346  11B2  3E01               	addlw	1
  5347  11B3  1D03               	btfss	3,2
  5348  11B4  079C               	addwf	(___lmul@product+3)^(0+384),f
  5349  11B5                     l2633:
  5350  11B5  3001               	movlw	1
  5351  11B6  0098               	movwf	??___lmul^(0+384)
  5352  11B7                     u2575:
  5353  11B7  1003               	clrc
  5354  11B8  0D94               	rlf	___lmul@multiplicand^(0+384),f
  5355  11B9  0D95               	rlf	(___lmul@multiplicand+1)^(0+384),f
  5356  11BA  0D96               	rlf	(___lmul@multiplicand+2)^(0+384),f
  5357  11BB  0D97               	rlf	(___lmul@multiplicand+3)^(0+384),f
  5358  11BC  0B98               	decfsz	??___lmul^(0+384),f
  5359  11BD  29B7               	goto	u2575
  5360  11BE  3001               	movlw	1
  5361  11BF                     u2585:
  5362  11BF  1003               	clrc
  5363  11C0  0C93               	rrf	(___lmul@multiplier+3)^(0+384),f
  5364  11C1  0C92               	rrf	(___lmul@multiplier+2)^(0+384),f
  5365  11C2  0C91               	rrf	(___lmul@multiplier+1)^(0+384),f
  5366  11C3  0C90               	rrf	___lmul@multiplier^(0+384),f
  5367  11C4  3EFF               	addlw	-1
  5368  11C5  1D03               	skipz
  5369  11C6  29BF               	goto	u2585
  5370  11C7  0813               	movf	(___lmul@multiplier+3)^(0+384),w
  5371  11C8  0412               	iorwf	(___lmul@multiplier+2)^(0+384),w
  5372  11C9  0411               	iorwf	(___lmul@multiplier+1)^(0+384),w
  5373  11CA  0410               	iorwf	___lmul@multiplier^(0+384),w
  5374  11CB  1D03               	skipz
  5375  11CC  299F               	goto	l2629
  5376  11CD  081C               	movf	(___lmul@product+3)^(0+384),w
  5377  11CE  0093               	movwf	(?___lmul+3)^(0+384)
  5378  11CF  081B               	movf	(___lmul@product+2)^(0+384),w
  5379  11D0  0092               	movwf	(?___lmul+2)^(0+384)
  5380  11D1  081A               	movf	(___lmul@product+1)^(0+384),w
  5381  11D2  0091               	movwf	(?___lmul+1)^(0+384)
  5382  11D3  0819               	movf	___lmul@product^(0+384),w
  5383  11D4  0090               	movwf	?___lmul^(0+384)
  5384  11D5  0008               	return
  5385  11D6                     __end_of___lmul:
  5386                           
  5387                           	psect	text20
  5388  1272                     __ptext20:	
  5389 ;; *************** function ___lldiv *****************
  5390 ;; Defined at:
  5391 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\__lldiv.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  divisor         4    0[BANK3 ] unsigned long 
  5394 ;;  dividend        4    4[BANK3 ] unsigned long 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  quotient        4    9[BANK3 ] unsigned long 
  5397 ;;  counter         1   13[BANK3 ] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  4    0[BANK3 ] unsigned long 
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0
  5402 ;; Tracked objects:
  5403 ;;		On entry : 300/300
  5404 ;;		On exit  : 300/300
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5407 ;;      Params:         0       0       0       8       0
  5408 ;;      Locals:         0       0       0       5       0
  5409 ;;      Temps:          0       0       0       1       0
  5410 ;;      Totals:         0       0       0      14       0
  5411 ;;Total ram usage:       14 bytes
  5412 ;; Hardware stack levels used: 1
  5413 ;; Hardware stack levels required when called: 5
  5414 ;; This function calls:
  5415 ;;		Nothing
  5416 ;; This function is called by:
  5417 ;;		_USART_set
  5418 ;;		_I2C_Master_Init
  5419 ;;		_calculateLux
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423  1272                     ___lldiv:	
  5424                           ;psect for function ___lldiv
  5425                           
  5426                           
  5427                           ;incstack = 0
  5428                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5429  1272  3000               	movlw	0
  5430  1273  009C               	movwf	(___lldiv@quotient+3)^(0+384)
  5431  1274  3000               	movlw	0
  5432  1275  009B               	movwf	(___lldiv@quotient+2)^(0+384)
  5433  1276  3000               	movlw	0
  5434  1277  009A               	movwf	(___lldiv@quotient+1)^(0+384)
  5435  1278  3000               	movlw	0
  5436  1279  0099               	movwf	___lldiv@quotient^(0+384)
  5437  127A  0813               	movf	(___lldiv@divisor+3)^(0+384),w
  5438  127B  0412               	iorwf	(___lldiv@divisor+2)^(0+384),w
  5439  127C  0411               	iorwf	(___lldiv@divisor+1)^(0+384),w
  5440  127D  0410               	iorwf	___lldiv@divisor^(0+384),w
  5441  127E  1903               	skipnz
  5442  127F  2AC7               	goto	l2675
  5443  1280  019D               	clrf	___lldiv@counter^(0+384)
  5444  1281  0A9D               	incf	___lldiv@counter^(0+384),f
  5445  1282                     l2661:
  5446  1282  1B93               	btfsc	(___lldiv@divisor+3)^(0+384),7
  5447  1283  2A92               	goto	l2663
  5448  1284  3001               	movlw	1
  5449  1285  0098               	movwf	??___lldiv^(0+384)
  5450  1286                     u2635:
  5451  1286  1003               	clrc
  5452  1287  0D90               	rlf	___lldiv@divisor^(0+384),f
  5453  1288  0D91               	rlf	(___lldiv@divisor+1)^(0+384),f
  5454  1289  0D92               	rlf	(___lldiv@divisor+2)^(0+384),f
  5455  128A  0D93               	rlf	(___lldiv@divisor+3)^(0+384),f
  5456  128B  0B98               	decfsz	??___lldiv^(0+384),f
  5457  128C  2A86               	goto	u2635
  5458  128D  3001               	movlw	1
  5459  128E  0098               	movwf	??___lldiv^(0+384)
  5460  128F  0818               	movf	??___lldiv^(0+384),w
  5461  1290  079D               	addwf	___lldiv@counter^(0+384),f
  5462  1291  2A82               	goto	l2661
  5463  1292                     l2663:
  5464  1292  3001               	movlw	1
  5465  1293  0098               	movwf	??___lldiv^(0+384)
  5466  1294                     u2655:
  5467  1294  1003               	clrc
  5468  1295  0D99               	rlf	___lldiv@quotient^(0+384),f
  5469  1296  0D9A               	rlf	(___lldiv@quotient+1)^(0+384),f
  5470  1297  0D9B               	rlf	(___lldiv@quotient+2)^(0+384),f
  5471  1298  0D9C               	rlf	(___lldiv@quotient+3)^(0+384),f
  5472  1299  0B98               	decfsz	??___lldiv^(0+384),f
  5473  129A  2A94               	goto	u2655
  5474  129B  0813               	movf	(___lldiv@divisor+3)^(0+384),w
  5475  129C  0217               	subwf	(___lldiv@dividend+3)^(0+384),w
  5476  129D  1D03               	skipz
  5477  129E  2AA9               	goto	u2665
  5478  129F  0812               	movf	(___lldiv@divisor+2)^(0+384),w
  5479  12A0  0216               	subwf	(___lldiv@dividend+2)^(0+384),w
  5480  12A1  1D03               	skipz
  5481  12A2  2AA9               	goto	u2665
  5482  12A3  0811               	movf	(___lldiv@divisor+1)^(0+384),w
  5483  12A4  0215               	subwf	(___lldiv@dividend+1)^(0+384),w
  5484  12A5  1D03               	skipz
  5485  12A6  2AA9               	goto	u2665
  5486  12A7  0810               	movf	___lldiv@divisor^(0+384),w
  5487  12A8  0214               	subwf	___lldiv@dividend^(0+384),w
  5488  12A9                     u2665:
  5489  12A9  1C03               	skipc
  5490  12AA  2ABA               	goto	l2671
  5491  12AB  0810               	movf	___lldiv@divisor^(0+384),w
  5492  12AC  0294               	subwf	___lldiv@dividend^(0+384),f
  5493  12AD  0811               	movf	(___lldiv@divisor+1)^(0+384),w
  5494  12AE  1C03               	skipc
  5495  12AF  0F11               	incfsz	(___lldiv@divisor+1)^(0+384),w
  5496  12B0  0295               	subwf	(___lldiv@dividend+1)^(0+384),f
  5497  12B1  0812               	movf	(___lldiv@divisor+2)^(0+384),w
  5498  12B2  1C03               	skipc
  5499  12B3  0F12               	incfsz	(___lldiv@divisor+2)^(0+384),w
  5500  12B4  0296               	subwf	(___lldiv@dividend+2)^(0+384),f
  5501  12B5  0813               	movf	(___lldiv@divisor+3)^(0+384),w
  5502  12B6  1C03               	skipc
  5503  12B7  0F13               	incfsz	(___lldiv@divisor+3)^(0+384),w
  5504  12B8  0297               	subwf	(___lldiv@dividend+3)^(0+384),f
  5505  12B9  1419               	bsf	___lldiv@quotient^(0+384),0
  5506  12BA                     l2671:
  5507  12BA  3001               	movlw	1
  5508  12BB                     u2675:
  5509  12BB  1003               	clrc
  5510  12BC  0C93               	rrf	(___lldiv@divisor+3)^(0+384),f
  5511  12BD  0C92               	rrf	(___lldiv@divisor+2)^(0+384),f
  5512  12BE  0C91               	rrf	(___lldiv@divisor+1)^(0+384),f
  5513  12BF  0C90               	rrf	___lldiv@divisor^(0+384),f
  5514  12C0  3EFF               	addlw	-1
  5515  12C1  1D03               	skipz
  5516  12C2  2ABB               	goto	u2675
  5517  12C3  3001               	movlw	1
  5518  12C4  029D               	subwf	___lldiv@counter^(0+384),f
  5519  12C5  1D03               	btfss	3,2
  5520  12C6  2A92               	goto	l2663
  5521  12C7                     l2675:
  5522  12C7  081C               	movf	(___lldiv@quotient+3)^(0+384),w
  5523  12C8  0093               	movwf	(?___lldiv+3)^(0+384)
  5524  12C9  081B               	movf	(___lldiv@quotient+2)^(0+384),w
  5525  12CA  0092               	movwf	(?___lldiv+2)^(0+384)
  5526  12CB  081A               	movf	(___lldiv@quotient+1)^(0+384),w
  5527  12CC  0091               	movwf	(?___lldiv+1)^(0+384)
  5528  12CD  0819               	movf	___lldiv@quotient^(0+384),w
  5529  12CE  0090               	movwf	?___lldiv^(0+384)
  5530  12CF  0008               	return
  5531  12D0                     __end_of___lldiv:
  5532                           
  5533                           	psect	text21
  5534  1F8E                     __ptext21:	
  5535 ;; *************** function ___bmul *****************
  5536 ;; Defined at:
  5537 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul8.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  multiplier      1    wreg     unsigned char 
  5540 ;;  multiplicand    1   54[BANK3 ] unsigned char 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  multiplier      1   57[BANK3 ] unsigned char 
  5543 ;;  product         1   56[BANK3 ] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      unsigned char 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2, status,0
  5548 ;; Tracked objects:
  5549 ;;		On entry : 300/300
  5550 ;;		On exit  : 300/300
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5553 ;;      Params:         0       0       0       1       0
  5554 ;;      Locals:         0       0       0       2       0
  5555 ;;      Temps:          0       0       0       1       0
  5556 ;;      Totals:         0       0       0       4       0
  5557 ;;Total ram usage:        4 bytes
  5558 ;; Hardware stack levels used: 1
  5559 ;; Hardware stack levels required when called: 5
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_bcd_dec
  5564 ;;		_LUX_read
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568  1F8E                     ___bmul:	
  5569                           ;psect for function ___bmul
  5570                           
  5571                           
  5572                           ;incstack = 0
  5573                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5574                           ;___bmul@multiplier stored from wreg
  5575  1F8E  00C9               	movwf	___bmul@multiplier^(0+384)
  5576  1F8F  01C8               	clrf	___bmul@product^(0+384)
  5577  1F90                     l2643:
  5578  1F90  1C49               	btfss	___bmul@multiplier^(0+384),0
  5579  1F91  2F96               	goto	l2647
  5580  1F92  0846               	movf	___bmul@multiplicand^(0+384),w
  5581  1F93  00C7               	movwf	??___bmul^(0+384)
  5582  1F94  0847               	movf	??___bmul^(0+384),w
  5583  1F95  07C8               	addwf	___bmul@product^(0+384),f
  5584  1F96                     l2647:
  5585  1F96  1003               	clrc
  5586  1F97  0DC6               	rlf	___bmul@multiplicand^(0+384),f
  5587  1F98  1003               	clrc
  5588  1F99  0CC9               	rrf	___bmul@multiplier^(0+384),f
  5589  1F9A  0849               	movf	___bmul@multiplier^(0+384),w
  5590  1F9B  1D03               	btfss	3,2
  5591  1F9C  2F90               	goto	l2643
  5592  1F9D  0848               	movf	___bmul@product^(0+384),w
  5593  1F9E  0008               	return
  5594  1F9F                     __end_of___bmul:
  5595                           
  5596                           	psect	text22
  5597  1F78                     __ptext22:	
  5598 ;; *************** function _USART_send *****************
  5599 ;; Defined at:
  5600 ;;		line 27 in file "USART.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  data            1    wreg     const unsigned char 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  data            1    0[BANK3 ] const unsigned char 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg
  5609 ;; Tracked objects:
  5610 ;;		On entry : 300/300
  5611 ;;		On exit  : 300/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5614 ;;      Params:         0       0       0       0       0
  5615 ;;      Locals:         0       0       0       1       0
  5616 ;;      Temps:          0       0       0       0       0
  5617 ;;      Totals:         0       0       0       1       0
  5618 ;;Total ram usage:        1 bytes
  5619 ;; Hardware stack levels used: 1
  5620 ;; Hardware stack levels required when called: 5
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_motor_dc
  5625 ;;		_servo
  5626 ;;		_RTC_read
  5627 ;;		_LUX_read
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631  1F78                     _USART_send:	
  5632                           ;psect for function _USART_send
  5633                           
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in _USART_send: [wreg]
  5637                           ;USART_send@data stored from wreg
  5638  1F78  0090               	movwf	USART_send@data^(0+384)
  5639  1F79                     l233:	
  5640                           ;USART.c: 27: void USART_send(const char data);USART.c: 28: {;USART.c: 29:     while(!TX
      +                          STAbits.TRMT);
  5641                           
  5642  1F79  1303               	bcf	3,6	;RP1=0, select bank1
  5643  1F7A  1C98               	btfss	24,1	;volatile
  5644  1F7B  2F79               	goto	l233
  5645                           
  5646                           ;USART.c: 30:     TXREG = data;
  5647  1F7C  1703               	bsf	3,6	;RP1=1, select bank3
  5648  1F7D  0810               	movf	USART_send@data^(0+384),w
  5649  1F7E  1283               	bcf	3,5	;RP0=0, select bank0
  5650  1F7F  1303               	bcf	3,6	;RP1=0, select bank0
  5651  1F80  0099               	movwf	25	;volatile
  5652  1F81  0008               	return
  5653  1F82                     __end_of_USART_send:
  5654                           
  5655                           	psect	text23
  5656  1F3D                     __ptext23:	
  5657 ;; *************** function _I2C_Master_RepeatedStart *****************
  5658 ;; Defined at:
  5659 ;;		line 35 in file "I2C.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;		None
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;		None
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, status,2, status,0, pclath, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : 300/0
  5670 ;;		On exit  : 300/100
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5673 ;;      Params:         0       0       0       0       0
  5674 ;;      Locals:         0       0       0       0       0
  5675 ;;      Temps:          0       0       0       0       0
  5676 ;;      Totals:         0       0       0       0       0
  5677 ;;Total ram usage:        0 bytes
  5678 ;; Hardware stack levels used: 1
  5679 ;; Hardware stack levels required when called: 6
  5680 ;; This function calls:
  5681 ;;		_I2C_Master_Wait
  5682 ;; This function is called by:
  5683 ;;		_RTC_read
  5684 ;;		_LUX_read
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688  1F3D                     _I2C_Master_RepeatedStart:	
  5689                           ;psect for function _I2C_Master_RepeatedStart
  5690                           
  5691                           
  5692                           ;I2C.c: 37:     I2C_Master_Wait();
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5696  1F3D  160A  158A  275D   	fcall	_I2C_Master_Wait
  5697                           
  5698                           ;I2C.c: 38:     SSPCON2bits.RSEN = 1;
  5699  1F40  1491               	bsf	17,1	;volatile
  5700  1F41  0008               	return
  5701  1F42                     __end_of_I2C_Master_RepeatedStart:
  5702                           
  5703                           	psect	text24
  5704  1094                     __ptext24:	
  5705 ;; *************** function _I2C_Master_Read *****************
  5706 ;; Defined at:
  5707 ;;		line 53 in file "I2C.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  a               2    0[BANK3 ] unsigned short 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  temp            2    4[BANK3 ] unsigned short 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  2    0[BANK3 ] unsigned short 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 300/300
  5718 ;;		On exit  : 300/300
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5721 ;;      Params:         0       0       0       2       0
  5722 ;;      Locals:         0       0       0       2       0
  5723 ;;      Temps:          0       0       0       2       0
  5724 ;;      Totals:         0       0       0       6       0
  5725 ;;Total ram usage:        6 bytes
  5726 ;; Hardware stack levels used: 1
  5727 ;; Hardware stack levels required when called: 6
  5728 ;; This function calls:
  5729 ;;		_I2C_Master_Wait
  5730 ;; This function is called by:
  5731 ;;		_RTC_read
  5732 ;;		_LUX_read
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736  1094                     _I2C_Master_Read:	
  5737                           ;psect for function _I2C_Master_Read
  5738                           
  5739                           
  5740                           ;I2C.c: 53: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 54: {;I2C.c: 55:    
      +                           unsigned short temp;;I2C.c: 56:     I2C_Master_Wait();
  5741                           
  5742                           ;incstack = 0
  5743                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  5744  1094  160A  158A  275D  160A  118A  	fcall	_I2C_Master_Wait
  5745                           
  5746                           ;I2C.c: 57:     SSPCON2bits.RCEN = 1;
  5747  1099  1591               	bsf	17,3	;volatile
  5748                           
  5749                           ;I2C.c: 58:     I2C_Master_Wait();
  5750  109A  160A  158A  275D  160A  118A  	fcall	_I2C_Master_Wait
  5751                           
  5752                           ;I2C.c: 59:     temp = SSPBUF;
  5753  109F  1283               	bcf	3,5	;RP0=0, select bank0
  5754  10A0  0813               	movf	19,w	;volatile
  5755  10A1  1683               	bsf	3,5	;RP0=1, select bank3
  5756  10A2  1703               	bsf	3,6	;RP1=1, select bank3
  5757  10A3  0092               	movwf	??_I2C_Master_Read^(0+384)
  5758  10A4  0193               	clrf	(??_I2C_Master_Read^(0+384)+1)
  5759  10A5  0812               	movf	??_I2C_Master_Read^(0+384),w
  5760  10A6  0094               	movwf	I2C_Master_Read@temp^(0+384)
  5761  10A7  0813               	movf	(??_I2C_Master_Read+1)^(0+384),w
  5762  10A8  0095               	movwf	(I2C_Master_Read@temp+1)^(0+384)
  5763                           
  5764                           ;I2C.c: 60:     I2C_Master_Wait();
  5765  10A9  160A  158A  275D  160A  118A  	fcall	_I2C_Master_Wait
  5766                           
  5767                           ;I2C.c: 61:     if(a == 1){
  5768  10AE  1703               	bsf	3,6	;RP1=1, select bank3
  5769  10AF  0310               	decf	I2C_Master_Read@a^(0+384),w
  5770  10B0  0411               	iorwf	(I2C_Master_Read@a+1)^(0+384),w
  5771  10B1  1D03               	btfss	3,2
  5772  10B2  28B6               	goto	l373
  5773                           
  5774                           ;I2C.c: 62:         SSPCON2bits.ACKDT = 0;
  5775  10B3  1303               	bcf	3,6	;RP1=0, select bank1
  5776  10B4  1291               	bcf	17,5	;volatile
  5777                           
  5778                           ;I2C.c: 63:     }else{
  5779  10B5  28B8               	goto	l374
  5780  10B6                     l373:
  5781                           
  5782                           ;I2C.c: 64:         SSPCON2bits.ACKDT = 1;
  5783  10B6  1303               	bcf	3,6	;RP1=0, select bank1
  5784  10B7  1691               	bsf	17,5	;volatile
  5785  10B8                     l374:	
  5786                           ;I2C.c: 65:     }
  5787                           
  5788                           
  5789                           ;I2C.c: 66:     SSPCON2bits.ACKEN = 1;
  5790  10B8  1611               	bsf	17,4	;volatile
  5791                           
  5792                           ;I2C.c: 67:     return temp;
  5793  10B9  1703               	bsf	3,6	;RP1=1, select bank3
  5794  10BA  0815               	movf	(I2C_Master_Read@temp+1)^(0+384),w
  5795  10BB  0091               	movwf	(?_I2C_Master_Read+1)^(0+384)
  5796  10BC  0814               	movf	I2C_Master_Read@temp^(0+384),w
  5797  10BD  0090               	movwf	?_I2C_Master_Read^(0+384)
  5798  10BE  0008               	return
  5799  10BF                     __end_of_I2C_Master_Read:
  5800                           
  5801                           	psect	text25
  5802  12D0                     __ptext25:	
  5803 ;; *************** function _LUX_config *****************
  5804 ;; Defined at:
  5805 ;;		line 223 in file "main_slave_p1.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;		None
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0, pclath, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 300/100
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5819 ;;      Params:         0       0       0       0       0
  5820 ;;      Locals:         0       0       0       0       0
  5821 ;;      Temps:          0       0       0       2       0
  5822 ;;      Totals:         0       0       0       2       0
  5823 ;;Total ram usage:        2 bytes
  5824 ;; Hardware stack levels used: 1
  5825 ;; Hardware stack levels required when called: 7
  5826 ;; This function calls:
  5827 ;;		_I2C_Master_Start
  5828 ;;		_I2C_Master_Stop
  5829 ;;		_I2C_Master_Write
  5830 ;; This function is called by:
  5831 ;;		_main
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835  12D0                     _LUX_config:	
  5836                           ;psect for function _LUX_config
  5837                           
  5838                           
  5839                           ;main_slave_p1.c: 225:     I2C_Master_Start();
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _LUX_config: [wreg+status,2+status,0+pclath+cstack]
  5843  12D0  160A  158A  2733  160A  118A  	fcall	_I2C_Master_Start
  5844                           
  5845                           ;main_slave_p1.c: 226:     I2C_Master_Write(0x72);
  5846  12D5  3072               	movlw	114
  5847  12D6  1703               	bsf	3,6	;RP1=1, select bank3
  5848  12D7  0090               	movwf	I2C_Master_Write@d^(0+384)
  5849  12D8  3000               	movlw	0
  5850  12D9  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  5851  12DA  160A  158A  2766  160A  118A  	fcall	_I2C_Master_Write
  5852                           
  5853                           ;main_slave_p1.c: 227:     I2C_Master_Write(0x80);
  5854  12DF  3080               	movlw	128
  5855  12E0  1683               	bsf	3,5	;RP0=1, select bank3
  5856  12E1  1703               	bsf	3,6	;RP1=1, select bank3
  5857  12E2  0090               	movwf	I2C_Master_Write@d^(0+384)
  5858  12E3  3000               	movlw	0
  5859  12E4  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  5860  12E5  160A  158A  2766  160A  118A  	fcall	_I2C_Master_Write
  5861                           
  5862                           ;main_slave_p1.c: 228:     I2C_Master_Write(0x03);
  5863  12EA  3003               	movlw	3
  5864  12EB  1683               	bsf	3,5	;RP0=1, select bank3
  5865  12EC  1703               	bsf	3,6	;RP1=1, select bank3
  5866  12ED  0090               	movwf	I2C_Master_Write@d^(0+384)
  5867  12EE  3000               	movlw	0
  5868  12EF  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  5869  12F0  160A  158A  2766  160A  118A  	fcall	_I2C_Master_Write
  5870                           
  5871                           ;main_slave_p1.c: 229:     I2C_Master_Stop();
  5872  12F5  160A  158A  2738  160A  118A  	fcall	_I2C_Master_Stop
  5873                           
  5874                           ;main_slave_p1.c: 231:     I2C_Master_Start();
  5875  12FA  160A  158A  2733  160A  118A  	fcall	_I2C_Master_Start
  5876                           
  5877                           ;main_slave_p1.c: 232:     I2C_Master_Write(0x72);
  5878  12FF  3072               	movlw	114
  5879  1300  1703               	bsf	3,6	;RP1=1, select bank3
  5880  1301  0090               	movwf	I2C_Master_Write@d^(0+384)
  5881  1302  3000               	movlw	0
  5882  1303  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  5883  1304  160A  158A  2766  160A  118A  	fcall	_I2C_Master_Write
  5884                           
  5885                           ;main_slave_p1.c: 233:     I2C_Master_Write(0x81);
  5886  1309  3081               	movlw	129
  5887  130A  1683               	bsf	3,5	;RP0=1, select bank3
  5888  130B  1703               	bsf	3,6	;RP1=1, select bank3
  5889  130C  0090               	movwf	I2C_Master_Write@d^(0+384)
  5890  130D  3000               	movlw	0
  5891  130E  0091               	movwf	(I2C_Master_Write@d^(0+384)+1)
  5892  130F  160A  158A  2766  160A  118A  	fcall	_I2C_Master_Write
  5893                           
  5894                           ;main_slave_p1.c: 234:     I2C_Master_Write(0x00);
  5895  1314  3000               	movlw	0
  5896  1315  1683               	bsf	3,5	;RP0=1, select bank3
  5897  1316  1703               	bsf	3,6	;RP1=1, select bank3
  5898  1317  0090               	movwf	I2C_Master_Write@d^(0+384)
  5899  1318  0091               	movwf	(I2C_Master_Write@d+1)^(0+384)
  5900  1319  160A  158A  2766  160A  118A  	fcall	_I2C_Master_Write
  5901                           
  5902                           ;main_slave_p1.c: 235:     I2C_Master_Stop();
  5903  131E  160A  158A  2738  160A  118A  	fcall	_I2C_Master_Stop
  5904                           
  5905                           ;main_slave_p1.c: 237:     _delay((unsigned long)((14)*(1000000/4000.0)));
  5906  1323  3005               	movlw	5
  5907  1324  1683               	bsf	3,5	;RP0=1, select bank3
  5908  1325  1703               	bsf	3,6	;RP1=1, select bank3
  5909  1326  0093               	movwf	(??_LUX_config^(0+384)+1)
  5910  1327  3089               	movlw	137
  5911  1328  0092               	movwf	??_LUX_config^(0+384)
  5912  1329                     u5067:
  5913  1329  0B92               	decfsz	??_LUX_config^(0+384),f
  5914  132A  2B29               	goto	u5067
  5915  132B  0B93               	decfsz	(??_LUX_config^(0+384)+1),f
  5916  132C  2B29               	goto	u5067
  5917  132D  2B2E               	nop2
  5918  132E  0008               	return
  5919  132F                     __end_of_LUX_config:
  5920                           
  5921                           	psect	text26
  5922  1F66                     __ptext26:	
  5923 ;; *************** function _I2C_Master_Write *****************
  5924 ;; Defined at:
  5925 ;;		line 47 in file "I2C.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  d               2    0[BANK3 ] unsigned int 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0, pclath, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 300/300
  5936 ;;		On exit  : 300/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5939 ;;      Params:         0       0       0       2       0
  5940 ;;      Locals:         0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0
  5942 ;;      Totals:         0       0       0       2       0
  5943 ;;Total ram usage:        2 bytes
  5944 ;; Hardware stack levels used: 1
  5945 ;; Hardware stack levels required when called: 6
  5946 ;; This function calls:
  5947 ;;		_I2C_Master_Wait
  5948 ;; This function is called by:
  5949 ;;		_RTC_read
  5950 ;;		_LUX_config
  5951 ;;		_LUX_read
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955  1F66                     _I2C_Master_Write:	
  5956                           ;psect for function _I2C_Master_Write
  5957                           
  5958                           
  5959                           ;I2C.c: 47: void I2C_Master_Write(unsigned d);I2C.c: 48: {;I2C.c: 49:     I2C_Master_Wai
      +                          t();
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5963  1F66  160A  158A  275D   	fcall	_I2C_Master_Wait
  5964                           
  5965                           ;I2C.c: 50:     SSPBUF = d;
  5966  1F69  1703               	bsf	3,6	;RP1=1, select bank3
  5967  1F6A  0810               	movf	I2C_Master_Write@d^(0+384),w
  5968  1F6B  1283               	bcf	3,5	;RP0=0, select bank0
  5969  1F6C  1303               	bcf	3,6	;RP1=0, select bank0
  5970  1F6D  0093               	movwf	19	;volatile
  5971  1F6E  0008               	return
  5972  1F6F                     __end_of_I2C_Master_Write:
  5973                           
  5974                           	psect	text27
  5975  1F38                     __ptext27:	
  5976 ;; *************** function _I2C_Master_Stop *****************
  5977 ;; Defined at:
  5978 ;;		line 41 in file "I2C.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, pclath, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/300
  5989 ;;		On exit  : 300/100
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5992 ;;      Params:         0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0
  5995 ;;      Totals:         0       0       0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used: 1
  5998 ;; Hardware stack levels required when called: 6
  5999 ;; This function calls:
  6000 ;;		_I2C_Master_Wait
  6001 ;; This function is called by:
  6002 ;;		_RTC_read
  6003 ;;		_LUX_config
  6004 ;;		_LUX_read
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008  1F38                     _I2C_Master_Stop:	
  6009                           ;psect for function _I2C_Master_Stop
  6010                           
  6011                           
  6012                           ;I2C.c: 43:     I2C_Master_Wait();
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6016  1F38  160A  158A  275D   	fcall	_I2C_Master_Wait
  6017                           
  6018                           ;I2C.c: 44:     SSPCON2bits.PEN = 1;
  6019  1F3B  1511               	bsf	17,2	;volatile
  6020  1F3C  0008               	return
  6021  1F3D                     __end_of_I2C_Master_Stop:
  6022                           
  6023                           	psect	text28
  6024  1F33                     __ptext28:	
  6025 ;; *************** function _I2C_Master_Start *****************
  6026 ;; Defined at:
  6027 ;;		line 29 in file "I2C.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;		None
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;		None
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  1    wreg      void 
  6034 ;; Registers used:
  6035 ;;		wreg, status,2, status,0, pclath, cstack
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 300/100
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6041 ;;      Params:         0       0       0       0       0
  6042 ;;      Locals:         0       0       0       0       0
  6043 ;;      Temps:          0       0       0       0       0
  6044 ;;      Totals:         0       0       0       0       0
  6045 ;;Total ram usage:        0 bytes
  6046 ;; Hardware stack levels used: 1
  6047 ;; Hardware stack levels required when called: 6
  6048 ;; This function calls:
  6049 ;;		_I2C_Master_Wait
  6050 ;; This function is called by:
  6051 ;;		_RTC_read
  6052 ;;		_LUX_config
  6053 ;;		_LUX_read
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057  1F33                     _I2C_Master_Start:	
  6058                           ;psect for function _I2C_Master_Start
  6059                           
  6060                           
  6061                           ;I2C.c: 31:     I2C_Master_Wait();
  6062                           
  6063                           ;incstack = 0
  6064                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6065  1F33  160A  158A  275D   	fcall	_I2C_Master_Wait
  6066                           
  6067                           ;I2C.c: 32:     SSPCON2bits.SEN = 1;
  6068  1F36  1411               	bsf	17,0	;volatile
  6069  1F37  0008               	return
  6070  1F38                     __end_of_I2C_Master_Start:
  6071                           
  6072                           	psect	text29
  6073  1F5D                     __ptext29:	
  6074 ;; *************** function _I2C_Master_Wait *****************
  6075 ;; Defined at:
  6076 ;;		line 24 in file "I2C.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 300/100
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6090 ;;      Params:         0       0       0       0       0
  6091 ;;      Locals:         0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0
  6093 ;;      Totals:         0       0       0       0       0
  6094 ;;Total ram usage:        0 bytes
  6095 ;; Hardware stack levels used: 1
  6096 ;; Hardware stack levels required when called: 5
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_I2C_Master_Start
  6101 ;;		_I2C_Master_RepeatedStart
  6102 ;;		_I2C_Master_Stop
  6103 ;;		_I2C_Master_Write
  6104 ;;		_I2C_Master_Read
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108  1F5D                     _I2C_Master_Wait:	
  6109                           ;psect for function _I2C_Master_Wait
  6110                           
  6111  1F5D                     l355:	
  6112                           ;I2C.c: 26:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6116                           
  6117  1F5D  1683               	bsf	3,5	;RP0=1, select bank1
  6118  1F5E  1303               	bcf	3,6	;RP1=0, select bank1
  6119  1F5F  1914               	btfsc	20,2	;volatile
  6120  1F60  2F5D               	goto	l355
  6121  1F61  0811               	movf	17,w	;volatile
  6122  1F62  391F               	andlw	31
  6123  1F63  1903               	btfsc	3,2
  6124  1F64  0008               	return
  6125  1F65  2F5D               	goto	l355
  6126  1F66                     __end_of_I2C_Master_Wait:
  6127                           
  6128                           	psect	text30
  6129  0347                     __ptext30:	
  6130 ;; *************** function _slave *****************
  6131 ;; Defined at:
  6132 ;;		line 78 in file "main_slave_p1.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  1    wreg      void 
  6139 ;; Registers used:
  6140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 300/100
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6146 ;;      Params:         0       0       0       0       0
  6147 ;;      Locals:         0       0      16       0       0
  6148 ;;      Temps:          0       0       8       0       0
  6149 ;;      Totals:         0       0      24       0       0
  6150 ;;Total ram usage:       24 bytes
  6151 ;; Hardware stack levels used: 1
  6152 ;; Hardware stack levels required when called: 4
  6153 ;; This function calls:
  6154 ;;		___fladd
  6155 ;;		___fldiv
  6156 ;;		___flmul
  6157 ;;		___flsub
  6158 ;;		___lwdiv
  6159 ;;		___xxtofl
  6160 ;;		_adc_read
  6161 ;;		_log
  6162 ;;		_map
  6163 ;;		i1___fltol
  6164 ;;		i1_tmr0_reload
  6165 ;; This function is called by:
  6166 ;;		Interrupt level 1
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170  0347                     _slave:	
  6171                           ;psect for function _slave
  6172                           
  6173                           
  6174                           ;main_slave_p1.c: 79:     if(INTCONbits.T0IF){
  6175  0347  1D0B               	btfss	11,2	;volatile
  6176  0348  2B58               	goto	i1l3893
  6177                           
  6178                           ;main_slave_p1.c: 80:         pulso = !PORTDbits.RD1;
  6179  0349  1003               	clrc
  6180  034A  1283               	bcf	3,5	;RP0=0, select bank0
  6181  034B  1C88               	btfss	8,1	;volatile
  6182  034C  1403               	setc
  6183  034D  3000               	movlw	0
  6184  034E  1803               	btfsc	3,0
  6185  034F  3001               	movlw	1
  6186  0350  1683               	bsf	3,5	;RP0=1, select bank3
  6187  0351  1703               	bsf	3,6	;RP1=1, select bank3
  6188  0352  00EC               	movwf	_pulso^(0+384)
  6189                           
  6190                           ;main_slave_p1.c: 81:         tmr0_reload();
  6191  0353  160A  158A  2747  120A  118A  	fcall	i1_tmr0_reload
  6192  0358                     i1l3893:
  6193                           
  6194                           ;main_slave_p1.c: 84:     if(INTCONbits.RBIF){
  6195  0358  1C0B               	btfss	11,0	;volatile
  6196  0359  2B87               	goto	i1l3917
  6197                           
  6198                           ;main_slave_p1.c: 85:         if(!PORTBbits.RB1){
  6199  035A  1283               	bcf	3,5	;RP0=0, select bank0
  6200  035B  1886               	btfsc	6,1	;volatile
  6201  035C  2B64               	goto	i1l143
  6202                           
  6203                           ;main_slave_p1.c: 86:             switch_servo = 1;
  6204  035D  3001               	movlw	1
  6205  035E  1683               	bsf	3,5	;RP0=1, select bank3
  6206  035F  1703               	bsf	3,6	;RP1=1, select bank3
  6207  0360  00DC               	movwf	_switch_servo^(0+384)
  6208  0361  3000               	movlw	0
  6209  0362  00DD               	movwf	(_switch_servo^(0+384)+1)
  6210                           
  6211                           ;main_slave_p1.c: 87:         }
  6212  0363  2B6A               	goto	i1l3901
  6213  0364                     i1l143:	
  6214                           ;main_slave_p1.c: 88:         else if(PORTBbits.RB1){
  6215                           
  6216  0364  1C86               	btfss	6,1	;volatile
  6217  0365  2B6A               	goto	i1l3901
  6218                           
  6219                           ;main_slave_p1.c: 89:             switch_servo = 0;
  6220  0366  1683               	bsf	3,5	;RP0=1, select bank3
  6221  0367  1703               	bsf	3,6	;RP1=1, select bank3
  6222  0368  01DC               	clrf	_switch_servo^(0+384)
  6223  0369  01DD               	clrf	(_switch_servo+1)^(0+384)
  6224  036A                     i1l3901:
  6225                           
  6226                           ;main_slave_p1.c: 92:         if(!PORTBbits.RB2){
  6227  036A  1283               	bcf	3,5	;RP0=0, select bank0
  6228  036B  1303               	bcf	3,6	;RP1=0, select bank0
  6229  036C  1906               	btfsc	6,2	;volatile
  6230  036D  2B75               	goto	i1l146
  6231                           
  6232                           ;main_slave_p1.c: 93:             dir = 1;
  6233  036E  1683               	bsf	3,5	;RP0=1, select bank3
  6234  036F  1703               	bsf	3,6	;RP1=1, select bank3
  6235  0370  01EB               	clrf	_dir^(0+384)
  6236  0371  0AEB               	incf	_dir^(0+384),f
  6237                           
  6238                           ;main_slave_p1.c: 94:             PORTDbits.RD2 = 1;
  6239  0372  1283               	bcf	3,5	;RP0=0, select bank0
  6240  0373  1303               	bcf	3,6	;RP1=0, select bank0
  6241  0374  1508               	bsf	8,2	;volatile
  6242  0375                     i1l146:	
  6243                           ;main_slave_p1.c: 96:         }
  6244                           
  6245                           
  6246                           ;main_slave_p1.c: 98:         if(!PORTBbits.RB7){
  6247  0375  1B86               	btfsc	6,7	;volatile
  6248  0376  2B7D               	goto	i1l3909
  6249                           
  6250                           ;main_slave_p1.c: 99:             dir = 0;
  6251  0377  1683               	bsf	3,5	;RP0=1, select bank3
  6252  0378  1703               	bsf	3,6	;RP1=1, select bank3
  6253  0379  01EB               	clrf	_dir^(0+384)
  6254                           
  6255                           ;main_slave_p1.c: 100:             PORTDbits.RD2 = 0;
  6256  037A  1283               	bcf	3,5	;RP0=0, select bank0
  6257  037B  1303               	bcf	3,6	;RP1=0, select bank0
  6258  037C  1108               	bcf	8,2	;volatile
  6259  037D                     i1l3909:
  6260                           
  6261                           ;main_slave_p1.c: 102:         if(PORTBbits.RB2 && PORTBbits.RB7){
  6262  037D  1906               	btfsc	6,2	;volatile
  6263  037E  1F86               	btfss	6,7	;volatile
  6264  037F  2B86               	goto	i1l3915
  6265                           
  6266                           ;main_slave_p1.c: 103:             dir = 5;
  6267  0380  3005               	movlw	5
  6268  0381  1683               	bsf	3,5	;RP0=1, select bank1
  6269  0382  00C0               	movwf	??_slave^(0+128)
  6270  0383  0840               	movf	??_slave^(0+128),w
  6271  0384  1703               	bsf	3,6	;RP1=1, select bank3
  6272  0385  00EB               	movwf	_dir^(0+384)
  6273  0386                     i1l3915:
  6274                           
  6275                           ;main_slave_p1.c: 105:         INTCONbits.RBIF = 0;
  6276  0386  100B               	bcf	11,0	;volatile
  6277  0387                     i1l3917:
  6278                           
  6279                           ;main_slave_p1.c: 108:     if(PIR1bits.ADIF){
  6280  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6281  0388  1303               	bcf	3,6	;RP1=0, select bank0
  6282  0389  1F0C               	btfss	12,6	;volatile
  6283  038A  2DAB               	goto	i1l151
  6284                           
  6285                           ;main_slave_p1.c: 109:         if(ADCON0bits.CHS == 0){
  6286  038B  0C1F               	rrf	31,w	;volatile
  6287  038C  1683               	bsf	3,5	;RP0=1, select bank1
  6288  038D  00C0               	movwf	??_slave^(0+128)
  6289  038E  0C40               	rrf	??_slave^(0+128),w
  6290  038F  390F               	andlw	15
  6291  0390  3A00               	xorlw	0
  6292  0391  1D03               	skipz
  6293  0392  2DA8               	goto	i1l3935
  6294                           
  6295                           ;main_slave_p1.c: 110:             TEMP_POT = map(adc_read(), 0, 650, -55, 125);
  6296  0393  160A  158A  274D  120A  118A  	fcall	_adc_read
  6297  0398  0871               	movf	?_adc_read+1,w
  6298  0399  00B7               	movwf	(map@x+1)^(0+128)
  6299  039A  0870               	movf	?_adc_read,w
  6300  039B  00B6               	movwf	map@x^(0+128)
  6301  039C  3000               	movlw	0
  6302  039D  00B8               	movwf	map@x0^(0+128)
  6303  039E  00B9               	movwf	(map@x0+1)^(0+128)
  6304  039F  308A               	movlw	138
  6305  03A0  00BA               	movwf	map@x1^(0+128)
  6306  03A1  3002               	movlw	2
  6307  03A2  00BB               	movwf	(map@x1^(0+128)+1)
  6308  03A3  30C9               	movlw	201
  6309  03A4  00BC               	movwf	map@y0^(0+128)
  6310  03A5  30FF               	movlw	255
  6311  03A6  00BD               	movwf	(map@y0^(0+128)+1)
  6312  03A7  307D               	movlw	125
  6313  03A8  00BE               	movwf	map@y1^(0+128)
  6314  03A9  3000               	movlw	0
  6315  03AA  00BF               	movwf	(map@y1^(0+128)+1)
  6316  03AB  160A  118A  26C0  120A  118A  	fcall	_map
  6317  03B0  0837               	movf	(?_map+1)^(0+128),w
  6318  03B1  00E3               	movwf	(_TEMP_POT+1)^(0+128)
  6319  03B2  0836               	movf	?_map^(0+128),w
  6320  03B3  00E2               	movwf	_TEMP_POT^(0+128)
  6321                           
  6322                           ;main_slave_p1.c: 113:             R2 = R1 * ((float)(1023/TEMP_POT)-1);
  6323  03B4  086B               	movf	(_R1+3)^(0+128),w
  6324  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  6325  03B6  00C1               	movwf	___flmul@b+3
  6326  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  6327  03B8  086A               	movf	(_R1+2)^(0+128),w
  6328  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  6329  03BA  00C0               	movwf	___flmul@b+2
  6330  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  6331  03BC  0869               	movf	(_R1+1)^(0+128),w
  6332  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  6333  03BE  00BF               	movwf	___flmul@b+1
  6334  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  6335  03C0  0868               	movf	_R1^(0+128),w
  6336  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6337  03C2  00BE               	movwf	___flmul@b
  6338  03C3  30BF               	movlw	191
  6339  03C4  00AD               	movwf	___fladd@b+3
  6340  03C5  3080               	movlw	128
  6341  03C6  00AC               	movwf	___fladd@b+2
  6342  03C7  3000               	movlw	0
  6343  03C8  00AB               	movwf	___fladd@b+1
  6344  03C9  3000               	movlw	0
  6345  03CA  00AA               	movwf	___fladd@b
  6346  03CB  30FF               	movlw	255
  6347  03CC  00F2               	movwf	___lwdiv@dividend
  6348  03CD  3003               	movlw	3
  6349  03CE  00F3               	movwf	___lwdiv@dividend+1
  6350  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  6351  03D0  0863               	movf	(_TEMP_POT+1)^(0+128),w
  6352  03D1  00F1               	movwf	___lwdiv@divisor+1
  6353  03D2  0862               	movf	_TEMP_POT^(0+128),w
  6354  03D3  00F0               	movwf	___lwdiv@divisor
  6355  03D4  160A  118A  215B  120A  118A  	fcall	___lwdiv
  6356  03D9  0870               	movf	?___lwdiv,w
  6357  03DA  00C0               	movwf	??_slave^(0+128)
  6358  03DB  0871               	movf	?___lwdiv+1,w
  6359  03DC  00C1               	movwf	(??_slave^(0+128)+1)
  6360  03DD  01C2               	clrf	(??_slave^(0+128)+2)
  6361  03DE  01C3               	clrf	(??_slave^(0+128)+3)
  6362  03DF  0843               	movf	(??_slave+3)^(0+128),w
  6363  03E0  00FC               	movwf	___xxtofl@val+3
  6364  03E1  0842               	movf	(??_slave+2)^(0+128),w
  6365  03E2  00FB               	movwf	___xxtofl@val+2
  6366  03E3  0841               	movf	(??_slave+1)^(0+128),w
  6367  03E4  00FA               	movwf	___xxtofl@val+1
  6368  03E5  0840               	movf	??_slave^(0+128),w
  6369  03E6  00F9               	movwf	___xxtofl@val
  6370  03E7  3000               	movlw	0
  6371  03E8  160A  118A  275C  120A  118A  	fcall	___xxtofl
  6372  03ED  087C               	movf	?___xxtofl+3,w
  6373  03EE  00B1               	movwf	___fladd@a+3
  6374  03EF  087B               	movf	?___xxtofl+2,w
  6375  03F0  00B0               	movwf	___fladd@a+2
  6376  03F1  087A               	movf	?___xxtofl+1,w
  6377  03F2  00AF               	movwf	___fladd@a+1
  6378  03F3  0879               	movf	?___xxtofl,w
  6379  03F4  00AE               	movwf	___fladd@a
  6380  03F5  120A  118A  25B7  120A  118A  	fcall	___fladd
  6381  03FA  082D               	movf	?___fladd+3,w
  6382  03FB  00C5               	movwf	___flmul@a+3
  6383  03FC  082C               	movf	?___fladd+2,w
  6384  03FD  00C4               	movwf	___flmul@a+2
  6385  03FE  082B               	movf	?___fladd+1,w
  6386  03FF  00C3               	movwf	___flmul@a+1
  6387  0400  082A               	movf	?___fladd,w
  6388  0401  00C2               	movwf	___flmul@a
  6389  0402  120A  118A  2052  120A  118A  	fcall	___flmul
  6390  0407  0841               	movf	?___flmul+3,w
  6391  0408  1683               	bsf	3,5	;RP0=1, select bank1
  6392  0409  00DB               	movwf	(_R2+3)^(0+128)
  6393  040A  1283               	bcf	3,5	;RP0=0, select bank0
  6394  040B  0840               	movf	?___flmul+2,w
  6395  040C  1683               	bsf	3,5	;RP0=1, select bank1
  6396  040D  00DA               	movwf	(_R2+2)^(0+128)
  6397  040E  1283               	bcf	3,5	;RP0=0, select bank0
  6398  040F  083F               	movf	?___flmul+1,w
  6399  0410  1683               	bsf	3,5	;RP0=1, select bank1
  6400  0411  00D9               	movwf	(_R2+1)^(0+128)
  6401  0412  1283               	bcf	3,5	;RP0=0, select bank0
  6402  0413  083E               	movf	?___flmul,w
  6403  0414  1683               	bsf	3,5	;RP0=1, select bank1
  6404  0415  00D8               	movwf	_R2^(0+128)
  6405                           
  6406                           ;main_slave_p1.c: 114:             logR2 = log(R2);
  6407  0416  085B               	movf	(_R2+3)^(0+128),w
  6408  0417  1283               	bcf	3,5	;RP0=0, select bank0
  6409  0418  00EB               	movwf	log@x+3
  6410  0419  1683               	bsf	3,5	;RP0=1, select bank1
  6411  041A  085A               	movf	(_R2+2)^(0+128),w
  6412  041B  1283               	bcf	3,5	;RP0=0, select bank0
  6413  041C  00EA               	movwf	log@x+2
  6414  041D  1683               	bsf	3,5	;RP0=1, select bank1
  6415  041E  0859               	movf	(_R2+1)^(0+128),w
  6416  041F  1283               	bcf	3,5	;RP0=0, select bank0
  6417  0420  00E9               	movwf	log@x+1
  6418  0421  1683               	bsf	3,5	;RP0=1, select bank1
  6419  0422  0858               	movf	_R2^(0+128),w
  6420  0423  1283               	bcf	3,5	;RP0=0, select bank0
  6421  0424  00E8               	movwf	log@x
  6422  0425  120A  158A  22AE  120A  118A  	fcall	_log
  6423  042A  086B               	movf	?_log+3,w
  6424  042B  1683               	bsf	3,5	;RP0=1, select bank1
  6425  042C  00DF               	movwf	(_logR2+3)^(0+128)
  6426  042D  1283               	bcf	3,5	;RP0=0, select bank0
  6427  042E  086A               	movf	?_log+2,w
  6428  042F  1683               	bsf	3,5	;RP0=1, select bank1
  6429  0430  00DE               	movwf	(_logR2+2)^(0+128)
  6430  0431  1283               	bcf	3,5	;RP0=0, select bank0
  6431  0432  0869               	movf	?_log+1,w
  6432  0433  1683               	bsf	3,5	;RP0=1, select bank1
  6433  0434  00DD               	movwf	(_logR2+1)^(0+128)
  6434  0435  1283               	bcf	3,5	;RP0=0, select bank0
  6435  0436  0868               	movf	?_log,w
  6436  0437  1683               	bsf	3,5	;RP0=1, select bank1
  6437  0438  00DC               	movwf	_logR2^(0+128)
  6438                           
  6439                           ;main_slave_p1.c: 115:             TC = (uint8_t)(273.15 - (1 / (A + B * logR2 + C * log
      +                          R2 * logR2 * logR2)));
  6440  0439  1283               	bcf	3,5	;RP0=0, select bank2
  6441  043A  1703               	bsf	3,6	;RP1=1, select bank2
  6442  043B  0813               	movf	(_C+3)^(0+256),w
  6443  043C  1303               	bcf	3,6	;RP1=0, select bank0
  6444  043D  00C5               	movwf	___flmul@a+3
  6445  043E  1703               	bsf	3,6	;RP1=1, select bank2
  6446  043F  0812               	movf	(_C+2)^(0+256),w
  6447  0440  1303               	bcf	3,6	;RP1=0, select bank0
  6448  0441  00C4               	movwf	___flmul@a+2
  6449  0442  1703               	bsf	3,6	;RP1=1, select bank2
  6450  0443  0811               	movf	(_C+1)^(0+256),w
  6451  0444  1303               	bcf	3,6	;RP1=0, select bank0
  6452  0445  00C3               	movwf	___flmul@a+1
  6453  0446  1703               	bsf	3,6	;RP1=1, select bank2
  6454  0447  0810               	movf	_C^(0+256),w
  6455  0448  1303               	bcf	3,6	;RP1=0, select bank0
  6456  0449  00C2               	movwf	___flmul@a
  6457  044A  1683               	bsf	3,5	;RP0=1, select bank1
  6458  044B  085F               	movf	(_logR2+3)^(0+128),w
  6459  044C  1283               	bcf	3,5	;RP0=0, select bank0
  6460  044D  00C1               	movwf	___flmul@b+3
  6461  044E  1683               	bsf	3,5	;RP0=1, select bank1
  6462  044F  085E               	movf	(_logR2+2)^(0+128),w
  6463  0450  1283               	bcf	3,5	;RP0=0, select bank0
  6464  0451  00C0               	movwf	___flmul@b+2
  6465  0452  1683               	bsf	3,5	;RP0=1, select bank1
  6466  0453  085D               	movf	(_logR2+1)^(0+128),w
  6467  0454  1283               	bcf	3,5	;RP0=0, select bank0
  6468  0455  00BF               	movwf	___flmul@b+1
  6469  0456  1683               	bsf	3,5	;RP0=1, select bank1
  6470  0457  085C               	movf	_logR2^(0+128),w
  6471  0458  1283               	bcf	3,5	;RP0=0, select bank0
  6472  0459  00BE               	movwf	___flmul@b
  6473  045A  120A  118A  2052  120A  118A  	fcall	___flmul
  6474  045F  0841               	movf	?___flmul+3,w
  6475  0460  1683               	bsf	3,5	;RP0=1, select bank1
  6476  0461  00CB               	movwf	(_slave$1780+3)^(0+128)
  6477  0462  1283               	bcf	3,5	;RP0=0, select bank0
  6478  0463  0840               	movf	?___flmul+2,w
  6479  0464  1683               	bsf	3,5	;RP0=1, select bank1
  6480  0465  00CA               	movwf	(_slave$1780+2)^(0+128)
  6481  0466  1283               	bcf	3,5	;RP0=0, select bank0
  6482  0467  083F               	movf	?___flmul+1,w
  6483  0468  1683               	bsf	3,5	;RP0=1, select bank1
  6484  0469  00C9               	movwf	(_slave$1780+1)^(0+128)
  6485  046A  1283               	bcf	3,5	;RP0=0, select bank0
  6486  046B  083E               	movf	?___flmul,w
  6487  046C  1683               	bsf	3,5	;RP0=1, select bank1
  6488  046D  00C8               	movwf	_slave$1780^(0+128)
  6489                           
  6490                           ;main_slave_p1.c: 115:             TC = (uint8_t)(273.15 - (1 / (A + B * logR2 + C * log
      +                          R2 * logR2 * logR2)));
  6491  046E  084B               	movf	(_slave$1780+3)^(0+128),w
  6492  046F  1283               	bcf	3,5	;RP0=0, select bank0
  6493  0470  00C5               	movwf	___flmul@a+3
  6494  0471  1683               	bsf	3,5	;RP0=1, select bank1
  6495  0472  084A               	movf	(_slave$1780+2)^(0+128),w
  6496  0473  1283               	bcf	3,5	;RP0=0, select bank0
  6497  0474  00C4               	movwf	___flmul@a+2
  6498  0475  1683               	bsf	3,5	;RP0=1, select bank1
  6499  0476  0849               	movf	(_slave$1780+1)^(0+128),w
  6500  0477  1283               	bcf	3,5	;RP0=0, select bank0
  6501  0478  00C3               	movwf	___flmul@a+1
  6502  0479  1683               	bsf	3,5	;RP0=1, select bank1
  6503  047A  0848               	movf	_slave$1780^(0+128),w
  6504  047B  1283               	bcf	3,5	;RP0=0, select bank0
  6505  047C  00C2               	movwf	___flmul@a
  6506  047D  1683               	bsf	3,5	;RP0=1, select bank1
  6507  047E  085F               	movf	(_logR2+3)^(0+128),w
  6508  047F  1283               	bcf	3,5	;RP0=0, select bank0
  6509  0480  00C1               	movwf	___flmul@b+3
  6510  0481  1683               	bsf	3,5	;RP0=1, select bank1
  6511  0482  085E               	movf	(_logR2+2)^(0+128),w
  6512  0483  1283               	bcf	3,5	;RP0=0, select bank0
  6513  0484  00C0               	movwf	___flmul@b+2
  6514  0485  1683               	bsf	3,5	;RP0=1, select bank1
  6515  0486  085D               	movf	(_logR2+1)^(0+128),w
  6516  0487  1283               	bcf	3,5	;RP0=0, select bank0
  6517  0488  00BF               	movwf	___flmul@b+1
  6518  0489  1683               	bsf	3,5	;RP0=1, select bank1
  6519  048A  085C               	movf	_logR2^(0+128),w
  6520  048B  1283               	bcf	3,5	;RP0=0, select bank0
  6521  048C  00BE               	movwf	___flmul@b
  6522  048D  120A  118A  2052  120A  118A  	fcall	___flmul
  6523  0492  0841               	movf	?___flmul+3,w
  6524  0493  1683               	bsf	3,5	;RP0=1, select bank1
  6525  0494  00CF               	movwf	(_slave$1781+3)^(0+128)
  6526  0495  1283               	bcf	3,5	;RP0=0, select bank0
  6527  0496  0840               	movf	?___flmul+2,w
  6528  0497  1683               	bsf	3,5	;RP0=1, select bank1
  6529  0498  00CE               	movwf	(_slave$1781+2)^(0+128)
  6530  0499  1283               	bcf	3,5	;RP0=0, select bank0
  6531  049A  083F               	movf	?___flmul+1,w
  6532  049B  1683               	bsf	3,5	;RP0=1, select bank1
  6533  049C  00CD               	movwf	(_slave$1781+1)^(0+128)
  6534  049D  1283               	bcf	3,5	;RP0=0, select bank0
  6535  049E  083E               	movf	?___flmul,w
  6536  049F  1683               	bsf	3,5	;RP0=1, select bank1
  6537  04A0  00CC               	movwf	_slave$1781^(0+128)
  6538                           
  6539                           ;main_slave_p1.c: 115:             TC = (uint8_t)(273.15 - (1 / (A + B * logR2 + C * log
      +                          R2 * logR2 * logR2)));
  6540  04A1  086F               	movf	(_B+3)^(0+128),w
  6541  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  6542  04A3  00C5               	movwf	___flmul@a+3
  6543  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  6544  04A5  086E               	movf	(_B+2)^(0+128),w
  6545  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  6546  04A7  00C4               	movwf	___flmul@a+2
  6547  04A8  1683               	bsf	3,5	;RP0=1, select bank1
  6548  04A9  086D               	movf	(_B+1)^(0+128),w
  6549  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  6550  04AB  00C3               	movwf	___flmul@a+1
  6551  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  6552  04AD  086C               	movf	_B^(0+128),w
  6553  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  6554  04AF  00C2               	movwf	___flmul@a
  6555  04B0  1683               	bsf	3,5	;RP0=1, select bank1
  6556  04B1  085F               	movf	(_logR2+3)^(0+128),w
  6557  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  6558  04B3  00C1               	movwf	___flmul@b+3
  6559  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  6560  04B5  085E               	movf	(_logR2+2)^(0+128),w
  6561  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  6562  04B7  00C0               	movwf	___flmul@b+2
  6563  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  6564  04B9  085D               	movf	(_logR2+1)^(0+128),w
  6565  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  6566  04BB  00BF               	movwf	___flmul@b+1
  6567  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  6568  04BD  085C               	movf	_logR2^(0+128),w
  6569  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  6570  04BF  00BE               	movwf	___flmul@b
  6571  04C0  120A  118A  2052  120A  118A  	fcall	___flmul
  6572  04C5  0841               	movf	?___flmul+3,w
  6573  04C6  00B1               	movwf	___fladd@a+3
  6574  04C7  0840               	movf	?___flmul+2,w
  6575  04C8  00B0               	movwf	___fladd@a+2
  6576  04C9  083F               	movf	?___flmul+1,w
  6577  04CA  00AF               	movwf	___fladd@a+1
  6578  04CB  083E               	movf	?___flmul,w
  6579  04CC  00AE               	movwf	___fladd@a
  6580  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  6581  04CE  0867               	movf	(_A+3)^(0+128),w
  6582  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  6583  04D0  00AD               	movwf	___fladd@b+3
  6584  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  6585  04D2  0866               	movf	(_A+2)^(0+128),w
  6586  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  6587  04D4  00AC               	movwf	___fladd@b+2
  6588  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  6589  04D6  0865               	movf	(_A+1)^(0+128),w
  6590  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  6591  04D8  00AB               	movwf	___fladd@b+1
  6592  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  6593  04DA  0864               	movf	_A^(0+128),w
  6594  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  6595  04DC  00AA               	movwf	___fladd@b
  6596  04DD  120A  118A  25B7  120A  118A  	fcall	___fladd
  6597  04E2  082D               	movf	?___fladd+3,w
  6598  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  6599  04E4  00D3               	movwf	(_slave$1782+3)^(0+128)
  6600  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  6601  04E6  082C               	movf	?___fladd+2,w
  6602  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  6603  04E8  00D2               	movwf	(_slave$1782+2)^(0+128)
  6604  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  6605  04EA  082B               	movf	?___fladd+1,w
  6606  04EB  1683               	bsf	3,5	;RP0=1, select bank1
  6607  04EC  00D1               	movwf	(_slave$1782+1)^(0+128)
  6608  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  6609  04EE  082A               	movf	?___fladd,w
  6610  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  6611  04F0  00D0               	movwf	_slave$1782^(0+128)
  6612                           
  6613                           ;main_slave_p1.c: 115:             TC = (uint8_t)(273.15 - (1 / (A + B * logR2 + C * log
      +                          R2 * logR2 * logR2)));
  6614  04F1  303F               	movlw	63
  6615  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  6616  04F3  00DF               	movwf	___fldiv@b+3
  6617  04F4  3080               	movlw	128
  6618  04F5  00DE               	movwf	___fldiv@b+2
  6619  04F6  3000               	movlw	0
  6620  04F7  00DD               	movwf	___fldiv@b+1
  6621  04F8  3000               	movlw	0
  6622  04F9  00DC               	movwf	___fldiv@b
  6623  04FA  1683               	bsf	3,5	;RP0=1, select bank1
  6624  04FB  0853               	movf	(_slave$1782+3)^(0+128),w
  6625  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  6626  04FD  00B1               	movwf	___fladd@a+3
  6627  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  6628  04FF  0852               	movf	(_slave$1782+2)^(0+128),w
  6629  0500  1283               	bcf	3,5	;RP0=0, select bank0
  6630  0501  00B0               	movwf	___fladd@a+2
  6631  0502  1683               	bsf	3,5	;RP0=1, select bank1
  6632  0503  0851               	movf	(_slave$1782+1)^(0+128),w
  6633  0504  1283               	bcf	3,5	;RP0=0, select bank0
  6634  0505  00AF               	movwf	___fladd@a+1
  6635  0506  1683               	bsf	3,5	;RP0=1, select bank1
  6636  0507  0850               	movf	_slave$1782^(0+128),w
  6637  0508  1283               	bcf	3,5	;RP0=0, select bank0
  6638  0509  00AE               	movwf	___fladd@a
  6639  050A  1683               	bsf	3,5	;RP0=1, select bank1
  6640  050B  084F               	movf	(_slave$1781+3)^(0+128),w
  6641  050C  1283               	bcf	3,5	;RP0=0, select bank0
  6642  050D  00C5               	movwf	___flmul@a+3
  6643  050E  1683               	bsf	3,5	;RP0=1, select bank1
  6644  050F  084E               	movf	(_slave$1781+2)^(0+128),w
  6645  0510  1283               	bcf	3,5	;RP0=0, select bank0
  6646  0511  00C4               	movwf	___flmul@a+2
  6647  0512  1683               	bsf	3,5	;RP0=1, select bank1
  6648  0513  084D               	movf	(_slave$1781+1)^(0+128),w
  6649  0514  1283               	bcf	3,5	;RP0=0, select bank0
  6650  0515  00C3               	movwf	___flmul@a+1
  6651  0516  1683               	bsf	3,5	;RP0=1, select bank1
  6652  0517  084C               	movf	_slave$1781^(0+128),w
  6653  0518  1283               	bcf	3,5	;RP0=0, select bank0
  6654  0519  00C2               	movwf	___flmul@a
  6655  051A  1683               	bsf	3,5	;RP0=1, select bank1
  6656  051B  085F               	movf	(_logR2+3)^(0+128),w
  6657  051C  1283               	bcf	3,5	;RP0=0, select bank0
  6658  051D  00C1               	movwf	___flmul@b+3
  6659  051E  1683               	bsf	3,5	;RP0=1, select bank1
  6660  051F  085E               	movf	(_logR2+2)^(0+128),w
  6661  0520  1283               	bcf	3,5	;RP0=0, select bank0
  6662  0521  00C0               	movwf	___flmul@b+2
  6663  0522  1683               	bsf	3,5	;RP0=1, select bank1
  6664  0523  085D               	movf	(_logR2+1)^(0+128),w
  6665  0524  1283               	bcf	3,5	;RP0=0, select bank0
  6666  0525  00BF               	movwf	___flmul@b+1
  6667  0526  1683               	bsf	3,5	;RP0=1, select bank1
  6668  0527  085C               	movf	_logR2^(0+128),w
  6669  0528  1283               	bcf	3,5	;RP0=0, select bank0
  6670  0529  00BE               	movwf	___flmul@b
  6671  052A  120A  118A  2052  120A  118A  	fcall	___flmul
  6672  052F  0841               	movf	?___flmul+3,w
  6673  0530  00AD               	movwf	___fladd@b+3
  6674  0531  0840               	movf	?___flmul+2,w
  6675  0532  00AC               	movwf	___fladd@b+2
  6676  0533  083F               	movf	?___flmul+1,w
  6677  0534  00AB               	movwf	___fladd@b+1
  6678  0535  083E               	movf	?___flmul,w
  6679  0536  00AA               	movwf	___fladd@b
  6680  0537  120A  118A  25B7  120A  118A  	fcall	___fladd
  6681  053C  082D               	movf	?___fladd+3,w
  6682  053D  00DB               	movwf	___fldiv@a+3
  6683  053E  082C               	movf	?___fladd+2,w
  6684  053F  00DA               	movwf	___fldiv@a+2
  6685  0540  082B               	movf	?___fladd+1,w
  6686  0541  00D9               	movwf	___fldiv@a+1
  6687  0542  082A               	movf	?___fladd,w
  6688  0543  00D8               	movwf	___fldiv@a
  6689  0544  120A  158A  23A0  120A  118A  	fcall	___fldiv
  6690  0549  085B               	movf	?___fldiv+3,w
  6691  054A  1683               	bsf	3,5	;RP0=1, select bank1
  6692  054B  00D7               	movwf	(_slave$1783+3)^(0+128)
  6693  054C  1283               	bcf	3,5	;RP0=0, select bank0
  6694  054D  085A               	movf	?___fldiv+2,w
  6695  054E  1683               	bsf	3,5	;RP0=1, select bank1
  6696  054F  00D6               	movwf	(_slave$1783+2)^(0+128)
  6697  0550  1283               	bcf	3,5	;RP0=0, select bank0
  6698  0551  0859               	movf	?___fldiv+1,w
  6699  0552  1683               	bsf	3,5	;RP0=1, select bank1
  6700  0553  00D5               	movwf	(_slave$1783+1)^(0+128)
  6701  0554  1283               	bcf	3,5	;RP0=0, select bank0
  6702  0555  0858               	movf	?___fldiv,w
  6703  0556  1683               	bsf	3,5	;RP0=1, select bank1
  6704  0557  00D4               	movwf	_slave$1783^(0+128)
  6705                           
  6706                           ;main_slave_p1.c: 115:             TC = (uint8_t)(273.15 - (1 / (A + B * logR2 + C * log
      +                          R2 * logR2 * logR2)));
  6707  0558  3043               	movlw	67
  6708  0559  1283               	bcf	3,5	;RP0=0, select bank0
  6709  055A  00EC               	movwf	___flsub@b+3
  6710  055B  3088               	movlw	136
  6711  055C  00EB               	movwf	___flsub@b+2
  6712  055D  3093               	movlw	147
  6713  055E  00EA               	movwf	___flsub@b+1
  6714  055F  3033               	movlw	51
  6715  0560  00E9               	movwf	___flsub@b
  6716  0561  1683               	bsf	3,5	;RP0=1, select bank1
  6717  0562  0857               	movf	(_slave$1783+3)^(0+128),w
  6718  0563  1283               	bcf	3,5	;RP0=0, select bank0
  6719  0564  00E8               	movwf	___flsub@a+3
  6720  0565  1683               	bsf	3,5	;RP0=1, select bank1
  6721  0566  0856               	movf	(_slave$1783+2)^(0+128),w
  6722  0567  1283               	bcf	3,5	;RP0=0, select bank0
  6723  0568  00E7               	movwf	___flsub@a+2
  6724  0569  1683               	bsf	3,5	;RP0=1, select bank1
  6725  056A  0855               	movf	(_slave$1783+1)^(0+128),w
  6726  056B  1283               	bcf	3,5	;RP0=0, select bank0
  6727  056C  00E6               	movwf	___flsub@a+1
  6728  056D  1683               	bsf	3,5	;RP0=1, select bank1
  6729  056E  0854               	movf	_slave$1783^(0+128),w
  6730  056F  1283               	bcf	3,5	;RP0=0, select bank0
  6731  0570  00E5               	movwf	___flsub@a
  6732  0571  160A  158A  279F  120A  118A  	fcall	___flsub
  6733  0576  0868               	movf	?___flsub+3,w
  6734  0577  1683               	bsf	3,5	;RP0=1, select bank1
  6735  0578  00B0               	movwf	(i1___fltol@f1+3)^(0+128)
  6736  0579  1283               	bcf	3,5	;RP0=0, select bank0
  6737  057A  0867               	movf	?___flsub+2,w
  6738  057B  1683               	bsf	3,5	;RP0=1, select bank1
  6739  057C  00AF               	movwf	(i1___fltol@f1+2)^(0+128)
  6740  057D  1283               	bcf	3,5	;RP0=0, select bank0
  6741  057E  0866               	movf	?___flsub+1,w
  6742  057F  1683               	bsf	3,5	;RP0=1, select bank1
  6743  0580  00AE               	movwf	(i1___fltol@f1+1)^(0+128)
  6744  0581  1283               	bcf	3,5	;RP0=0, select bank0
  6745  0582  0865               	movf	?___flsub,w
  6746  0583  1683               	bsf	3,5	;RP0=1, select bank1
  6747  0584  00AD               	movwf	i1___fltol@f1^(0+128)
  6748  0585  120A  158A  2011  120A  118A  	fcall	i1___fltol
  6749  058A  1683               	bsf	3,5	;RP0=1, select bank1
  6750  058B  082D               	movf	?i1___fltol^(0+128),w
  6751  058C  00C0               	movwf	??_slave^(0+128)
  6752  058D  01C1               	clrf	(??_slave^(0+128)+1)
  6753  058E  01C2               	clrf	(??_slave^(0+128)+2)
  6754  058F  01C3               	clrf	(??_slave^(0+128)+3)
  6755  0590  0843               	movf	(??_slave+3)^(0+128),w
  6756  0591  00FC               	movwf	___xxtofl@val+3
  6757  0592  0842               	movf	(??_slave+2)^(0+128),w
  6758  0593  00FB               	movwf	___xxtofl@val+2
  6759  0594  0841               	movf	(??_slave+1)^(0+128),w
  6760  0595  00FA               	movwf	___xxtofl@val+1
  6761  0596  0840               	movf	??_slave^(0+128),w
  6762  0597  00F9               	movwf	___xxtofl@val
  6763  0598  3000               	movlw	0
  6764  0599  160A  118A  275C  120A  118A  	fcall	___xxtofl
  6765  059E  087C               	movf	?___xxtofl+3,w
  6766  059F  1683               	bsf	3,5	;RP0=1, select bank3
  6767  05A0  1703               	bsf	3,6	;RP1=1, select bank3
  6768  05A1  00D7               	movwf	(_TC+3)^(0+384)
  6769  05A2  087B               	movf	?___xxtofl+2,w
  6770  05A3  00D6               	movwf	(_TC+2)^(0+384)
  6771  05A4  087A               	movf	?___xxtofl+1,w
  6772  05A5  00D5               	movwf	(_TC+1)^(0+384)
  6773  05A6  0879               	movf	?___xxtofl,w
  6774  05A7  00D4               	movwf	_TC^(0+384)
  6775  05A8                     i1l3935:
  6776                           
  6777                           ;main_slave_p1.c: 117:         PIR1bits.ADIF = 0;
  6778  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  6779  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  6780  05AA  130C               	bcf	12,6	;volatile
  6781  05AB                     i1l151:
  6782  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  6783  05AC  0847               	movf	(??_slave+7)^(0+128),w
  6784  05AD  00FF               	movwf	127
  6785  05AE  0846               	movf	(??_slave+6)^(0+128),w
  6786  05AF  008A               	movwf	10
  6787  05B0  0845               	movf	(??_slave+5)^(0+128),w
  6788  05B1  0084               	movwf	4
  6789  05B2  0E44               	swapf	(??_slave+4)^(0+128),w
  6790  05B3  0083               	movwf	3
  6791  05B4  0EFE               	swapf	126,f
  6792  05B5  0E7E               	swapf	126,w
  6793  05B6  0009               	retfie
  6794  05B7                     __end_of_slave:
  6795                           
  6796                           	psect	intentry
  6797  0004                     __pintentry:	
  6798                           ;incstack = 0
  6799                           ; Regs used in _slave: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6800                           
  6801  0004                     interrupt_function:
  6802  007E                     saved_w	set	btemp
  6803  0004  00FE               	movwf	btemp
  6804  0005  0E03               	swapf	3,w
  6805  0006  1683               	bsf	3,5	;RP0=1, select bank1
  6806  0007  1303               	bcf	3,6	;RP1=0, select bank1
  6807  0008  00C4               	movwf	(??_slave+4)^(0+128)
  6808  0009  0804               	movf	4,w
  6809  000A  00C5               	movwf	(??_slave+5)^(0+128)
  6810  000B  080A               	movf	10,w
  6811  000C  00C6               	movwf	(??_slave+6)^(0+128)
  6812  000D  087F               	movf	btemp+1,w
  6813  000E  00C7               	movwf	(??_slave+7)^(0+128)
  6814  000F  120A  118A  2B47   	ljmp	_slave
  6815                           
  6816                           	psect	text31
  6817  1F47                     __ptext31:	
  6818 ;; *************** function i1_tmr0_reload *****************
  6819 ;; Defined at:
  6820 ;;		line 57 in file "tmr0.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;		None
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;		None
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg
  6829 ;; Tracked objects:
  6830 ;;		On entry : 300/300
  6831 ;;		On exit  : 300/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6834 ;;      Params:         0       0       0       0       0
  6835 ;;      Locals:         0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0
  6837 ;;      Totals:         0       0       0       0       0
  6838 ;;Total ram usage:        0 bytes
  6839 ;; Hardware stack levels used: 1
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_slave
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847  1F47                     i1_tmr0_reload:	
  6848                           ;psect for function i1_tmr0_reload
  6849                           
  6850                           
  6851                           ;tmr0.c: 58:     TMR0 = 178;
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in i1_tmr0_reload: [wreg]
  6855  1F47  30B2               	movlw	178
  6856  1F48  1283               	bcf	3,5	;RP0=0, select bank0
  6857  1F49  1303               	bcf	3,6	;RP1=0, select bank0
  6858  1F4A  0081               	movwf	1	;volatile
  6859                           
  6860                           ;tmr0.c: 59:     INTCONbits.T0IF = 0;
  6861  1F4B  110B               	bcf	11,2	;volatile
  6862  1F4C  0008               	return
  6863  1F4D                     __end_ofi1_tmr0_reload:
  6864                           
  6865                           	psect	text32
  6866  16C0                     __ptext32:	
  6867 ;; *************** function _map *****************
  6868 ;; Defined at:
  6869 ;;		line 145 in file "main_slave_p1.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  x               2   22[BANK1 ] unsigned int 
  6872 ;;  x0              2   24[BANK1 ] unsigned int 
  6873 ;;  x1              2   26[BANK1 ] unsigned int 
  6874 ;;  y0              2   28[BANK1 ] short 
  6875 ;;  y1              2   30[BANK1 ] short 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;		None
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  2   22[BANK1 ] short 
  6880 ;; Registers used:
  6881 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 300/100
  6884 ;;		On exit  : 300/100
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6887 ;;      Params:         0       0      10       0       0
  6888 ;;      Locals:         0       0       0       0       0
  6889 ;;      Temps:          0       0       0       0       0
  6890 ;;      Totals:         0       0      10       0       0
  6891 ;;Total ram usage:       10 bytes
  6892 ;; Hardware stack levels used: 1
  6893 ;; Hardware stack levels required when called: 2
  6894 ;; This function calls:
  6895 ;;		___fladd
  6896 ;;		___fldiv
  6897 ;;		___flmul
  6898 ;;		___xxtofl
  6899 ;;		i1___fltol
  6900 ;; This function is called by:
  6901 ;;		_slave
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905  16C0                     _map:	
  6906                           ;psect for function _map
  6907                           
  6908                           
  6909                           ;main_slave_p1.c: 145: short map(uint16_t x, uint16_t x0, uint16_t x1,;main_slave_p1.c: 
      +                          146:           short y0, short y1){;main_slave_p1.c: 147:     return (short)(y0+((float)
      +                          (y1-y0)/(x1-x0))*(x-x0));
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _map: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6913  16C0  083C               	movf	map@y0^(0+128),w
  6914  16C1  00F9               	movwf	___xxtofl@val
  6915  16C2  083D               	movf	(map@y0+1)^(0+128),w
  6916  16C3  00FA               	movwf	___xxtofl@val+1
  6917  16C4  3000               	movlw	0
  6918  16C5  1BFA               	btfsc	___xxtofl@val+1,7
  6919  16C6  30FF               	movlw	255
  6920  16C7  00FB               	movwf	___xxtofl@val+2
  6921  16C8  00FC               	movwf	___xxtofl@val+3
  6922  16C9  3001               	movlw	1
  6923  16CA  160A  118A  275C  160A  118A  	fcall	___xxtofl
  6924  16CF  087C               	movf	?___xxtofl+3,w
  6925  16D0  00B1               	movwf	___fladd@a+3
  6926  16D1  087B               	movf	?___xxtofl+2,w
  6927  16D2  00B0               	movwf	___fladd@a+2
  6928  16D3  087A               	movf	?___xxtofl+1,w
  6929  16D4  00AF               	movwf	___fladd@a+1
  6930  16D5  0879               	movf	?___xxtofl,w
  6931  16D6  00AE               	movwf	___fladd@a
  6932  16D7  1683               	bsf	3,5	;RP0=1, select bank1
  6933  16D8  083C               	movf	map@y0^(0+128),w
  6934  16D9  023E               	subwf	map@y1^(0+128),w
  6935  16DA  00F9               	movwf	___xxtofl@val
  6936  16DB  083D               	movf	(map@y0+1)^(0+128),w
  6937  16DC  1C03               	skipc
  6938  16DD  0A3D               	incf	(map@y0+1)^(0+128),w
  6939  16DE  023F               	subwf	(map@y1+1)^(0+128),w
  6940  16DF  00FA               	movwf	___xxtofl@val+1
  6941  16E0  01FB               	clrf	___xxtofl@val+2
  6942  16E1  1BFA               	btfsc	___xxtofl@val+1,7
  6943  16E2  03FB               	decf	___xxtofl@val+2,f
  6944  16E3  087B               	movf	___xxtofl@val+2,w
  6945  16E4  00FC               	movwf	___xxtofl@val+3
  6946  16E5  3001               	movlw	1
  6947  16E6  160A  118A  275C  160A  118A  	fcall	___xxtofl
  6948  16EB  087C               	movf	?___xxtofl+3,w
  6949  16EC  00DF               	movwf	___fldiv@b+3
  6950  16ED  087B               	movf	?___xxtofl+2,w
  6951  16EE  00DE               	movwf	___fldiv@b+2
  6952  16EF  087A               	movf	?___xxtofl+1,w
  6953  16F0  00DD               	movwf	___fldiv@b+1
  6954  16F1  0879               	movf	?___xxtofl,w
  6955  16F2  00DC               	movwf	___fldiv@b
  6956  16F3  1683               	bsf	3,5	;RP0=1, select bank1
  6957  16F4  0838               	movf	map@x0^(0+128),w
  6958  16F5  023A               	subwf	map@x1^(0+128),w
  6959  16F6  00F9               	movwf	___xxtofl@val
  6960  16F7  0839               	movf	(map@x0+1)^(0+128),w
  6961  16F8  1C03               	skipc
  6962  16F9  0A39               	incf	(map@x0+1)^(0+128),w
  6963  16FA  023B               	subwf	(map@x1+1)^(0+128),w
  6964  16FB  00FA               	movwf	___xxtofl@val+1
  6965  16FC  01FB               	clrf	___xxtofl@val+2
  6966  16FD  01FC               	clrf	___xxtofl@val+3
  6967  16FE  3000               	movlw	0
  6968  16FF  160A  118A  275C  160A  118A  	fcall	___xxtofl
  6969  1704  087C               	movf	?___xxtofl+3,w
  6970  1705  00DB               	movwf	___fldiv@a+3
  6971  1706  087B               	movf	?___xxtofl+2,w
  6972  1707  00DA               	movwf	___fldiv@a+2
  6973  1708  087A               	movf	?___xxtofl+1,w
  6974  1709  00D9               	movwf	___fldiv@a+1
  6975  170A  0879               	movf	?___xxtofl,w
  6976  170B  00D8               	movwf	___fldiv@a
  6977  170C  120A  158A  23A0  160A  118A  	fcall	___fldiv
  6978  1711  085B               	movf	?___fldiv+3,w
  6979  1712  00C5               	movwf	___flmul@a+3
  6980  1713  085A               	movf	?___fldiv+2,w
  6981  1714  00C4               	movwf	___flmul@a+2
  6982  1715  0859               	movf	?___fldiv+1,w
  6983  1716  00C3               	movwf	___flmul@a+1
  6984  1717  0858               	movf	?___fldiv,w
  6985  1718  00C2               	movwf	___flmul@a
  6986  1719  1683               	bsf	3,5	;RP0=1, select bank1
  6987  171A  0838               	movf	map@x0^(0+128),w
  6988  171B  0236               	subwf	map@x^(0+128),w
  6989  171C  00F9               	movwf	___xxtofl@val
  6990  171D  0839               	movf	(map@x0+1)^(0+128),w
  6991  171E  1C03               	skipc
  6992  171F  0A39               	incf	(map@x0+1)^(0+128),w
  6993  1720  0237               	subwf	(map@x+1)^(0+128),w
  6994  1721  00FA               	movwf	___xxtofl@val+1
  6995  1722  01FB               	clrf	___xxtofl@val+2
  6996  1723  01FC               	clrf	___xxtofl@val+3
  6997  1724  3000               	movlw	0
  6998  1725  160A  118A  275C  160A  118A  	fcall	___xxtofl
  6999  172A  087C               	movf	?___xxtofl+3,w
  7000  172B  00C1               	movwf	___flmul@b+3
  7001  172C  087B               	movf	?___xxtofl+2,w
  7002  172D  00C0               	movwf	___flmul@b+2
  7003  172E  087A               	movf	?___xxtofl+1,w
  7004  172F  00BF               	movwf	___flmul@b+1
  7005  1730  0879               	movf	?___xxtofl,w
  7006  1731  00BE               	movwf	___flmul@b
  7007  1732  120A  118A  2052  160A  118A  	fcall	___flmul
  7008  1737  0841               	movf	?___flmul+3,w
  7009  1738  00AD               	movwf	___fladd@b+3
  7010  1739  0840               	movf	?___flmul+2,w
  7011  173A  00AC               	movwf	___fladd@b+2
  7012  173B  083F               	movf	?___flmul+1,w
  7013  173C  00AB               	movwf	___fladd@b+1
  7014  173D  083E               	movf	?___flmul,w
  7015  173E  00AA               	movwf	___fladd@b
  7016  173F  120A  118A  25B7  160A  118A  	fcall	___fladd
  7017  1744  082D               	movf	?___fladd+3,w
  7018  1745  1683               	bsf	3,5	;RP0=1, select bank1
  7019  1746  00B0               	movwf	(i1___fltol@f1+3)^(0+128)
  7020  1747  1283               	bcf	3,5	;RP0=0, select bank0
  7021  1748  082C               	movf	?___fladd+2,w
  7022  1749  1683               	bsf	3,5	;RP0=1, select bank1
  7023  174A  00AF               	movwf	(i1___fltol@f1+2)^(0+128)
  7024  174B  1283               	bcf	3,5	;RP0=0, select bank0
  7025  174C  082B               	movf	?___fladd+1,w
  7026  174D  1683               	bsf	3,5	;RP0=1, select bank1
  7027  174E  00AE               	movwf	(i1___fltol@f1+1)^(0+128)
  7028  174F  1283               	bcf	3,5	;RP0=0, select bank0
  7029  1750  082A               	movf	?___fladd,w
  7030  1751  1683               	bsf	3,5	;RP0=1, select bank1
  7031  1752  00AD               	movwf	i1___fltol@f1^(0+128)
  7032  1753  120A  158A  2011   	fcall	i1___fltol
  7033  1756  1683               	bsf	3,5	;RP0=1, select bank1
  7034  1757  082E               	movf	(?i1___fltol+1)^(0+128),w
  7035  1758  00B7               	movwf	(?_map+1)^(0+128)
  7036  1759  082D               	movf	?i1___fltol^(0+128),w
  7037  175A  00B6               	movwf	?_map^(0+128)
  7038  175B  0008               	return
  7039  175C                     __end_of_map:
  7040                           
  7041                           	psect	text33
  7042  0811                     __ptext33:	
  7043 ;; *************** function i1___fltol *****************
  7044 ;; Defined at:
  7045 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\fltol.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  f1              4   13[BANK1 ] short 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  exp1            1   78[BANK0 ] unsigned char 
  7050 ;;  sign1           1   77[BANK0 ] unsigned char 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  4   13[BANK1 ] long 
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0
  7055 ;; Tracked objects:
  7056 ;;		On entry : 300/100
  7057 ;;		On exit  : 200/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7060 ;;      Params:         0       0       4       0       0
  7061 ;;      Locals:         0       2       0       0       0
  7062 ;;      Temps:          0       0       5       0       0
  7063 ;;      Totals:         0       2       9       0       0
  7064 ;;Total ram usage:       11 bytes
  7065 ;; Hardware stack levels used: 1
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_slave
  7070 ;;		_map
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074  0811                     i1___fltol:	
  7075                           ;psect for function i1___fltol
  7076                           
  7077                           
  7078                           ;incstack = 0
  7079                           ; Regs used in i1___fltol: [wreg+status,2+status,0]
  7080  0811  1003               	clrc
  7081  0812  0D2F               	rlf	(i1___fltol@f1+2)^(0+128),w
  7082  0813  0D30               	rlf	(i1___fltol@f1+3)^(0+128),w
  7083  0814  00B1               	movwf	??i1___fltol^(0+128)
  7084  0815  0831               	movf	??i1___fltol^(0+128),w
  7085  0816  1283               	bcf	3,5	;RP0=0, select bank0
  7086  0817  00EE               	movwf	i1___fltol@exp1
  7087  0818  086E               	movf	i1___fltol@exp1,w
  7088  0819  1D03               	btfss	3,2
  7089  081A  2825               	goto	i1l3541
  7090  081B                     i1l3537:
  7091  081B  3000               	movlw	0
  7092  081C  1683               	bsf	3,5	;RP0=1, select bank1
  7093  081D  00B0               	movwf	(?i1___fltol+3)^(0+128)
  7094  081E  3000               	movlw	0
  7095  081F  00AF               	movwf	(?i1___fltol+2)^(0+128)
  7096  0820  3000               	movlw	0
  7097  0821  00AE               	movwf	(?i1___fltol+1)^(0+128)
  7098  0822  3000               	movlw	0
  7099  0823  00AD               	movwf	?i1___fltol^(0+128)
  7100  0824  0008               	return
  7101  0825                     i1l3541:
  7102  0825  1683               	bsf	3,5	;RP0=1, select bank1
  7103  0826  082D               	movf	i1___fltol@f1^(0+128),w
  7104  0827  00B1               	movwf	??i1___fltol^(0+128)
  7105  0828  082E               	movf	(i1___fltol@f1+1)^(0+128),w
  7106  0829  00B2               	movwf	(??i1___fltol^(0+128)+1)
  7107  082A  082F               	movf	(i1___fltol@f1+2)^(0+128),w
  7108  082B  00B3               	movwf	(??i1___fltol^(0+128)+2)
  7109  082C  0830               	movf	(i1___fltol@f1+3)^(0+128),w
  7110  082D  00B4               	movwf	(??i1___fltol^(0+128)+3)
  7111  082E  301F               	movlw	31
  7112  082F                     u438_25:
  7113  082F  1003               	clrc
  7114  0830  0CB4               	rrf	(??i1___fltol^(0+128)+3),f
  7115  0831  0CB3               	rrf	(??i1___fltol^(0+128)+2),f
  7116  0832  0CB2               	rrf	(??i1___fltol^(0+128)+1),f
  7117  0833  0CB1               	rrf	??i1___fltol^(0+128),f
  7118  0834  3EFF               	addlw	-1
  7119  0835  1D03               	skipz
  7120  0836  282F               	goto	u438_25
  7121  0837  0831               	movf	??i1___fltol^(0+128),w
  7122  0838  00B5               	movwf	(??i1___fltol+4)^(0+128)
  7123  0839  0835               	movf	(??i1___fltol+4)^(0+128),w
  7124  083A  1283               	bcf	3,5	;RP0=0, select bank0
  7125  083B  00ED               	movwf	i1___fltol@sign1
  7126  083C  1683               	bsf	3,5	;RP0=1, select bank1
  7127  083D  17AF               	bsf	(i1___fltol@f1^(0+128)+2),7
  7128  083E  30FF               	movlw	255
  7129  083F  05AD               	andwf	i1___fltol@f1^(0+128),f
  7130  0840  30FF               	movlw	255
  7131  0841  05AE               	andwf	(i1___fltol@f1+1)^(0+128),f
  7132  0842  30FF               	movlw	255
  7133  0843  05AF               	andwf	(i1___fltol@f1+2)^(0+128),f
  7134  0844  3000               	movlw	0
  7135  0845  05B0               	andwf	(i1___fltol@f1+3)^(0+128),f
  7136  0846  3096               	movlw	150
  7137  0847  1283               	bcf	3,5	;RP0=0, select bank0
  7138  0848  02EE               	subwf	i1___fltol@exp1,f
  7139  0849  1FEE               	btfss	i1___fltol@exp1,7
  7140  084A  2862               	goto	i1l3559
  7141  084B  086E               	movf	i1___fltol@exp1,w
  7142  084C  3A80               	xorlw	128
  7143  084D  3E97               	addlw	151
  7144  084E  1C03               	btfss	3,0
  7145  084F  281B               	goto	i1l3537
  7146  0850                     i1l3557:
  7147  0850  3001               	movlw	1
  7148  0851                     u441_25:
  7149  0851  1003               	clrc
  7150  0852  1683               	bsf	3,5	;RP0=1, select bank1
  7151  0853  0CB0               	rrf	(i1___fltol@f1+3)^(0+128),f
  7152  0854  0CAF               	rrf	(i1___fltol@f1+2)^(0+128),f
  7153  0855  0CAE               	rrf	(i1___fltol@f1+1)^(0+128),f
  7154  0856  0CAD               	rrf	i1___fltol@f1^(0+128),f
  7155  0857  3EFF               	addlw	-1
  7156  0858  1D03               	skipz
  7157  0859  2851               	goto	u441_25
  7158  085A  3001               	movlw	1
  7159  085B  00B1               	movwf	??i1___fltol^(0+128)
  7160  085C  0831               	movf	??i1___fltol^(0+128),w
  7161  085D  1283               	bcf	3,5	;RP0=0, select bank0
  7162  085E  07EE               	addwf	i1___fltol@exp1,f
  7163  085F  1903               	btfsc	3,2
  7164  0860  2877               	goto	i1l3567
  7165  0861  2850               	goto	i1l3557
  7166  0862                     i1l3559:
  7167  0862  3020               	movlw	32
  7168  0863  026E               	subwf	i1___fltol@exp1,w
  7169  0864  1803               	btfsc	3,0
  7170  0865  281B               	goto	i1l3537
  7171  0866                     i1l702:
  7172  0866  086E               	movf	i1___fltol@exp1,w
  7173  0867  1903               	btfsc	3,2
  7174  0868  2877               	goto	i1l3567
  7175  0869  3001               	movlw	1
  7176  086A  1683               	bsf	3,5	;RP0=1, select bank1
  7177  086B  00B1               	movwf	??i1___fltol^(0+128)
  7178  086C                     u444_25:
  7179  086C  1003               	clrc
  7180  086D  0DAD               	rlf	i1___fltol@f1^(0+128),f
  7181  086E  0DAE               	rlf	(i1___fltol@f1+1)^(0+128),f
  7182  086F  0DAF               	rlf	(i1___fltol@f1+2)^(0+128),f
  7183  0870  0DB0               	rlf	(i1___fltol@f1+3)^(0+128),f
  7184  0871  0BB1               	decfsz	??i1___fltol^(0+128),f
  7185  0872  286C               	goto	u444_25
  7186  0873  3001               	movlw	1
  7187  0874  1283               	bcf	3,5	;RP0=0, select bank0
  7188  0875  02EE               	subwf	i1___fltol@exp1,f
  7189  0876  2866               	goto	i1l702
  7190  0877                     i1l3567:
  7191  0877  086D               	movf	i1___fltol@sign1,w
  7192  0878  1903               	btfsc	3,2
  7193  0879  0008               	return
  7194  087A  1683               	bsf	3,5	;RP0=1, select bank1
  7195  087B  09AD               	comf	i1___fltol@f1^(0+128),f
  7196  087C  09AE               	comf	(i1___fltol@f1+1)^(0+128),f
  7197  087D  09AF               	comf	(i1___fltol@f1+2)^(0+128),f
  7198  087E  09B0               	comf	(i1___fltol@f1+3)^(0+128),f
  7199  087F  0AAD               	incf	i1___fltol@f1^(0+128),f
  7200  0880  1903               	skipnz
  7201  0881  0AAE               	incf	(i1___fltol@f1+1)^(0+128),f
  7202  0882  1903               	skipnz
  7203  0883  0AAF               	incf	(i1___fltol@f1+2)^(0+128),f
  7204  0884  1903               	skipnz
  7205  0885  0AB0               	incf	(i1___fltol@f1+3)^(0+128),f
  7206  0886  0008               	return
  7207  0887                     __end_ofi1___fltol:
  7208                           
  7209                           	psect	text34
  7210  0BA0                     __ptext34:	
  7211 ;; *************** function ___fldiv *****************
  7212 ;; Defined at:
  7213 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\sprcdiv.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  a               4   56[BANK0 ] long 
  7216 ;;  b               4   60[BANK0 ] long 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  grs             4    7[BANK1 ] unsigned long 
  7219 ;;  rem             4    0[BANK1 ] unsigned long 
  7220 ;;  new_exp         2    5[BANK1 ] int 
  7221 ;;  aexp            1   12[BANK1 ] unsigned char 
  7222 ;;  bexp            1   11[BANK1 ] unsigned char 
  7223 ;;  sign            1    4[BANK1 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  4   56[BANK0 ] unsigned char 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0, btemp+1
  7228 ;; Tracked objects:
  7229 ;;		On entry : 300/0
  7230 ;;		On exit  : 300/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7233 ;;      Params:         0       8       0       0       0
  7234 ;;      Locals:         0       0      13       0       0
  7235 ;;      Temps:          0       5       0       0       0
  7236 ;;      Totals:         0      13      13       0       0
  7237 ;;Total ram usage:       26 bytes
  7238 ;; Hardware stack levels used: 1
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_slave
  7243 ;;		_map
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247  0BA0                     ___fldiv:	
  7248                           ;psect for function ___fldiv
  7249                           
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in ___fldiv: [wreg+status,2+status,0+btemp+1]
  7253  0BA0  085F               	movf	___fldiv@b+3,w
  7254  0BA1  3980               	andlw	128
  7255  0BA2  00E0               	movwf	??___fldiv
  7256  0BA3  0860               	movf	??___fldiv,w
  7257  0BA4  1683               	bsf	3,5	;RP0=1, select bank1
  7258  0BA5  00A4               	movwf	___fldiv@sign^(0+128)
  7259  0BA6  1283               	bcf	3,5	;RP0=0, select bank0
  7260  0BA7  085F               	movf	___fldiv@b+3,w
  7261  0BA8  00E0               	movwf	??___fldiv
  7262  0BA9  0760               	addwf	??___fldiv,w
  7263  0BAA  00E1               	movwf	??___fldiv+1
  7264  0BAB  0861               	movf	??___fldiv+1,w
  7265  0BAC  1683               	bsf	3,5	;RP0=1, select bank1
  7266  0BAD  00AB               	movwf	___fldiv@bexp^(0+128)
  7267  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  7268  0BAF  1FDE               	btfss	___fldiv@b+2,7
  7269  0BB0  2BB3               	goto	i1l3327
  7270  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  7271  0BB2  142B               	bsf	___fldiv@bexp^(0+128),0
  7272  0BB3                     i1l3327:
  7273  0BB3  1683               	bsf	3,5	;RP0=1, select bank1
  7274  0BB4  082B               	movf	___fldiv@bexp^(0+128),w
  7275  0BB5  1903               	btfsc	3,2
  7276  0BB6  2BC7               	goto	i1l3337
  7277  0BB7  0A2B               	incf	___fldiv@bexp^(0+128),w
  7278  0BB8  1D03               	btfss	3,2
  7279  0BB9  2BC3               	goto	i1l3333
  7280  0BBA  3000               	movlw	0
  7281  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  7282  0BBC  00DF               	movwf	___fldiv@b+3
  7283  0BBD  3000               	movlw	0
  7284  0BBE  00DE               	movwf	___fldiv@b+2
  7285  0BBF  3000               	movlw	0
  7286  0BC0  00DD               	movwf	___fldiv@b+1
  7287  0BC1  3000               	movlw	0
  7288  0BC2  00DC               	movwf	___fldiv@b
  7289  0BC3                     i1l3333:
  7290  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  7291  0BC4  17DE               	bsf	___fldiv@b+2,7
  7292  0BC5  01DF               	clrf	___fldiv@b+3
  7293  0BC6  2BD0               	goto	i1l3339
  7294  0BC7                     i1l3337:
  7295  0BC7  3000               	movlw	0
  7296  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  7297  0BC9  00DF               	movwf	___fldiv@b+3
  7298  0BCA  3000               	movlw	0
  7299  0BCB  00DE               	movwf	___fldiv@b+2
  7300  0BCC  3000               	movlw	0
  7301  0BCD  00DD               	movwf	___fldiv@b+1
  7302  0BCE  3000               	movlw	0
  7303  0BCF  00DC               	movwf	___fldiv@b
  7304  0BD0                     i1l3339:
  7305  0BD0  085B               	movf	___fldiv@a+3,w
  7306  0BD1  3980               	andlw	128
  7307  0BD2  00E0               	movwf	??___fldiv
  7308  0BD3  0860               	movf	??___fldiv,w
  7309  0BD4  1683               	bsf	3,5	;RP0=1, select bank1
  7310  0BD5  06A4               	xorwf	___fldiv@sign^(0+128),f
  7311  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  7312  0BD7  085B               	movf	___fldiv@a+3,w
  7313  0BD8  00E0               	movwf	??___fldiv
  7314  0BD9  0760               	addwf	??___fldiv,w
  7315  0BDA  00E1               	movwf	??___fldiv+1
  7316  0BDB  0861               	movf	??___fldiv+1,w
  7317  0BDC  1683               	bsf	3,5	;RP0=1, select bank1
  7318  0BDD  00AC               	movwf	___fldiv@aexp^(0+128)
  7319  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  7320  0BDF  1FDA               	btfss	___fldiv@a+2,7
  7321  0BE0  2BE3               	goto	i1l3347
  7322  0BE1  1683               	bsf	3,5	;RP0=1, select bank1
  7323  0BE2  142C               	bsf	___fldiv@aexp^(0+128),0
  7324  0BE3                     i1l3347:
  7325  0BE3  1683               	bsf	3,5	;RP0=1, select bank1
  7326  0BE4  082C               	movf	___fldiv@aexp^(0+128),w
  7327  0BE5  1903               	btfsc	3,2
  7328  0BE6  2BF7               	goto	i1l3357
  7329  0BE7  0A2C               	incf	___fldiv@aexp^(0+128),w
  7330  0BE8  1D03               	btfss	3,2
  7331  0BE9  2BF3               	goto	i1l3353
  7332  0BEA  3000               	movlw	0
  7333  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  7334  0BEC  00DB               	movwf	___fldiv@a+3
  7335  0BED  3000               	movlw	0
  7336  0BEE  00DA               	movwf	___fldiv@a+2
  7337  0BEF  3000               	movlw	0
  7338  0BF0  00D9               	movwf	___fldiv@a+1
  7339  0BF1  3000               	movlw	0
  7340  0BF2  00D8               	movwf	___fldiv@a
  7341  0BF3                     i1l3353:
  7342  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  7343  0BF4  17DA               	bsf	___fldiv@a+2,7
  7344  0BF5  01DB               	clrf	___fldiv@a+3
  7345  0BF6  2C00               	goto	i1l858
  7346  0BF7                     i1l3357:
  7347  0BF7  3000               	movlw	0
  7348  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  7349  0BF9  00DB               	movwf	___fldiv@a+3
  7350  0BFA  3000               	movlw	0
  7351  0BFB  00DA               	movwf	___fldiv@a+2
  7352  0BFC  3000               	movlw	0
  7353  0BFD  00D9               	movwf	___fldiv@a+1
  7354  0BFE  3000               	movlw	0
  7355  0BFF  00D8               	movwf	___fldiv@a
  7356  0C00                     i1l858:
  7357  0C00  085B               	movf	___fldiv@a+3,w
  7358  0C01  045A               	iorwf	___fldiv@a+2,w
  7359  0C02  0459               	iorwf	___fldiv@a+1,w
  7360  0C03  0458               	iorwf	___fldiv@a,w
  7361  0C04  1D03               	skipz
  7362  0C05  2C21               	goto	i1l3367
  7363  0C06  3000               	movlw	0
  7364  0C07  00DF               	movwf	___fldiv@b+3
  7365  0C08  3000               	movlw	0
  7366  0C09  00DE               	movwf	___fldiv@b+2
  7367  0C0A  3000               	movlw	0
  7368  0C0B  00DD               	movwf	___fldiv@b+1
  7369  0C0C  3000               	movlw	0
  7370  0C0D  00DC               	movwf	___fldiv@b
  7371  0C0E  3080               	movlw	128
  7372  0C0F  04DE               	iorwf	___fldiv@b+2,f
  7373  0C10  307F               	movlw	127
  7374  0C11  04DF               	iorwf	___fldiv@b+3,f
  7375  0C12                     L22:
  7376  0C12  1683               	bsf	3,5	;RP0=1, select bank1
  7377  0C13  0824               	movf	___fldiv@sign^(0+128),w
  7378  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  7379  0C15  00E0               	movwf	??___fldiv
  7380  0C16  0860               	movf	??___fldiv,w
  7381  0C17  04DF               	iorwf	___fldiv@b+3,f
  7382  0C18  085F               	movf	___fldiv@b+3,w
  7383  0C19  00DB               	movwf	?___fldiv+3
  7384  0C1A  085E               	movf	___fldiv@b+2,w
  7385  0C1B  00DA               	movwf	?___fldiv+2
  7386  0C1C  085D               	movf	___fldiv@b+1,w
  7387  0C1D  00D9               	movwf	?___fldiv+1
  7388  0C1E  085C               	movf	___fldiv@b,w
  7389  0C1F  00D8               	movwf	?___fldiv
  7390  0C20  0008               	return
  7391  0C21                     i1l3367:
  7392  0C21  1683               	bsf	3,5	;RP0=1, select bank1
  7393  0C22  082B               	movf	___fldiv@bexp^(0+128),w
  7394  0C23  1D03               	btfss	3,2
  7395  0C24  2C2F               	goto	i1l3373
  7396  0C25  3000               	movlw	0
  7397  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  7398  0C27  00DB               	movwf	?___fldiv+3
  7399  0C28  3000               	movlw	0
  7400  0C29  00DA               	movwf	?___fldiv+2
  7401  0C2A  3000               	movlw	0
  7402  0C2B  00D9               	movwf	?___fldiv+1
  7403  0C2C  3000               	movlw	0
  7404  0C2D  00D8               	movwf	?___fldiv
  7405  0C2E  0008               	return
  7406  0C2F                     i1l3373:
  7407  0C2F  082B               	movf	___fldiv@bexp^(0+128),w
  7408  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  7409  0C31  00E0               	movwf	??___fldiv
  7410  0C32  01E1               	clrf	??___fldiv+1
  7411  0C33  0861               	movf	??___fldiv+1,w
  7412  0C34  00E3               	movwf	??___fldiv+3
  7413  0C35  1683               	bsf	3,5	;RP0=1, select bank1
  7414  0C36  082C               	movf	___fldiv@aexp^(0+128),w
  7415  0C37  1283               	bcf	3,5	;RP0=0, select bank0
  7416  0C38  0260               	subwf	??___fldiv,w
  7417  0C39  00E2               	movwf	??___fldiv+2
  7418  0C3A  1C03               	skipc
  7419  0C3B  03E3               	decf	??___fldiv+3,f
  7420  0C3C  0862               	movf	??___fldiv+2,w
  7421  0C3D  3E7F               	addlw	127
  7422  0C3E  1683               	bsf	3,5	;RP0=1, select bank1
  7423  0C3F  00A5               	movwf	___fldiv@new_exp^(0+128)
  7424  0C40  1283               	bcf	3,5	;RP0=0, select bank0
  7425  0C41  0863               	movf	??___fldiv+3,w
  7426  0C42  1803               	skipnc
  7427  0C43  3E01               	addlw	1
  7428  0C44  3E00               	addlw	0
  7429  0C45  1683               	bsf	3,5	;RP0=1, select bank1
  7430  0C46  00A6               	movwf	(___fldiv@new_exp+1)^(0+128)
  7431  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  7432  0C48  085F               	movf	___fldiv@b+3,w
  7433  0C49  1683               	bsf	3,5	;RP0=1, select bank1
  7434  0C4A  00A3               	movwf	(___fldiv@rem+3)^(0+128)
  7435  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  7436  0C4C  085E               	movf	___fldiv@b+2,w
  7437  0C4D  1683               	bsf	3,5	;RP0=1, select bank1
  7438  0C4E  00A2               	movwf	(___fldiv@rem+2)^(0+128)
  7439  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  7440  0C50  085D               	movf	___fldiv@b+1,w
  7441  0C51  1683               	bsf	3,5	;RP0=1, select bank1
  7442  0C52  00A1               	movwf	(___fldiv@rem+1)^(0+128)
  7443  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  7444  0C54  085C               	movf	___fldiv@b,w
  7445  0C55  1683               	bsf	3,5	;RP0=1, select bank1
  7446  0C56  00A0               	movwf	___fldiv@rem^(0+128)
  7447  0C57  3000               	movlw	0
  7448  0C58  1283               	bcf	3,5	;RP0=0, select bank0
  7449  0C59  00DF               	movwf	___fldiv@b+3
  7450  0C5A  3000               	movlw	0
  7451  0C5B  00DE               	movwf	___fldiv@b+2
  7452  0C5C  3000               	movlw	0
  7453  0C5D  00DD               	movwf	___fldiv@b+1
  7454  0C5E  3000               	movlw	0
  7455  0C5F  00DC               	movwf	___fldiv@b
  7456  0C60  3000               	movlw	0
  7457  0C61  1683               	bsf	3,5	;RP0=1, select bank1
  7458  0C62  00AA               	movwf	(___fldiv@grs+3)^(0+128)
  7459  0C63  3000               	movlw	0
  7460  0C64  00A9               	movwf	(___fldiv@grs+2)^(0+128)
  7461  0C65  3000               	movlw	0
  7462  0C66  00A8               	movwf	(___fldiv@grs+1)^(0+128)
  7463  0C67  3000               	movlw	0
  7464  0C68  00A7               	movwf	___fldiv@grs^(0+128)
  7465  0C69  01AC               	clrf	___fldiv@aexp^(0+128)
  7466  0C6A                     i1l3401:
  7467  0C6A  301A               	movlw	26
  7468  0C6B  022C               	subwf	___fldiv@aexp^(0+128),w
  7469  0C6C  1803               	btfsc	3,0
  7470  0C6D  2CD5               	goto	i1l3403
  7471  0C6E  082C               	movf	___fldiv@aexp^(0+128),w
  7472  0C6F  1903               	btfsc	3,2
  7473  0C70  2C97               	goto	i1l3393
  7474  0C71  3001               	movlw	1
  7475  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  7476  0C73  00E0               	movwf	??___fldiv
  7477  0C74                     u398_25:
  7478  0C74  1003               	clrc
  7479  0C75  1683               	bsf	3,5	;RP0=1, select bank1
  7480  0C76  0DA0               	rlf	___fldiv@rem^(0+128),f
  7481  0C77  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
  7482  0C78  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
  7483  0C79  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
  7484  0C7A  1283               	bcf	3,5	;RP0=0, select bank0
  7485  0C7B  0BE0               	decfsz	??___fldiv,f
  7486  0C7C  2C74               	goto	u398_25
  7487  0C7D  3001               	movlw	1
  7488  0C7E  00E0               	movwf	??___fldiv
  7489  0C7F                     u399_25:
  7490  0C7F  1003               	clrc
  7491  0C80  0DDC               	rlf	___fldiv@b,f
  7492  0C81  0DDD               	rlf	___fldiv@b+1,f
  7493  0C82  0DDE               	rlf	___fldiv@b+2,f
  7494  0C83  0DDF               	rlf	___fldiv@b+3,f
  7495  0C84  0BE0               	decfsz	??___fldiv,f
  7496  0C85  2C7F               	goto	u399_25
  7497  0C86  1683               	bsf	3,5	;RP0=1, select bank1
  7498  0C87  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
  7499  0C88  2C8B               	goto	i1l3391
  7500  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  7501  0C8A  145C               	bsf	___fldiv@b,0
  7502  0C8B                     i1l3391:
  7503  0C8B  3001               	movlw	1
  7504  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  7505  0C8D  00E0               	movwf	??___fldiv
  7506  0C8E                     u401_25:
  7507  0C8E  1003               	clrc
  7508  0C8F  1683               	bsf	3,5	;RP0=1, select bank1
  7509  0C90  0DA7               	rlf	___fldiv@grs^(0+128),f
  7510  0C91  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
  7511  0C92  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
  7512  0C93  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
  7513  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  7514  0C95  0BE0               	decfsz	??___fldiv,f
  7515  0C96  2C8E               	goto	u401_25
  7516  0C97                     i1l3393:
  7517  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  7518  0C98  085B               	movf	___fldiv@a+3,w
  7519  0C99  1683               	bsf	3,5	;RP0=1, select bank1
  7520  0C9A  0223               	subwf	(___fldiv@rem+3)^(0+128),w
  7521  0C9B  1D03               	skipz
  7522  0C9C  2CAD               	goto	u402_25
  7523  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  7524  0C9E  085A               	movf	___fldiv@a+2,w
  7525  0C9F  1683               	bsf	3,5	;RP0=1, select bank1
  7526  0CA0  0222               	subwf	(___fldiv@rem+2)^(0+128),w
  7527  0CA1  1D03               	skipz
  7528  0CA2  2CAD               	goto	u402_25
  7529  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  7530  0CA4  0859               	movf	___fldiv@a+1,w
  7531  0CA5  1683               	bsf	3,5	;RP0=1, select bank1
  7532  0CA6  0221               	subwf	(___fldiv@rem+1)^(0+128),w
  7533  0CA7  1D03               	skipz
  7534  0CA8  2CAD               	goto	u402_25
  7535  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  7536  0CAA  0858               	movf	___fldiv@a,w
  7537  0CAB  1683               	bsf	3,5	;RP0=1, select bank1
  7538  0CAC  0220               	subwf	___fldiv@rem^(0+128),w
  7539  0CAD                     u402_25:
  7540  0CAD  1C03               	skipc
  7541  0CAE  2CCE               	goto	i1l3399
  7542  0CAF  172A               	bsf	(___fldiv@grs^(0+128)+3),6
  7543  0CB0  1283               	bcf	3,5	;RP0=0, select bank0
  7544  0CB1  0858               	movf	___fldiv@a,w
  7545  0CB2  1683               	bsf	3,5	;RP0=1, select bank1
  7546  0CB3  02A0               	subwf	___fldiv@rem^(0+128),f
  7547  0CB4  1283               	bcf	3,5	;RP0=0, select bank0
  7548  0CB5  0859               	movf	___fldiv@a+1,w
  7549  0CB6  1C03               	skipc
  7550  0CB7  0F59               	incfsz	___fldiv@a+1,w
  7551  0CB8  2CBA               	goto	u403_25
  7552  0CB9  2CBC               	goto	u403_26
  7553  0CBA                     u403_25:
  7554  0CBA  1683               	bsf	3,5	;RP0=1, select bank1
  7555  0CBB  02A1               	subwf	(___fldiv@rem+1)^(0+128),f
  7556  0CBC                     u403_26:
  7557  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  7558  0CBD  085A               	movf	___fldiv@a+2,w
  7559  0CBE  1C03               	skipc
  7560  0CBF  0F5A               	incfsz	___fldiv@a+2,w
  7561  0CC0  2CC2               	goto	u403_27
  7562  0CC1  2CC4               	goto	u403_28
  7563  0CC2                     u403_27:
  7564  0CC2  1683               	bsf	3,5	;RP0=1, select bank1
  7565  0CC3  02A2               	subwf	(___fldiv@rem+2)^(0+128),f
  7566  0CC4                     u403_28:
  7567  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  7568  0CC5  085B               	movf	___fldiv@a+3,w
  7569  0CC6  1C03               	skipc
  7570  0CC7  0F5B               	incfsz	___fldiv@a+3,w
  7571  0CC8  2CCA               	goto	u403_29
  7572  0CC9  2CCC               	goto	u403_20
  7573  0CCA                     u403_29:
  7574  0CCA  1683               	bsf	3,5	;RP0=1, select bank1
  7575  0CCB  02A3               	subwf	(___fldiv@rem+3)^(0+128),f
  7576  0CCC                     u403_20:
  7577  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  7578  0CCD  1683               	bsf	3,5	;RP0=1, select bank1
  7579  0CCE                     i1l3399:
  7580  0CCE  3001               	movlw	1
  7581  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  7582  0CD0  00E0               	movwf	??___fldiv
  7583  0CD1  0860               	movf	??___fldiv,w
  7584  0CD2  1683               	bsf	3,5	;RP0=1, select bank1
  7585  0CD3  07AC               	addwf	___fldiv@aexp^(0+128),f
  7586  0CD4  2C6A               	goto	i1l3401
  7587  0CD5                     i1l3403:
  7588  0CD5  0823               	movf	(___fldiv@rem+3)^(0+128),w
  7589  0CD6  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
  7590  0CD7  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
  7591  0CD8  0420               	iorwf	___fldiv@rem^(0+128),w
  7592  0CD9  1D03               	btfss	3,2
  7593  0CDA  1427               	bsf	___fldiv@grs^(0+128),0
  7594  0CDB                     i1l3417:
  7595  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  7596  0CDC  1BDE               	btfsc	___fldiv@b+2,7
  7597  0CDD  2D00               	goto	i1l3419
  7598  0CDE  3001               	movlw	1
  7599  0CDF  00E0               	movwf	??___fldiv
  7600  0CE0                     u406_25:
  7601  0CE0  1003               	clrc
  7602  0CE1  0DDC               	rlf	___fldiv@b,f
  7603  0CE2  0DDD               	rlf	___fldiv@b+1,f
  7604  0CE3  0DDE               	rlf	___fldiv@b+2,f
  7605  0CE4  0DDF               	rlf	___fldiv@b+3,f
  7606  0CE5  0BE0               	decfsz	??___fldiv,f
  7607  0CE6  2CE0               	goto	u406_25
  7608  0CE7  1683               	bsf	3,5	;RP0=1, select bank1
  7609  0CE8  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
  7610  0CE9  2CEC               	goto	i1l3413
  7611  0CEA  1283               	bcf	3,5	;RP0=0, select bank0
  7612  0CEB  145C               	bsf	___fldiv@b,0
  7613  0CEC                     i1l3413:
  7614  0CEC  3001               	movlw	1
  7615  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  7616  0CEE  00E0               	movwf	??___fldiv
  7617  0CEF                     u408_25:
  7618  0CEF  1003               	clrc
  7619  0CF0  1683               	bsf	3,5	;RP0=1, select bank1
  7620  0CF1  0DA7               	rlf	___fldiv@grs^(0+128),f
  7621  0CF2  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
  7622  0CF3  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
  7623  0CF4  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
  7624  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  7625  0CF6  0BE0               	decfsz	??___fldiv,f
  7626  0CF7  2CEF               	goto	u408_25
  7627  0CF8  30FF               	movlw	255
  7628  0CF9  1683               	bsf	3,5	;RP0=1, select bank1
  7629  0CFA  07A5               	addwf	___fldiv@new_exp^(0+128),f
  7630  0CFB  1803               	skipnc
  7631  0CFC  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
  7632  0CFD  30FF               	movlw	255
  7633  0CFE  07A6               	addwf	(___fldiv@new_exp+1)^(0+128),f
  7634  0CFF  2CDB               	goto	i1l3417
  7635  0D00                     i1l3419:
  7636  0D00  1683               	bsf	3,5	;RP0=1, select bank1
  7637  0D01  01AC               	clrf	___fldiv@aexp^(0+128)
  7638  0D02  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
  7639  0D03  2D22               	goto	i1l3429
  7640  0D04  30FF               	movlw	255
  7641  0D05  0527               	andwf	___fldiv@grs^(0+128),w
  7642  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  7643  0D07  00E0               	movwf	??___fldiv
  7644  0D08  30FF               	movlw	255
  7645  0D09  1683               	bsf	3,5	;RP0=1, select bank1
  7646  0D0A  0528               	andwf	(___fldiv@grs+1)^(0+128),w
  7647  0D0B  1283               	bcf	3,5	;RP0=0, select bank0
  7648  0D0C  00E1               	movwf	??___fldiv+1
  7649  0D0D  30FF               	movlw	255
  7650  0D0E  1683               	bsf	3,5	;RP0=1, select bank1
  7651  0D0F  0529               	andwf	(___fldiv@grs+2)^(0+128),w
  7652  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  7653  0D11  00E2               	movwf	??___fldiv+2
  7654  0D12  307F               	movlw	127
  7655  0D13  1683               	bsf	3,5	;RP0=1, select bank1
  7656  0D14  052A               	andwf	(___fldiv@grs+3)^(0+128),w
  7657  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  7658  0D16  00E3               	movwf	??___fldiv+3
  7659  0D17  0863               	movf	??___fldiv+3,w
  7660  0D18  0462               	iorwf	??___fldiv+2,w
  7661  0D19  0461               	iorwf	??___fldiv+1,w
  7662  0D1A  0460               	iorwf	??___fldiv,w
  7663  0D1B  1903               	skipnz
  7664  0D1C  185C               	btfsc	___fldiv@b,0
  7665  0D1D  2D1F               	goto	i1l3425
  7666  0D1E  2D22               	goto	i1l3429
  7667  0D1F                     i1l3425:
  7668  0D1F  1683               	bsf	3,5	;RP0=1, select bank1
  7669  0D20  01AC               	clrf	___fldiv@aexp^(0+128)
  7670  0D21  0AAC               	incf	___fldiv@aexp^(0+128),f
  7671  0D22                     i1l3429:
  7672  0D22  1683               	bsf	3,5	;RP0=1, select bank1
  7673  0D23  082C               	movf	___fldiv@aexp^(0+128),w
  7674  0D24  1903               	btfsc	3,2
  7675  0D25  2D57               	goto	i1l3439
  7676  0D26  3001               	movlw	1
  7677  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  7678  0D28  07DC               	addwf	___fldiv@b,f
  7679  0D29  3000               	movlw	0
  7680  0D2A  1803               	skipnc
  7681  0D2B  3001               	movlw	1
  7682  0D2C  07DD               	addwf	___fldiv@b+1,f
  7683  0D2D  3000               	movlw	0
  7684  0D2E  1803               	skipnc
  7685  0D2F  3001               	movlw	1
  7686  0D30  07DE               	addwf	___fldiv@b+2,f
  7687  0D31  3000               	movlw	0
  7688  0D32  1803               	skipnc
  7689  0D33  3001               	movlw	1
  7690  0D34  07DF               	addwf	___fldiv@b+3,f
  7691  0D35  1C5F               	btfss	___fldiv@b+3,0
  7692  0D36  2D57               	goto	i1l3439
  7693  0D37  085C               	movf	___fldiv@b,w
  7694  0D38  00E0               	movwf	??___fldiv
  7695  0D39  085D               	movf	___fldiv@b+1,w
  7696  0D3A  00E1               	movwf	??___fldiv+1
  7697  0D3B  085E               	movf	___fldiv@b+2,w
  7698  0D3C  00E2               	movwf	??___fldiv+2
  7699  0D3D  085F               	movf	___fldiv@b+3,w
  7700  0D3E  00E3               	movwf	??___fldiv+3
  7701  0D3F  3001               	movlw	1
  7702  0D40  00E4               	movwf	??___fldiv+4
  7703  0D41                     u415_25:
  7704  0D41  0D63               	rlf	??___fldiv+3,w
  7705  0D42  0CE3               	rrf	??___fldiv+3,f
  7706  0D43  0CE2               	rrf	??___fldiv+2,f
  7707  0D44  0CE1               	rrf	??___fldiv+1,f
  7708  0D45  0CE0               	rrf	??___fldiv,f
  7709  0D46  0BE4               	decfsz	??___fldiv+4,f
  7710  0D47  2D41               	goto	u415_25
  7711  0D48  0863               	movf	??___fldiv+3,w
  7712  0D49  00DF               	movwf	___fldiv@b+3
  7713  0D4A  0862               	movf	??___fldiv+2,w
  7714  0D4B  00DE               	movwf	___fldiv@b+2
  7715  0D4C  0861               	movf	??___fldiv+1,w
  7716  0D4D  00DD               	movwf	___fldiv@b+1
  7717  0D4E  0860               	movf	??___fldiv,w
  7718  0D4F  00DC               	movwf	___fldiv@b
  7719  0D50  3001               	movlw	1
  7720  0D51  1683               	bsf	3,5	;RP0=1, select bank1
  7721  0D52  07A5               	addwf	___fldiv@new_exp^(0+128),f
  7722  0D53  1803               	skipnc
  7723  0D54  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
  7724  0D55  3000               	movlw	0
  7725  0D56  07A6               	addwf	(___fldiv@new_exp+1)^(0+128),f
  7726  0D57                     i1l3439:
  7727  0D57  1683               	bsf	3,5	;RP0=1, select bank1
  7728  0D58  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
  7729  0D59  3A80               	xorlw	128
  7730  0D5A  00FF               	movwf	127
  7731  0D5B  3080               	movlw	128
  7732  0D5C  027F               	subwf	127,w
  7733  0D5D  1D03               	skipz
  7734  0D5E  2D61               	goto	u416_25
  7735  0D5F  30FF               	movlw	255
  7736  0D60  0225               	subwf	___fldiv@new_exp^(0+128),w
  7737  0D61                     u416_25:
  7738  0D61  1C03               	skipc
  7739  0D62  2D72               	goto	i1l3443
  7740  0D63  30FF               	movlw	255
  7741  0D64  1683               	bsf	3,5	;RP0=1, select bank1
  7742  0D65  1303               	bcf	3,6	;RP1=0, select bank1
  7743  0D66  00A5               	movwf	___fldiv@new_exp^(0+128)
  7744  0D67  3000               	movlw	0
  7745  0D68  00A6               	movwf	(___fldiv@new_exp^(0+128)+1)
  7746  0D69  3000               	movlw	0
  7747  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  7748  0D6B  00DF               	movwf	___fldiv@b+3
  7749  0D6C  3000               	movlw	0
  7750  0D6D  00DE               	movwf	___fldiv@b+2
  7751  0D6E  3000               	movlw	0
  7752  0D6F  00DD               	movwf	___fldiv@b+1
  7753  0D70  3000               	movlw	0
  7754  0D71  00DC               	movwf	___fldiv@b
  7755  0D72                     i1l3443:
  7756  0D72  1683               	bsf	3,5	;RP0=1, select bank1
  7757  0D73  1303               	bcf	3,6	;RP1=0, select bank1
  7758  0D74  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
  7759  0D75  3A80               	xorlw	128
  7760  0D76  00FF               	movwf	127
  7761  0D77  3080               	movlw	128
  7762  0D78  027F               	subwf	127,w
  7763  0D79  1D03               	skipz
  7764  0D7A  2D7D               	goto	u417_25
  7765  0D7B  3001               	movlw	1
  7766  0D7C  0225               	subwf	___fldiv@new_exp^(0+128),w
  7767  0D7D                     u417_25:
  7768  0D7D  1803               	skipnc
  7769  0D7E  2D8E               	goto	i1l880
  7770  0D7F  1683               	bsf	3,5	;RP0=1, select bank1
  7771  0D80  1303               	bcf	3,6	;RP1=0, select bank1
  7772  0D81  01A5               	clrf	___fldiv@new_exp^(0+128)
  7773  0D82  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
  7774  0D83  3000               	movlw	0
  7775  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  7776  0D85  00DF               	movwf	___fldiv@b+3
  7777  0D86  3000               	movlw	0
  7778  0D87  00DE               	movwf	___fldiv@b+2
  7779  0D88  3000               	movlw	0
  7780  0D89  00DD               	movwf	___fldiv@b+1
  7781  0D8A  3000               	movlw	0
  7782  0D8B  00DC               	movwf	___fldiv@b
  7783  0D8C  1683               	bsf	3,5	;RP0=1, select bank1
  7784  0D8D  01A4               	clrf	___fldiv@sign^(0+128)
  7785  0D8E                     i1l880:
  7786  0D8E  1683               	bsf	3,5	;RP0=1, select bank1
  7787  0D8F  1303               	bcf	3,6	;RP1=0, select bank1
  7788  0D90  0825               	movf	___fldiv@new_exp^(0+128),w
  7789  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  7790  0D92  00E0               	movwf	??___fldiv
  7791  0D93  0860               	movf	??___fldiv,w
  7792  0D94  1683               	bsf	3,5	;RP0=1, select bank1
  7793  0D95  00AB               	movwf	___fldiv@bexp^(0+128)
  7794  0D96  1C2B               	btfss	___fldiv@bexp^(0+128),0
  7795  0D97  2D9B               	goto	i1l3455
  7796  0D98  1283               	bcf	3,5	;RP0=0, select bank0
  7797  0D99  17DE               	bsf	___fldiv@b+2,7
  7798  0D9A  2DA0               	goto	i1l882
  7799  0D9B                     i1l3455:
  7800  0D9B  307F               	movlw	127
  7801  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  7802  0D9D  00E0               	movwf	??___fldiv
  7803  0D9E  0860               	movf	??___fldiv,w
  7804  0D9F  05DE               	andwf	___fldiv@b+2,f
  7805  0DA0                     i1l882:
  7806  0DA0  1683               	bsf	3,5	;RP0=1, select bank1
  7807  0DA1  082B               	movf	___fldiv@bexp^(0+128),w
  7808  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  7809  0DA3  00E0               	movwf	??___fldiv
  7810  0DA4  1003               	clrc
  7811  0DA5  0C60               	rrf	??___fldiv,w
  7812  0DA6  00E1               	movwf	??___fldiv+1
  7813  0DA7  0861               	movf	??___fldiv+1,w
  7814  0DA8  00DF               	movwf	___fldiv@b+3
  7815  0DA9  2C12               	goto	L22
  7816  0DAA                     __end_of___fldiv:
  7817                           
  7818                           	psect	text35
  7819  0AAE                     __ptext35:	
  7820 ;; *************** function _log *****************
  7821 ;; Defined at:
  7822 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\log.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  x               4   72[BANK0 ] unsigned char 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  exponent        2   77[BANK0 ] int 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;                  4   72[BANK0 ] int 
  7829 ;; Registers used:
  7830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7831 ;; Tracked objects:
  7832 ;;		On entry : 300/0
  7833 ;;		On exit  : 300/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7836 ;;      Params:         0       4       0       0       0
  7837 ;;      Locals:         0       2       0       0       0
  7838 ;;      Temps:          0       1       0       0       0
  7839 ;;      Totals:         0       7       0       0       0
  7840 ;;Total ram usage:        7 bytes
  7841 ;; Hardware stack levels used: 1
  7842 ;; Hardware stack levels required when called: 3
  7843 ;; This function calls:
  7844 ;;		___fladd
  7845 ;;		___fleq
  7846 ;;		___flge
  7847 ;;		___flmul
  7848 ;;		___xxtofl
  7849 ;;		_eval_poly
  7850 ;;		_frexp
  7851 ;; This function is called by:
  7852 ;;		_slave
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856  0AAE                     _log:	
  7857                           ;psect for function _log
  7858                           
  7859                           
  7860                           ;incstack = 0
  7861                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7862  0AAE  086B               	movf	log@x+3,w
  7863  0AAF  00F3               	movwf	___flge@ff1+3
  7864  0AB0  086A               	movf	log@x+2,w
  7865  0AB1  00F2               	movwf	___flge@ff1+2
  7866  0AB2  0869               	movf	log@x+1,w
  7867  0AB3  00F1               	movwf	___flge@ff1+1
  7868  0AB4  0868               	movf	log@x,w
  7869  0AB5  00F0               	movwf	___flge@ff1
  7870  0AB6  3000               	movlw	0
  7871  0AB7  00F7               	movwf	___flge@ff2+3
  7872  0AB8  3000               	movlw	0
  7873  0AB9  00F6               	movwf	___flge@ff2+2
  7874  0ABA  3000               	movlw	0
  7875  0ABB  00F5               	movwf	___flge@ff2+1
  7876  0ABC  3000               	movlw	0
  7877  0ABD  00F4               	movwf	___flge@ff2
  7878  0ABE  160A  118A  2598  120A  158A  	fcall	___flge
  7879  0AC3  1803               	btfsc	3,0
  7880  0AC4  2AD4               	goto	i1l3587
  7881  0AC5  3021               	movlw	33
  7882  0AC6  1683               	bsf	3,5	;RP0=1, select bank1
  7883  0AC7  00E0               	movwf	_errno^(0+128)
  7884  0AC8  3000               	movlw	0
  7885  0AC9  00E1               	movwf	(_errno^(0+128)+1)
  7886  0ACA  3000               	movlw	0
  7887  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  7888  0ACC  00EB               	movwf	?_log+3
  7889  0ACD  3000               	movlw	0
  7890  0ACE  00EA               	movwf	?_log+2
  7891  0ACF  3000               	movlw	0
  7892  0AD0  00E9               	movwf	?_log+1
  7893  0AD1  3000               	movlw	0
  7894  0AD2  00E8               	movwf	?_log
  7895  0AD3  0008               	return
  7896  0AD4                     i1l3587:
  7897  0AD4  086B               	movf	log@x+3,w
  7898  0AD5  00F3               	movwf	___fleq@ff1+3
  7899  0AD6  086A               	movf	log@x+2,w
  7900  0AD7  00F2               	movwf	___fleq@ff1+2
  7901  0AD8  0869               	movf	log@x+1,w
  7902  0AD9  00F1               	movwf	___fleq@ff1+1
  7903  0ADA  0868               	movf	log@x,w
  7904  0ADB  00F0               	movwf	___fleq@ff1
  7905  0ADC  3000               	movlw	0
  7906  0ADD  00F7               	movwf	___fleq@ff2+3
  7907  0ADE  3000               	movlw	0
  7908  0ADF  00F6               	movwf	___fleq@ff2+2
  7909  0AE0  3000               	movlw	0
  7910  0AE1  00F5               	movwf	___fleq@ff2+1
  7911  0AE2  3000               	movlw	0
  7912  0AE3  00F4               	movwf	___fleq@ff2
  7913  0AE4  160A  118A  21D6  120A  158A  	fcall	___fleq
  7914  0AE9  1C03               	btfss	3,0
  7915  0AEA  2AFA               	goto	i1l3593
  7916  0AEB  3022               	movlw	34
  7917  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  7918  0AED  00E0               	movwf	_errno^(0+128)
  7919  0AEE  3000               	movlw	0
  7920  0AEF  00E1               	movwf	(_errno^(0+128)+1)
  7921  0AF0  3000               	movlw	0
  7922  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  7923  0AF2  00EB               	movwf	?_log+3
  7924  0AF3  3000               	movlw	0
  7925  0AF4  00EA               	movwf	?_log+2
  7926  0AF5  3000               	movlw	0
  7927  0AF6  00E9               	movwf	?_log+1
  7928  0AF7  3000               	movlw	0
  7929  0AF8  00E8               	movwf	?_log
  7930  0AF9  0008               	return
  7931  0AFA                     i1l3593:
  7932  0AFA  30BF               	movlw	191
  7933  0AFB  00AD               	movwf	___fladd@b+3
  7934  0AFC  3080               	movlw	128
  7935  0AFD  00AC               	movwf	___fladd@b+2
  7936  0AFE  3000               	movlw	0
  7937  0AFF  00AB               	movwf	___fladd@b+1
  7938  0B00  3000               	movlw	0
  7939  0B01  00AA               	movwf	___fladd@b
  7940  0B02  3040               	movlw	64
  7941  0B03  00C1               	movwf	___flmul@b+3
  7942  0B04  3000               	movlw	0
  7943  0B05  00C0               	movwf	___flmul@b+2
  7944  0B06  3000               	movlw	0
  7945  0B07  00BF               	movwf	___flmul@b+1
  7946  0B08  3000               	movlw	0
  7947  0B09  00BE               	movwf	___flmul@b
  7948  0B0A  306D               	movlw	(low (log@exponent| 0))& (0+255)
  7949  0B0B  00EC               	movwf	??_log
  7950  0B0C  086C               	movf	??_log,w
  7951  0B0D  00A4               	movwf	frexp@eptr
  7952  0B0E  086B               	movf	log@x+3,w
  7953  0B0F  00A3               	movwf	frexp@value+3
  7954  0B10  086A               	movf	log@x+2,w
  7955  0B11  00A2               	movwf	frexp@value+2
  7956  0B12  0869               	movf	log@x+1,w
  7957  0B13  00A1               	movwf	frexp@value+1
  7958  0B14  0868               	movf	log@x,w
  7959  0B15  00A0               	movwf	frexp@value
  7960  0B16  160A  118A  221E  120A  158A  	fcall	_frexp
  7961  0B1B  0823               	movf	?_frexp+3,w
  7962  0B1C  00C5               	movwf	___flmul@a+3
  7963  0B1D  0822               	movf	?_frexp+2,w
  7964  0B1E  00C4               	movwf	___flmul@a+2
  7965  0B1F  0821               	movf	?_frexp+1,w
  7966  0B20  00C3               	movwf	___flmul@a+1
  7967  0B21  0820               	movf	?_frexp,w
  7968  0B22  00C2               	movwf	___flmul@a
  7969  0B23  120A  118A  2052  120A  158A  	fcall	___flmul
  7970  0B28  0841               	movf	?___flmul+3,w
  7971  0B29  00B1               	movwf	___fladd@a+3
  7972  0B2A  0840               	movf	?___flmul+2,w
  7973  0B2B  00B0               	movwf	___fladd@a+2
  7974  0B2C  083F               	movf	?___flmul+1,w
  7975  0B2D  00AF               	movwf	___fladd@a+1
  7976  0B2E  083E               	movf	?___flmul,w
  7977  0B2F  00AE               	movwf	___fladd@a
  7978  0B30  120A  118A  25B7  120A  158A  	fcall	___fladd
  7979  0B35  082D               	movf	?___fladd+3,w
  7980  0B36  00EB               	movwf	log@x+3
  7981  0B37  082C               	movf	?___fladd+2,w
  7982  0B38  00EA               	movwf	log@x+2
  7983  0B39  082B               	movf	?___fladd+1,w
  7984  0B3A  00E9               	movwf	log@x+1
  7985  0B3B  082A               	movf	?___fladd,w
  7986  0B3C  00E8               	movwf	log@x
  7987  0B3D  30FF               	movlw	255
  7988  0B3E  07ED               	addwf	log@exponent,f
  7989  0B3F  1803               	skipnc
  7990  0B40  0AEE               	incf	log@exponent+1,f
  7991  0B41  30FF               	movlw	255
  7992  0B42  07EE               	addwf	log@exponent+1,f
  7993  0B43  086B               	movf	log@x+3,w
  7994  0B44  00DB               	movwf	eval_poly@x+3
  7995  0B45  086A               	movf	log@x+2,w
  7996  0B46  00DA               	movwf	eval_poly@x+2
  7997  0B47  0869               	movf	log@x+1,w
  7998  0B48  00D9               	movwf	eval_poly@x+1
  7999  0B49  0868               	movf	log@x,w
  8000  0B4A  00D8               	movwf	eval_poly@x
  8001  0B4B  3001               	movlw	(low ((log@coeff-__stringbase)| (0+32768)))& (0+255)
  8002  0B4C  00EC               	movwf	??_log
  8003  0B4D  086C               	movf	??_log,w
  8004  0B4E  00DC               	movwf	eval_poly@d
  8005  0B4F  3008               	movlw	8
  8006  0B50  00DD               	movwf	eval_poly@n
  8007  0B51  3000               	movlw	0
  8008  0B52  00DE               	movwf	eval_poly@n+1
  8009  0B53  160A  118A  262B  120A  158A  	fcall	_eval_poly
  8010  0B58  085B               	movf	?_eval_poly+3,w
  8011  0B59  00EB               	movwf	log@x+3
  8012  0B5A  085A               	movf	?_eval_poly+2,w
  8013  0B5B  00EA               	movwf	log@x+2
  8014  0B5C  0859               	movf	?_eval_poly+1,w
  8015  0B5D  00E9               	movwf	log@x+1
  8016  0B5E  0858               	movf	?_eval_poly,w
  8017  0B5F  00E8               	movwf	log@x
  8018  0B60  086B               	movf	log@x+3,w
  8019  0B61  00AD               	movwf	___fladd@b+3
  8020  0B62  086A               	movf	log@x+2,w
  8021  0B63  00AC               	movwf	___fladd@b+2
  8022  0B64  0869               	movf	log@x+1,w
  8023  0B65  00AB               	movwf	___fladd@b+1
  8024  0B66  0868               	movf	log@x,w
  8025  0B67  00AA               	movwf	___fladd@b
  8026  0B68  303F               	movlw	63
  8027  0B69  00C1               	movwf	___flmul@b+3
  8028  0B6A  3031               	movlw	49
  8029  0B6B  00C0               	movwf	___flmul@b+2
  8030  0B6C  3072               	movlw	114
  8031  0B6D  00BF               	movwf	___flmul@b+1
  8032  0B6E  3018               	movlw	24
  8033  0B6F  00BE               	movwf	___flmul@b
  8034  0B70  086D               	movf	log@exponent,w
  8035  0B71  00F9               	movwf	___xxtofl@val
  8036  0B72  086E               	movf	log@exponent+1,w
  8037  0B73  00FA               	movwf	___xxtofl@val+1
  8038  0B74  3000               	movlw	0
  8039  0B75  1BFA               	btfsc	___xxtofl@val+1,7
  8040  0B76  30FF               	movlw	255
  8041  0B77  00FB               	movwf	___xxtofl@val+2
  8042  0B78  00FC               	movwf	___xxtofl@val+3
  8043  0B79  3001               	movlw	1
  8044  0B7A  160A  118A  275C  120A  158A  	fcall	___xxtofl
  8045  0B7F  087C               	movf	?___xxtofl+3,w
  8046  0B80  00C5               	movwf	___flmul@a+3
  8047  0B81  087B               	movf	?___xxtofl+2,w
  8048  0B82  00C4               	movwf	___flmul@a+2
  8049  0B83  087A               	movf	?___xxtofl+1,w
  8050  0B84  00C3               	movwf	___flmul@a+1
  8051  0B85  0879               	movf	?___xxtofl,w
  8052  0B86  00C2               	movwf	___flmul@a
  8053  0B87  120A  118A  2052  120A  158A  	fcall	___flmul
  8054  0B8C  0841               	movf	?___flmul+3,w
  8055  0B8D  00B1               	movwf	___fladd@a+3
  8056  0B8E  0840               	movf	?___flmul+2,w
  8057  0B8F  00B0               	movwf	___fladd@a+2
  8058  0B90  083F               	movf	?___flmul+1,w
  8059  0B91  00AF               	movwf	___fladd@a+1
  8060  0B92  083E               	movf	?___flmul,w
  8061  0B93  00AE               	movwf	___fladd@a
  8062  0B94  120A  118A  25B7   	fcall	___fladd
  8063  0B97  082D               	movf	?___fladd+3,w
  8064  0B98  00EB               	movwf	?_log+3
  8065  0B99  082C               	movf	?___fladd+2,w
  8066  0B9A  00EA               	movwf	?_log+2
  8067  0B9B  082B               	movf	?___fladd+1,w
  8068  0B9C  00E9               	movwf	?_log+1
  8069  0B9D  082A               	movf	?___fladd,w
  8070  0B9E  00E8               	movwf	?_log
  8071  0B9F  0008               	return
  8072  0BA0                     __end_of_log:
  8073                           
  8074                           	psect	text36
  8075  121E                     __ptext36:	
  8076 ;; *************** function _frexp *****************
  8077 ;; Defined at:
  8078 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\frexp.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  value           4    0[BANK0 ] int 
  8081 ;;  eptr            1    4[BANK0 ] PTR int 
  8082 ;;		 -> log@exponent(2), 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;		None
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  4    0[BANK0 ] PTR int 
  8087 ;; Registers used:
  8088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 300/0
  8091 ;;		On exit  : B00/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8094 ;;      Params:         0       5       0       0       0
  8095 ;;      Locals:         0       0       0       0       0
  8096 ;;      Temps:          2       0       0       0       0
  8097 ;;      Totals:         2       5       0       0       0
  8098 ;;Total ram usage:        7 bytes
  8099 ;; Hardware stack levels used: 1
  8100 ;; Hardware stack levels required when called: 1
  8101 ;; This function calls:
  8102 ;;		___fleq
  8103 ;; This function is called by:
  8104 ;;		_log
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108  121E                     _frexp:	
  8109                           ;psect for function _frexp
  8110                           
  8111                           
  8112                           ;incstack = 0
  8113                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8114  121E  0823               	movf	frexp@value+3,w
  8115  121F  00F3               	movwf	___fleq@ff1+3
  8116  1220  0822               	movf	frexp@value+2,w
  8117  1221  00F2               	movwf	___fleq@ff1+2
  8118  1222  0821               	movf	frexp@value+1,w
  8119  1223  00F1               	movwf	___fleq@ff1+1
  8120  1224  0820               	movf	frexp@value,w
  8121  1225  00F0               	movwf	___fleq@ff1
  8122  1226  3000               	movlw	0
  8123  1227  00F7               	movwf	___fleq@ff2+3
  8124  1228  3000               	movlw	0
  8125  1229  00F6               	movwf	___fleq@ff2+2
  8126  122A  3000               	movlw	0
  8127  122B  00F5               	movwf	___fleq@ff2+1
  8128  122C  3000               	movlw	0
  8129  122D  00F4               	movwf	___fleq@ff2
  8130  122E  160A  118A  21D6  160A  118A  	fcall	___fleq
  8131  1233  1C03               	btfss	3,0
  8132  1234  2A44               	goto	i1l3513
  8133  1235  0824               	movf	frexp@eptr,w
  8134  1236  0084               	movwf	4
  8135  1237  1383               	bcf	3,7	;select IRP bank0
  8136  1238  0180               	clrf	0
  8137  1239  0A84               	incf	4,f
  8138  123A  0180               	clrf	0
  8139  123B  3000               	movlw	0
  8140  123C  00A3               	movwf	?_frexp+3
  8141  123D  3000               	movlw	0
  8142  123E  00A2               	movwf	?_frexp+2
  8143  123F  3000               	movlw	0
  8144  1240  00A1               	movwf	?_frexp+1
  8145  1241  3000               	movlw	0
  8146  1242  00A0               	movwf	?_frexp
  8147  1243  0008               	return
  8148  1244                     i1l3513:
  8149  1244  0823               	movf	frexp@value+3,w
  8150  1245  397F               	andlw	127
  8151  1246  00FC               	movwf	??_frexp
  8152  1247  01FD               	clrf	??_frexp+1
  8153  1248  1003               	clrc
  8154  1249  0DFC               	rlf	??_frexp,f
  8155  124A  0DFD               	rlf	??_frexp+1,f
  8156  124B  0824               	movf	frexp@eptr,w
  8157  124C  0084               	movwf	4
  8158  124D  087C               	movf	??_frexp,w
  8159  124E  1383               	bcf	3,7	;select IRP bank0
  8160  124F  0080               	movwf	0
  8161  1250  0A84               	incf	4,f
  8162  1251  087D               	movf	??_frexp+1,w
  8163  1252  0080               	movwf	0
  8164  1253  0D22               	rlf	frexp@value+2,w
  8165  1254  0D22               	rlf	frexp@value+2,w
  8166  1255  3901               	andlw	1
  8167  1256  00FC               	movwf	??_frexp
  8168  1257  01FD               	clrf	??_frexp+1
  8169  1258  0824               	movf	frexp@eptr,w
  8170  1259  0084               	movwf	4
  8171  125A  087C               	movf	??_frexp,w
  8172  125B  0480               	iorwf	0,f
  8173  125C  0A84               	incf	4,f
  8174  125D  087D               	movf	??_frexp+1,w
  8175  125E  0480               	iorwf	0,f
  8176  125F  0824               	movf	frexp@eptr,w
  8177  1260  0084               	movwf	4
  8178  1261  3082               	movlw	130
  8179  1262  0780               	addwf	0,f
  8180  1263  0F84               	incfsz	4,f
  8181  1264  0800               	movf	0,w
  8182  1265  1803               	skipnc
  8183  1266  0A00               	incf	0,w
  8184  1267  00FF               	movwf	127
  8185  1268  30FF               	movlw	255
  8186  1269  077F               	addwf	127,w
  8187  126A  0080               	movwf	0
  8188  126B  0384               	decf	4,f
  8189  126C  0823               	movf	frexp@value+3,w
  8190  126D  3980               	andlw	-128
  8191  126E  383F               	iorlw	63
  8192  126F  00A3               	movwf	frexp@value+3
  8193  1270  13A2               	bcf	frexp@value+2,7
  8194  1271  0008               	return
  8195  1272                     __end_of_frexp:
  8196                           
  8197                           	psect	text37
  8198  11D6                     __ptext37:	
  8199 ;; *************** function ___fleq *****************
  8200 ;; Defined at:
  8201 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\fleq.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  ff1             4    0[COMMON] PTR int 
  8204 ;;  ff2             4    4[COMMON] PTR int 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;		None
  8207 ;; Return value:  Size  Location     Type
  8208 ;;		None               void
  8209 ;; Registers used:
  8210 ;;		wreg, status,2, status,0
  8211 ;; Tracked objects:
  8212 ;;		On entry : 300/0
  8213 ;;		On exit  : 300/0
  8214 ;;		Unchanged: 300/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8216 ;;      Params:         8       0       0       0       0
  8217 ;;      Locals:         0       0       0       0       0
  8218 ;;      Temps:          4       0       0       0       0
  8219 ;;      Totals:        12       0       0       0       0
  8220 ;;Total ram usage:       12 bytes
  8221 ;; Hardware stack levels used: 1
  8222 ;; This function calls:
  8223 ;;		Nothing
  8224 ;; This function is called by:
  8225 ;;		_log
  8226 ;;		_frexp
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230  11D6                     ___fleq:	
  8231                           ;psect for function ___fleq
  8232                           
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  8236  11D6  3000               	movlw	0
  8237  11D7  0570               	andwf	___fleq@ff1,w
  8238  11D8  00F8               	movwf	??___fleq
  8239  11D9  3000               	movlw	0
  8240  11DA  0571               	andwf	___fleq@ff1+1,w
  8241  11DB  00F9               	movwf	??___fleq+1
  8242  11DC  3080               	movlw	128
  8243  11DD  0572               	andwf	___fleq@ff1+2,w
  8244  11DE  00FA               	movwf	??___fleq+2
  8245  11DF  307F               	movlw	127
  8246  11E0  0573               	andwf	___fleq@ff1+3,w
  8247  11E1  00FB               	movwf	??___fleq+3
  8248  11E2  087B               	movf	??___fleq+3,w
  8249  11E3  047A               	iorwf	??___fleq+2,w
  8250  11E4  0479               	iorwf	??___fleq+1,w
  8251  11E5  0478               	iorwf	??___fleq,w
  8252  11E6  1D03               	skipz
  8253  11E7  29F0               	goto	i1l678
  8254  11E8  3000               	movlw	0
  8255  11E9  00F3               	movwf	___fleq@ff1+3
  8256  11EA  3000               	movlw	0
  8257  11EB  00F2               	movwf	___fleq@ff1+2
  8258  11EC  3000               	movlw	0
  8259  11ED  00F1               	movwf	___fleq@ff1+1
  8260  11EE  3000               	movlw	0
  8261  11EF  00F0               	movwf	___fleq@ff1
  8262  11F0                     i1l678:
  8263  11F0  3000               	movlw	0
  8264  11F1  0574               	andwf	___fleq@ff2,w
  8265  11F2  00F8               	movwf	??___fleq
  8266  11F3  3000               	movlw	0
  8267  11F4  0575               	andwf	___fleq@ff2+1,w
  8268  11F5  00F9               	movwf	??___fleq+1
  8269  11F6  3080               	movlw	128
  8270  11F7  0576               	andwf	___fleq@ff2+2,w
  8271  11F8  00FA               	movwf	??___fleq+2
  8272  11F9  307F               	movlw	127
  8273  11FA  0577               	andwf	___fleq@ff2+3,w
  8274  11FB  00FB               	movwf	??___fleq+3
  8275  11FC  087B               	movf	??___fleq+3,w
  8276  11FD  047A               	iorwf	??___fleq+2,w
  8277  11FE  0479               	iorwf	??___fleq+1,w
  8278  11FF  0478               	iorwf	??___fleq,w
  8279  1200  1D03               	skipz
  8280  1201  2A0A               	goto	i1l679
  8281  1202  3000               	movlw	0
  8282  1203  00F7               	movwf	___fleq@ff2+3
  8283  1204  3000               	movlw	0
  8284  1205  00F6               	movwf	___fleq@ff2+2
  8285  1206  3000               	movlw	0
  8286  1207  00F5               	movwf	___fleq@ff2+1
  8287  1208  3000               	movlw	0
  8288  1209  00F4               	movwf	___fleq@ff2
  8289  120A                     i1l679:
  8290  120A  0877               	movf	___fleq@ff2+3,w
  8291  120B  0673               	xorwf	___fleq@ff1+3,w
  8292  120C  1D03               	skipz
  8293  120D  2A18               	goto	u271_25
  8294  120E  0876               	movf	___fleq@ff2+2,w
  8295  120F  0672               	xorwf	___fleq@ff1+2,w
  8296  1210  1D03               	skipz
  8297  1211  2A18               	goto	u271_25
  8298  1212  0875               	movf	___fleq@ff2+1,w
  8299  1213  0671               	xorwf	___fleq@ff1+1,w
  8300  1214  1D03               	skipz
  8301  1215  2A18               	goto	u271_25
  8302  1216  0874               	movf	___fleq@ff2,w
  8303  1217  0670               	xorwf	___fleq@ff1,w
  8304  1218                     u271_25:
  8305  1218  1903               	skipnz
  8306  1219  2A1C               	goto	i1l2687
  8307  121A  1003               	clrc
  8308  121B  0008               	return
  8309  121C                     i1l2687:
  8310  121C  1403               	setc
  8311  121D  0008               	return
  8312  121E                     __end_of___fleq:
  8313                           
  8314                           	psect	text38
  8315  162B                     __ptext38:	
  8316 ;; *************** function _eval_poly *****************
  8317 ;; Defined at:
  8318 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\evalpoly.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  x               4   56[BANK0 ] PTR int 
  8321 ;;  d               1   60[BANK0 ] PTR const 
  8322 ;;		 -> log@coeff(36), 
  8323 ;;  n               2   61[BANK0 ] int 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  res             4   68[BANK0 ] int 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  4   56[BANK0 ] int 
  8328 ;; Registers used:
  8329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 300/0
  8332 ;;		On exit  : 300/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8335 ;;      Params:         0       7       0       0       0
  8336 ;;      Locals:         0       4       0       0       0
  8337 ;;      Temps:          0       5       0       0       0
  8338 ;;      Totals:         0      16       0       0       0
  8339 ;;Total ram usage:       16 bytes
  8340 ;; Hardware stack levels used: 1
  8341 ;; Hardware stack levels required when called: 2
  8342 ;; This function calls:
  8343 ;;		___fladd
  8344 ;;		___flmul
  8345 ;; This function is called by:
  8346 ;;		_log
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350  162B                     _eval_poly:	
  8351                           ;psect for function _eval_poly
  8352                           
  8353                           
  8354                           ;incstack = 0
  8355 ;; using string table level
  8356                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8357  162B  085D               	movf	eval_poly@n,w
  8358  162C  00DF               	movwf	??_eval_poly
  8359  162D  3001               	movlw	1
  8360  162E                     u434_25:
  8361  162E  1003               	clrc
  8362  162F  0DDF               	rlf	??_eval_poly,f
  8363  1630  3EFF               	addlw	-1
  8364  1631  1D03               	skipz
  8365  1632  2E2E               	goto	u434_25
  8366  1633  1003               	clrc
  8367  1634  0D5F               	rlf	??_eval_poly,w
  8368  1635  075C               	addwf	eval_poly@d,w
  8369  1636  0084               	movwf	4
  8370  1637  160A  118A  2000  160A  118A  	fcall	stringdir
  8371  163C  00E0               	movwf	??_eval_poly+1
  8372  163D  160A  118A  2000  160A  118A  	fcall	stringdir
  8373  1642  00E1               	movwf	??_eval_poly+2
  8374  1643  160A  118A  2000  160A  118A  	fcall	stringdir
  8375  1648  00E2               	movwf	??_eval_poly+3
  8376  1649  160A  118A  2000  160A  118A  	fcall	stringdir
  8377  164E  00E3               	movwf	??_eval_poly+4
  8378  164F  0863               	movf	??_eval_poly+4,w
  8379  1650  00E7               	movwf	eval_poly@res+3
  8380  1651  0862               	movf	??_eval_poly+3,w
  8381  1652  00E6               	movwf	eval_poly@res+2
  8382  1653  0861               	movf	??_eval_poly+2,w
  8383  1654  00E5               	movwf	eval_poly@res+1
  8384  1655  0860               	movf	??_eval_poly+1,w
  8385  1656                     L23:
  8386  1656  00E4               	movwf	eval_poly@res
  8387  1657  085D               	movf	eval_poly@n,w
  8388  1658  045E               	iorwf	eval_poly@n+1,w
  8389  1659  1903               	btfsc	3,2
  8390  165A  2EB7               	goto	i1l3531
  8391  165B  30FF               	movlw	255
  8392  165C  07DD               	addwf	eval_poly@n,f
  8393  165D  1803               	skipnc
  8394  165E  0ADE               	incf	eval_poly@n+1,f
  8395  165F  30FF               	movlw	255
  8396  1660  07DE               	addwf	eval_poly@n+1,f
  8397  1661  085D               	movf	eval_poly@n,w
  8398  1662  00DF               	movwf	??_eval_poly
  8399  1663  3001               	movlw	1
  8400  1664                     u435_25:
  8401  1664  1003               	clrc
  8402  1665  0DDF               	rlf	??_eval_poly,f
  8403  1666  3EFF               	addlw	-1
  8404  1667  1D03               	skipz
  8405  1668  2E64               	goto	u435_25
  8406  1669  1003               	clrc
  8407  166A  0D5F               	rlf	??_eval_poly,w
  8408  166B  075C               	addwf	eval_poly@d,w
  8409  166C  0084               	movwf	4
  8410  166D  160A  118A  2000  160A  118A  	fcall	stringdir
  8411  1672  00E0               	movwf	??_eval_poly+1
  8412  1673  160A  118A  2000  160A  118A  	fcall	stringdir
  8413  1678  00E1               	movwf	??_eval_poly+2
  8414  1679  160A  118A  2000  160A  118A  	fcall	stringdir
  8415  167E  00E2               	movwf	??_eval_poly+3
  8416  167F  160A  118A  2000  160A  118A  	fcall	stringdir
  8417  1684  00E3               	movwf	??_eval_poly+4
  8418  1685  0863               	movf	??_eval_poly+4,w
  8419  1686  00AD               	movwf	___fladd@b+3
  8420  1687  0862               	movf	??_eval_poly+3,w
  8421  1688  00AC               	movwf	___fladd@b+2
  8422  1689  0861               	movf	??_eval_poly+2,w
  8423  168A  00AB               	movwf	___fladd@b+1
  8424  168B  0860               	movf	??_eval_poly+1,w
  8425  168C  00AA               	movwf	___fladd@b
  8426  168D  0867               	movf	eval_poly@res+3,w
  8427  168E  00C1               	movwf	___flmul@b+3
  8428  168F  0866               	movf	eval_poly@res+2,w
  8429  1690  00C0               	movwf	___flmul@b+2
  8430  1691  0865               	movf	eval_poly@res+1,w
  8431  1692  00BF               	movwf	___flmul@b+1
  8432  1693  0864               	movf	eval_poly@res,w
  8433  1694  00BE               	movwf	___flmul@b
  8434  1695  085B               	movf	eval_poly@x+3,w
  8435  1696  00C5               	movwf	___flmul@a+3
  8436  1697  085A               	movf	eval_poly@x+2,w
  8437  1698  00C4               	movwf	___flmul@a+2
  8438  1699  0859               	movf	eval_poly@x+1,w
  8439  169A  00C3               	movwf	___flmul@a+1
  8440  169B  0858               	movf	eval_poly@x,w
  8441  169C  00C2               	movwf	___flmul@a
  8442  169D  120A  118A  2052  160A  118A  	fcall	___flmul
  8443  16A2  0841               	movf	?___flmul+3,w
  8444  16A3  00B1               	movwf	___fladd@a+3
  8445  16A4  0840               	movf	?___flmul+2,w
  8446  16A5  00B0               	movwf	___fladd@a+2
  8447  16A6  083F               	movf	?___flmul+1,w
  8448  16A7  00AF               	movwf	___fladd@a+1
  8449  16A8  083E               	movf	?___flmul,w
  8450  16A9  00AE               	movwf	___fladd@a
  8451  16AA  120A  118A  25B7  160A  118A  	fcall	___fladd
  8452  16AF  082D               	movf	?___fladd+3,w
  8453  16B0  00E7               	movwf	eval_poly@res+3
  8454  16B1  082C               	movf	?___fladd+2,w
  8455  16B2  00E6               	movwf	eval_poly@res+2
  8456  16B3  082B               	movf	?___fladd+1,w
  8457  16B4  00E5               	movwf	eval_poly@res+1
  8458  16B5  082A               	movf	?___fladd,w
  8459  16B6  2E56               	goto	L23
  8460  16B7                     i1l3531:
  8461  16B7  0867               	movf	eval_poly@res+3,w
  8462  16B8  00DB               	movwf	?_eval_poly+3
  8463  16B9  0866               	movf	eval_poly@res+2,w
  8464  16BA  00DA               	movwf	?_eval_poly+2
  8465  16BB  0865               	movf	eval_poly@res+1,w
  8466  16BC  00D9               	movwf	?_eval_poly+1
  8467  16BD  0864               	movf	eval_poly@res,w
  8468  16BE  00D8               	movwf	?_eval_poly
  8469  16BF  0008               	return
  8470  16C0                     __end_of_eval_poly:
  8471                           
  8472                           	psect	text39
  8473  0052                     __ptext39:	
  8474 ;; *************** function ___flmul *****************
  8475 ;; Defined at:
  8476 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\sprcmul.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;  b               4   30[BANK0 ] int 
  8479 ;;  a               4   34[BANK0 ] int 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  prod            4   50[BANK0 ] struct .
  8482 ;;  grs             4   45[BANK0 ] unsigned long 
  8483 ;;  temp            2   54[BANK0 ] struct .
  8484 ;;  bexp            1   49[BANK0 ] unsigned char 
  8485 ;;  aexp            1   44[BANK0 ] unsigned char 
  8486 ;;  sign            1   43[BANK0 ] unsigned char 
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  4   30[BANK0 ] unsigned char 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : 300/0
  8493 ;;		On exit  : 300/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8496 ;;      Params:         0       8       0       0       0
  8497 ;;      Locals:         0      13       0       0       0
  8498 ;;      Temps:          0       5       0       0       0
  8499 ;;      Totals:         0      26       0       0       0
  8500 ;;Total ram usage:       26 bytes
  8501 ;; Hardware stack levels used: 1
  8502 ;; Hardware stack levels required when called: 1
  8503 ;; This function calls:
  8504 ;;		__Umul8_16
  8505 ;; This function is called by:
  8506 ;;		_slave
  8507 ;;		_map
  8508 ;;		_log
  8509 ;;		_eval_poly
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513  0052                     ___flmul:	
  8514                           ;psect for function ___flmul
  8515                           
  8516                           
  8517                           ;incstack = 0
  8518                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8519  0052  0841               	movf	___flmul@b+3,w
  8520  0053  3980               	andlw	128
  8521  0054  00C6               	movwf	??___flmul
  8522  0055  0846               	movf	??___flmul,w
  8523  0056  00CB               	movwf	___flmul@sign
  8524  0057  0841               	movf	___flmul@b+3,w
  8525  0058  00C6               	movwf	??___flmul
  8526  0059  0746               	addwf	??___flmul,w
  8527  005A  00C7               	movwf	??___flmul+1
  8528  005B  0847               	movf	??___flmul+1,w
  8529  005C  00D1               	movwf	___flmul@bexp
  8530  005D  1BC0               	btfsc	___flmul@b+2,7
  8531  005E  1451               	bsf	___flmul@bexp,0
  8532  005F  0851               	movf	___flmul@bexp,w
  8533  0060  1903               	btfsc	3,2
  8534  0061  286F               	goto	i1l2901
  8535  0062  0A51               	incf	___flmul@bexp,w
  8536  0063  1D03               	btfss	3,2
  8537  0064  286D               	goto	i1l2899
  8538  0065  3000               	movlw	0
  8539  0066  00C1               	movwf	___flmul@b+3
  8540  0067  3000               	movlw	0
  8541  0068  00C0               	movwf	___flmul@b+2
  8542  0069  3000               	movlw	0
  8543  006A  00BF               	movwf	___flmul@b+1
  8544  006B  3000               	movlw	0
  8545  006C  00BE               	movwf	___flmul@b
  8546  006D                     i1l2899:
  8547  006D  17C0               	bsf	___flmul@b+2,7
  8548  006E  2877               	goto	i1l2903
  8549  006F                     i1l2901:
  8550  006F  3000               	movlw	0
  8551  0070  00C1               	movwf	___flmul@b+3
  8552  0071  3000               	movlw	0
  8553  0072  00C0               	movwf	___flmul@b+2
  8554  0073  3000               	movlw	0
  8555  0074  00BF               	movwf	___flmul@b+1
  8556  0075  3000               	movlw	0
  8557  0076  00BE               	movwf	___flmul@b
  8558  0077                     i1l2903:
  8559  0077  0845               	movf	___flmul@a+3,w
  8560  0078  3980               	andlw	128
  8561  0079  00C6               	movwf	??___flmul
  8562  007A  0846               	movf	??___flmul,w
  8563  007B  06CB               	xorwf	___flmul@sign,f
  8564  007C  0845               	movf	___flmul@a+3,w
  8565  007D  00C6               	movwf	??___flmul
  8566  007E  0746               	addwf	??___flmul,w
  8567  007F  00C7               	movwf	??___flmul+1
  8568  0080  0847               	movf	??___flmul+1,w
  8569  0081  00CC               	movwf	___flmul@aexp
  8570  0082  1BC4               	btfsc	___flmul@a+2,7
  8571  0083  144C               	bsf	___flmul@aexp,0
  8572  0084  084C               	movf	___flmul@aexp,w
  8573  0085  1903               	btfsc	3,2
  8574  0086  2894               	goto	i1l2919
  8575  0087  0A4C               	incf	___flmul@aexp,w
  8576  0088  1D03               	btfss	3,2
  8577  0089  2892               	goto	i1l2917
  8578  008A  3000               	movlw	0
  8579  008B  00C5               	movwf	___flmul@a+3
  8580  008C  3000               	movlw	0
  8581  008D  00C4               	movwf	___flmul@a+2
  8582  008E  3000               	movlw	0
  8583  008F  00C3               	movwf	___flmul@a+1
  8584  0090  3000               	movlw	0
  8585  0091  00C2               	movwf	___flmul@a
  8586  0092                     i1l2917:
  8587  0092  17C4               	bsf	___flmul@a+2,7
  8588  0093  289C               	goto	i1l2921
  8589  0094                     i1l2919:
  8590  0094  3000               	movlw	0
  8591  0095  00C5               	movwf	___flmul@a+3
  8592  0096  3000               	movlw	0
  8593  0097  00C4               	movwf	___flmul@a+2
  8594  0098  3000               	movlw	0
  8595  0099  00C3               	movwf	___flmul@a+1
  8596  009A  3000               	movlw	0
  8597  009B  00C2               	movwf	___flmul@a
  8598  009C                     i1l2921:
  8599  009C  084C               	movf	___flmul@aexp,w
  8600  009D  1D03               	btfss	3,2
  8601  009E  0851               	movf	___flmul@bexp,w
  8602  009F  1D03               	btfss	3,2
  8603  00A0  28AA               	goto	i1l2929
  8604  00A1  3000               	movlw	0
  8605  00A2  00C1               	movwf	?___flmul+3
  8606  00A3  3000               	movlw	0
  8607  00A4  00C0               	movwf	?___flmul+2
  8608  00A5  3000               	movlw	0
  8609  00A6  00BF               	movwf	?___flmul+1
  8610  00A7  3000               	movlw	0
  8611  00A8  00BE               	movwf	?___flmul
  8612  00A9  0008               	return
  8613  00AA                     i1l2929:
  8614  00AA  083E               	movf	___flmul@b,w
  8615  00AB  00C6               	movwf	??___flmul
  8616  00AC  0846               	movf	??___flmul,w
  8617  00AD  00F0               	movwf	__Umul8_16@multiplicand
  8618  00AE  0844               	movf	___flmul@a+2,w
  8619  00AF  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8620  00B4  0871               	movf	?__Umul8_16+1,w
  8621  00B5  00D7               	movwf	___flmul@temp+1
  8622  00B6  0870               	movf	?__Umul8_16,w
  8623  00B7  00D6               	movwf	___flmul@temp
  8624  00B8  0856               	movf	___flmul@temp,w
  8625  00B9  00C6               	movwf	??___flmul
  8626  00BA  01C7               	clrf	??___flmul+1
  8627  00BB  01C8               	clrf	??___flmul+2
  8628  00BC  01C9               	clrf	??___flmul+3
  8629  00BD  0849               	movf	??___flmul+3,w
  8630  00BE  00D0               	movwf	___flmul@grs+3
  8631  00BF  0848               	movf	??___flmul+2,w
  8632  00C0  00CF               	movwf	___flmul@grs+2
  8633  00C1  0847               	movf	??___flmul+1,w
  8634  00C2  00CE               	movwf	___flmul@grs+1
  8635  00C3  0846               	movf	??___flmul,w
  8636  00C4  00CD               	movwf	___flmul@grs
  8637  00C5  0857               	movf	___flmul@temp+1,w
  8638  00C6  00C6               	movwf	??___flmul
  8639  00C7  01C7               	clrf	??___flmul+1
  8640  00C8  01C8               	clrf	??___flmul+2
  8641  00C9  01C9               	clrf	??___flmul+3
  8642  00CA  0849               	movf	??___flmul+3,w
  8643  00CB  00D5               	movwf	___flmul@prod+3
  8644  00CC  0848               	movf	??___flmul+2,w
  8645  00CD  00D4               	movwf	___flmul@prod+2
  8646  00CE  0847               	movf	??___flmul+1,w
  8647  00CF  00D3               	movwf	___flmul@prod+1
  8648  00D0  0846               	movf	??___flmul,w
  8649  00D1  00D2               	movwf	___flmul@prod
  8650  00D2  083F               	movf	___flmul@b+1,w
  8651  00D3  00C6               	movwf	??___flmul
  8652  00D4  0846               	movf	??___flmul,w
  8653  00D5  00F0               	movwf	__Umul8_16@multiplicand
  8654  00D6  0843               	movf	___flmul@a+1,w
  8655  00D7  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8656  00DC  0871               	movf	?__Umul8_16+1,w
  8657  00DD  00D7               	movwf	___flmul@temp+1
  8658  00DE  0870               	movf	?__Umul8_16,w
  8659  00DF  00D6               	movwf	___flmul@temp
  8660  00E0  0856               	movf	___flmul@temp,w
  8661  00E1  00C6               	movwf	??___flmul
  8662  00E2  01C7               	clrf	??___flmul+1
  8663  00E3  01C8               	clrf	??___flmul+2
  8664  00E4  01C9               	clrf	??___flmul+3
  8665  00E5  0846               	movf	??___flmul,w
  8666  00E6  07CD               	addwf	___flmul@grs,f
  8667  00E7  0847               	movf	??___flmul+1,w
  8668  00E8  1103               	clrz
  8669  00E9  1803               	skipnc
  8670  00EA  3E01               	addlw	1
  8671  00EB  1D03               	btfss	3,2
  8672  00EC  07CE               	addwf	___flmul@grs+1,f
  8673  00ED  0848               	movf	??___flmul+2,w
  8674  00EE  1103               	clrz
  8675  00EF  1803               	skipnc
  8676  00F0  3E01               	addlw	1
  8677  00F1  1D03               	btfss	3,2
  8678  00F2  07CF               	addwf	___flmul@grs+2,f
  8679  00F3  0849               	movf	??___flmul+3,w
  8680  00F4  1103               	clrz
  8681  00F5  1803               	skipnc
  8682  00F6  3E01               	addlw	1
  8683  00F7  1D03               	btfss	3,2
  8684  00F8  07D0               	addwf	___flmul@grs+3,f
  8685  00F9  0857               	movf	___flmul@temp+1,w
  8686  00FA  00C6               	movwf	??___flmul
  8687  00FB  01C7               	clrf	??___flmul+1
  8688  00FC  01C8               	clrf	??___flmul+2
  8689  00FD  01C9               	clrf	??___flmul+3
  8690  00FE  0846               	movf	??___flmul,w
  8691  00FF  07D2               	addwf	___flmul@prod,f
  8692  0100  0847               	movf	??___flmul+1,w
  8693  0101  1103               	clrz
  8694  0102  1803               	skipnc
  8695  0103  3E01               	addlw	1
  8696  0104  1D03               	btfss	3,2
  8697  0105  07D3               	addwf	___flmul@prod+1,f
  8698  0106  0848               	movf	??___flmul+2,w
  8699  0107  1103               	clrz
  8700  0108  1803               	skipnc
  8701  0109  3E01               	addlw	1
  8702  010A  1D03               	btfss	3,2
  8703  010B  07D4               	addwf	___flmul@prod+2,f
  8704  010C  0849               	movf	??___flmul+3,w
  8705  010D  1103               	clrz
  8706  010E  1803               	skipnc
  8707  010F  3E01               	addlw	1
  8708  0110  1D03               	btfss	3,2
  8709  0111  07D5               	addwf	___flmul@prod+3,f
  8710  0112  0840               	movf	___flmul@b+2,w
  8711  0113  00C6               	movwf	??___flmul
  8712  0114  0846               	movf	??___flmul,w
  8713  0115  00F0               	movwf	__Umul8_16@multiplicand
  8714  0116  0842               	movf	___flmul@a,w
  8715  0117  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8716  011C  0871               	movf	?__Umul8_16+1,w
  8717  011D  00D7               	movwf	___flmul@temp+1
  8718  011E  0870               	movf	?__Umul8_16,w
  8719  011F  00D6               	movwf	___flmul@temp
  8720  0120  0856               	movf	___flmul@temp,w
  8721  0121  00C6               	movwf	??___flmul
  8722  0122  01C7               	clrf	??___flmul+1
  8723  0123  01C8               	clrf	??___flmul+2
  8724  0124  01C9               	clrf	??___flmul+3
  8725  0125  0846               	movf	??___flmul,w
  8726  0126  07CD               	addwf	___flmul@grs,f
  8727  0127  0847               	movf	??___flmul+1,w
  8728  0128  1103               	clrz
  8729  0129  1803               	skipnc
  8730  012A  3E01               	addlw	1
  8731  012B  1D03               	btfss	3,2
  8732  012C  07CE               	addwf	___flmul@grs+1,f
  8733  012D  0848               	movf	??___flmul+2,w
  8734  012E  1103               	clrz
  8735  012F  1803               	skipnc
  8736  0130  3E01               	addlw	1
  8737  0131  1D03               	btfss	3,2
  8738  0132  07CF               	addwf	___flmul@grs+2,f
  8739  0133  0849               	movf	??___flmul+3,w
  8740  0134  1103               	clrz
  8741  0135  1803               	skipnc
  8742  0136  3E01               	addlw	1
  8743  0137  1D03               	btfss	3,2
  8744  0138  07D0               	addwf	___flmul@grs+3,f
  8745  0139  0857               	movf	___flmul@temp+1,w
  8746  013A  00C6               	movwf	??___flmul
  8747  013B  01C7               	clrf	??___flmul+1
  8748  013C  01C8               	clrf	??___flmul+2
  8749  013D  01C9               	clrf	??___flmul+3
  8750  013E  0846               	movf	??___flmul,w
  8751  013F  07D2               	addwf	___flmul@prod,f
  8752  0140  0847               	movf	??___flmul+1,w
  8753  0141  1103               	clrz
  8754  0142  1803               	skipnc
  8755  0143  3E01               	addlw	1
  8756  0144  1D03               	btfss	3,2
  8757  0145  07D3               	addwf	___flmul@prod+1,f
  8758  0146  0848               	movf	??___flmul+2,w
  8759  0147  1103               	clrz
  8760  0148  1803               	skipnc
  8761  0149  3E01               	addlw	1
  8762  014A  1D03               	btfss	3,2
  8763  014B  07D4               	addwf	___flmul@prod+2,f
  8764  014C  0849               	movf	??___flmul+3,w
  8765  014D  1103               	clrz
  8766  014E  1803               	skipnc
  8767  014F  3E01               	addlw	1
  8768  0150  1D03               	btfss	3,2
  8769  0151  07D5               	addwf	___flmul@prod+3,f
  8770  0152  3008               	movlw	8
  8771  0153  00C6               	movwf	??___flmul
  8772  0154                     u330_25:
  8773  0154  1003               	clrc
  8774  0155  0DCD               	rlf	___flmul@grs,f
  8775  0156  0DCE               	rlf	___flmul@grs+1,f
  8776  0157  0DCF               	rlf	___flmul@grs+2,f
  8777  0158  0DD0               	rlf	___flmul@grs+3,f
  8778  0159  0BC6               	decfsz	??___flmul,f
  8779  015A  2954               	goto	u330_25
  8780  015B  083F               	movf	___flmul@b+1,w
  8781  015C  00C6               	movwf	??___flmul
  8782  015D  0846               	movf	??___flmul,w
  8783  015E  00F0               	movwf	__Umul8_16@multiplicand
  8784  015F  0842               	movf	___flmul@a,w
  8785  0160  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8786  0165  0871               	movf	?__Umul8_16+1,w
  8787  0166  00D7               	movwf	___flmul@temp+1
  8788  0167  0870               	movf	?__Umul8_16,w
  8789  0168  00D6               	movwf	___flmul@temp
  8790  0169  0856               	movf	___flmul@temp,w
  8791  016A  00C6               	movwf	??___flmul
  8792  016B  0857               	movf	___flmul@temp+1,w
  8793  016C  00C7               	movwf	??___flmul+1
  8794  016D  01C8               	clrf	??___flmul+2
  8795  016E  01C9               	clrf	??___flmul+3
  8796  016F  0846               	movf	??___flmul,w
  8797  0170  07CD               	addwf	___flmul@grs,f
  8798  0171  0847               	movf	??___flmul+1,w
  8799  0172  1103               	clrz
  8800  0173  1803               	skipnc
  8801  0174  3E01               	addlw	1
  8802  0175  1D03               	btfss	3,2
  8803  0176  07CE               	addwf	___flmul@grs+1,f
  8804  0177  0848               	movf	??___flmul+2,w
  8805  0178  1103               	clrz
  8806  0179  1803               	skipnc
  8807  017A  3E01               	addlw	1
  8808  017B  1D03               	btfss	3,2
  8809  017C  07CF               	addwf	___flmul@grs+2,f
  8810  017D  0849               	movf	??___flmul+3,w
  8811  017E  1103               	clrz
  8812  017F  1803               	skipnc
  8813  0180  3E01               	addlw	1
  8814  0181  1D03               	btfss	3,2
  8815  0182  07D0               	addwf	___flmul@grs+3,f
  8816  0183  083E               	movf	___flmul@b,w
  8817  0184  00C6               	movwf	??___flmul
  8818  0185  0846               	movf	??___flmul,w
  8819  0186  00F0               	movwf	__Umul8_16@multiplicand
  8820  0187  0843               	movf	___flmul@a+1,w
  8821  0188  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8822  018D  0871               	movf	?__Umul8_16+1,w
  8823  018E  00D7               	movwf	___flmul@temp+1
  8824  018F  0870               	movf	?__Umul8_16,w
  8825  0190  00D6               	movwf	___flmul@temp
  8826  0191  0856               	movf	___flmul@temp,w
  8827  0192  00C6               	movwf	??___flmul
  8828  0193  0857               	movf	___flmul@temp+1,w
  8829  0194  00C7               	movwf	??___flmul+1
  8830  0195  01C8               	clrf	??___flmul+2
  8831  0196  01C9               	clrf	??___flmul+3
  8832  0197  0846               	movf	??___flmul,w
  8833  0198  07CD               	addwf	___flmul@grs,f
  8834  0199  0847               	movf	??___flmul+1,w
  8835  019A  1103               	clrz
  8836  019B  1803               	skipnc
  8837  019C  3E01               	addlw	1
  8838  019D  1D03               	btfss	3,2
  8839  019E  07CE               	addwf	___flmul@grs+1,f
  8840  019F  0848               	movf	??___flmul+2,w
  8841  01A0  1103               	clrz
  8842  01A1  1803               	skipnc
  8843  01A2  3E01               	addlw	1
  8844  01A3  1D03               	btfss	3,2
  8845  01A4  07CF               	addwf	___flmul@grs+2,f
  8846  01A5  0849               	movf	??___flmul+3,w
  8847  01A6  1103               	clrz
  8848  01A7  1803               	skipnc
  8849  01A8  3E01               	addlw	1
  8850  01A9  1D03               	btfss	3,2
  8851  01AA  07D0               	addwf	___flmul@grs+3,f
  8852  01AB  3008               	movlw	8
  8853  01AC  00C6               	movwf	??___flmul
  8854  01AD                     u333_25:
  8855  01AD  1003               	clrc
  8856  01AE  0DCD               	rlf	___flmul@grs,f
  8857  01AF  0DCE               	rlf	___flmul@grs+1,f
  8858  01B0  0DCF               	rlf	___flmul@grs+2,f
  8859  01B1  0DD0               	rlf	___flmul@grs+3,f
  8860  01B2  0BC6               	decfsz	??___flmul,f
  8861  01B3  29AD               	goto	u333_25
  8862  01B4  083E               	movf	___flmul@b,w
  8863  01B5  00C6               	movwf	??___flmul
  8864  01B6  0846               	movf	??___flmul,w
  8865  01B7  00F0               	movwf	__Umul8_16@multiplicand
  8866  01B8  0842               	movf	___flmul@a,w
  8867  01B9  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8868  01BE  0871               	movf	?__Umul8_16+1,w
  8869  01BF  00D7               	movwf	___flmul@temp+1
  8870  01C0  0870               	movf	?__Umul8_16,w
  8871  01C1  00D6               	movwf	___flmul@temp
  8872  01C2  0856               	movf	___flmul@temp,w
  8873  01C3  00C6               	movwf	??___flmul
  8874  01C4  0857               	movf	___flmul@temp+1,w
  8875  01C5  00C7               	movwf	??___flmul+1
  8876  01C6  01C8               	clrf	??___flmul+2
  8877  01C7  01C9               	clrf	??___flmul+3
  8878  01C8  0846               	movf	??___flmul,w
  8879  01C9  07CD               	addwf	___flmul@grs,f
  8880  01CA  0847               	movf	??___flmul+1,w
  8881  01CB  1103               	clrz
  8882  01CC  1803               	skipnc
  8883  01CD  3E01               	addlw	1
  8884  01CE  1D03               	btfss	3,2
  8885  01CF  07CE               	addwf	___flmul@grs+1,f
  8886  01D0  0848               	movf	??___flmul+2,w
  8887  01D1  1103               	clrz
  8888  01D2  1803               	skipnc
  8889  01D3  3E01               	addlw	1
  8890  01D4  1D03               	btfss	3,2
  8891  01D5  07CF               	addwf	___flmul@grs+2,f
  8892  01D6  0849               	movf	??___flmul+3,w
  8893  01D7  1103               	clrz
  8894  01D8  1803               	skipnc
  8895  01D9  3E01               	addlw	1
  8896  01DA  1D03               	btfss	3,2
  8897  01DB  07D0               	addwf	___flmul@grs+3,f
  8898  01DC  083F               	movf	___flmul@b+1,w
  8899  01DD  00C6               	movwf	??___flmul
  8900  01DE  0846               	movf	??___flmul,w
  8901  01DF  00F0               	movwf	__Umul8_16@multiplicand
  8902  01E0  0844               	movf	___flmul@a+2,w
  8903  01E1  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8904  01E6  0871               	movf	?__Umul8_16+1,w
  8905  01E7  00D7               	movwf	___flmul@temp+1
  8906  01E8  0870               	movf	?__Umul8_16,w
  8907  01E9  00D6               	movwf	___flmul@temp
  8908  01EA  0856               	movf	___flmul@temp,w
  8909  01EB  00C6               	movwf	??___flmul
  8910  01EC  0857               	movf	___flmul@temp+1,w
  8911  01ED  00C7               	movwf	??___flmul+1
  8912  01EE  01C8               	clrf	??___flmul+2
  8913  01EF  01C9               	clrf	??___flmul+3
  8914  01F0  0846               	movf	??___flmul,w
  8915  01F1  07D2               	addwf	___flmul@prod,f
  8916  01F2  0847               	movf	??___flmul+1,w
  8917  01F3  1103               	clrz
  8918  01F4  1803               	skipnc
  8919  01F5  3E01               	addlw	1
  8920  01F6  1D03               	btfss	3,2
  8921  01F7  07D3               	addwf	___flmul@prod+1,f
  8922  01F8  0848               	movf	??___flmul+2,w
  8923  01F9  1103               	clrz
  8924  01FA  1803               	skipnc
  8925  01FB  3E01               	addlw	1
  8926  01FC  1D03               	btfss	3,2
  8927  01FD  07D4               	addwf	___flmul@prod+2,f
  8928  01FE  0849               	movf	??___flmul+3,w
  8929  01FF  1103               	clrz
  8930  0200  1803               	skipnc
  8931  0201  3E01               	addlw	1
  8932  0202  1D03               	btfss	3,2
  8933  0203  07D5               	addwf	___flmul@prod+3,f
  8934  0204  0840               	movf	___flmul@b+2,w
  8935  0205  00C6               	movwf	??___flmul
  8936  0206  0846               	movf	??___flmul,w
  8937  0207  00F0               	movwf	__Umul8_16@multiplicand
  8938  0208  0843               	movf	___flmul@a+1,w
  8939  0209  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8940  020E  0871               	movf	?__Umul8_16+1,w
  8941  020F  00D7               	movwf	___flmul@temp+1
  8942  0210  0870               	movf	?__Umul8_16,w
  8943  0211  00D6               	movwf	___flmul@temp
  8944  0212  0856               	movf	___flmul@temp,w
  8945  0213  00C6               	movwf	??___flmul
  8946  0214  0857               	movf	___flmul@temp+1,w
  8947  0215  00C7               	movwf	??___flmul+1
  8948  0216  01C8               	clrf	??___flmul+2
  8949  0217  01C9               	clrf	??___flmul+3
  8950  0218  0846               	movf	??___flmul,w
  8951  0219  07D2               	addwf	___flmul@prod,f
  8952  021A  0847               	movf	??___flmul+1,w
  8953  021B  1103               	clrz
  8954  021C  1803               	skipnc
  8955  021D  3E01               	addlw	1
  8956  021E  1D03               	btfss	3,2
  8957  021F  07D3               	addwf	___flmul@prod+1,f
  8958  0220  0848               	movf	??___flmul+2,w
  8959  0221  1103               	clrz
  8960  0222  1803               	skipnc
  8961  0223  3E01               	addlw	1
  8962  0224  1D03               	btfss	3,2
  8963  0225  07D4               	addwf	___flmul@prod+2,f
  8964  0226  0849               	movf	??___flmul+3,w
  8965  0227  1103               	clrz
  8966  0228  1803               	skipnc
  8967  0229  3E01               	addlw	1
  8968  022A  1D03               	btfss	3,2
  8969  022B  07D5               	addwf	___flmul@prod+3,f
  8970  022C  0840               	movf	___flmul@b+2,w
  8971  022D  00C6               	movwf	??___flmul
  8972  022E  0846               	movf	??___flmul,w
  8973  022F  00F0               	movwf	__Umul8_16@multiplicand
  8974  0230  0844               	movf	___flmul@a+2,w
  8975  0231  160A  158A  27DD  120A  118A  	fcall	__Umul8_16
  8976  0236  0871               	movf	?__Umul8_16+1,w
  8977  0237  00D7               	movwf	___flmul@temp+1
  8978  0238  0870               	movf	?__Umul8_16,w
  8979  0239  00D6               	movwf	___flmul@temp
  8980  023A  0856               	movf	___flmul@temp,w
  8981  023B  00C6               	movwf	??___flmul
  8982  023C  0857               	movf	___flmul@temp+1,w
  8983  023D  00C7               	movwf	??___flmul+1
  8984  023E  01C8               	clrf	??___flmul+2
  8985  023F  01C9               	clrf	??___flmul+3
  8986  0240  3008               	movlw	8
  8987  0241                     u337_25:
  8988  0241  1003               	clrc
  8989  0242  0DC6               	rlf	??___flmul,f
  8990  0243  0DC7               	rlf	??___flmul+1,f
  8991  0244  0DC8               	rlf	??___flmul+2,f
  8992  0245  0DC9               	rlf	??___flmul+3,f
  8993  0246  3EFF               	addlw	-1
  8994  0247  1D03               	skipz
  8995  0248  2A41               	goto	u337_25
  8996  0249  0846               	movf	??___flmul,w
  8997  024A  07D2               	addwf	___flmul@prod,f
  8998  024B  0847               	movf	??___flmul+1,w
  8999  024C  1103               	clrz
  9000  024D  1803               	skipnc
  9001  024E  3E01               	addlw	1
  9002  024F  1D03               	btfss	3,2
  9003  0250  07D3               	addwf	___flmul@prod+1,f
  9004  0251  0848               	movf	??___flmul+2,w
  9005  0252  1103               	clrz
  9006  0253  1803               	skipnc
  9007  0254  3E01               	addlw	1
  9008  0255  1D03               	btfss	3,2
  9009  0256  07D4               	addwf	___flmul@prod+2,f
  9010  0257  0849               	movf	??___flmul+3,w
  9011  0258  1103               	clrz
  9012  0259  1803               	skipnc
  9013  025A  3E01               	addlw	1
  9014  025B  1D03               	btfss	3,2
  9015  025C  07D5               	addwf	___flmul@prod+3,f
  9016  025D  0850               	movf	___flmul@grs+3,w
  9017  025E  00C6               	movwf	??___flmul
  9018  025F  01C7               	clrf	??___flmul+1
  9019  0260  01C8               	clrf	??___flmul+2
  9020  0261  01C9               	clrf	??___flmul+3
  9021  0262  0846               	movf	??___flmul,w
  9022  0263  07D2               	addwf	___flmul@prod,f
  9023  0264  0847               	movf	??___flmul+1,w
  9024  0265  1103               	clrz
  9025  0266  1803               	skipnc
  9026  0267  3E01               	addlw	1
  9027  0268  1D03               	btfss	3,2
  9028  0269  07D3               	addwf	___flmul@prod+1,f
  9029  026A  0848               	movf	??___flmul+2,w
  9030  026B  1103               	clrz
  9031  026C  1803               	skipnc
  9032  026D  3E01               	addlw	1
  9033  026E  1D03               	btfss	3,2
  9034  026F  07D4               	addwf	___flmul@prod+2,f
  9035  0270  0849               	movf	??___flmul+3,w
  9036  0271  1103               	clrz
  9037  0272  1803               	skipnc
  9038  0273  3E01               	addlw	1
  9039  0274  1D03               	btfss	3,2
  9040  0275  07D5               	addwf	___flmul@prod+3,f
  9041  0276  3008               	movlw	8
  9042  0277  00C6               	movwf	??___flmul
  9043  0278                     u340_25:
  9044  0278  1003               	clrc
  9045  0279  0DCD               	rlf	___flmul@grs,f
  9046  027A  0DCE               	rlf	___flmul@grs+1,f
  9047  027B  0DCF               	rlf	___flmul@grs+2,f
  9048  027C  0DD0               	rlf	___flmul@grs+3,f
  9049  027D  0BC6               	decfsz	??___flmul,f
  9050  027E  2A78               	goto	u340_25
  9051  027F  0851               	movf	___flmul@bexp,w
  9052  0280  074C               	addwf	___flmul@aexp,w
  9053  0281  00C6               	movwf	??___flmul
  9054  0282  01C7               	clrf	??___flmul+1
  9055  0283  0DC7               	rlf	??___flmul+1,f
  9056  0284  0846               	movf	??___flmul,w
  9057  0285  3E82               	addlw	130
  9058  0286  00D6               	movwf	___flmul@temp
  9059  0287  0847               	movf	??___flmul+1,w
  9060  0288  1803               	skipnc
  9061  0289  3E01               	addlw	1
  9062  028A  3EFF               	addlw	255
  9063  028B  00D7               	movwf	___flmul@temp+1
  9064  028C                     i1l2981:
  9065  028C  1BD4               	btfsc	___flmul@prod+2,7
  9066  028D  2AA9               	goto	i1l2983
  9067  028E  3001               	movlw	1
  9068  028F  00C6               	movwf	??___flmul
  9069  0290                     u341_25:
  9070  0290  1003               	clrc
  9071  0291  0DD2               	rlf	___flmul@prod,f
  9072  0292  0DD3               	rlf	___flmul@prod+1,f
  9073  0293  0DD4               	rlf	___flmul@prod+2,f
  9074  0294  0DD5               	rlf	___flmul@prod+3,f
  9075  0295  0BC6               	decfsz	??___flmul,f
  9076  0296  2A90               	goto	u341_25
  9077  0297  1BD0               	btfsc	___flmul@grs+3,7
  9078  0298  1452               	bsf	___flmul@prod,0
  9079  0299  3001               	movlw	1
  9080  029A  00C6               	movwf	??___flmul
  9081  029B                     u343_25:
  9082  029B  1003               	clrc
  9083  029C  0DCD               	rlf	___flmul@grs,f
  9084  029D  0DCE               	rlf	___flmul@grs+1,f
  9085  029E  0DCF               	rlf	___flmul@grs+2,f
  9086  029F  0DD0               	rlf	___flmul@grs+3,f
  9087  02A0  0BC6               	decfsz	??___flmul,f
  9088  02A1  2A9B               	goto	u343_25
  9089  02A2  30FF               	movlw	255
  9090  02A3  07D6               	addwf	___flmul@temp,f
  9091  02A4  1803               	skipnc
  9092  02A5  0AD7               	incf	___flmul@temp+1,f
  9093  02A6  30FF               	movlw	255
  9094  02A7  07D7               	addwf	___flmul@temp+1,f
  9095  02A8  2A8C               	goto	i1l2981
  9096  02A9                     i1l2983:
  9097  02A9  01CC               	clrf	___flmul@aexp
  9098  02AA  1FD0               	btfss	___flmul@grs+3,7
  9099  02AB  2AC2               	goto	i1l2993
  9100  02AC  30FF               	movlw	255
  9101  02AD  054D               	andwf	___flmul@grs,w
  9102  02AE  00C6               	movwf	??___flmul
  9103  02AF  30FF               	movlw	255
  9104  02B0  054E               	andwf	___flmul@grs+1,w
  9105  02B1  00C7               	movwf	??___flmul+1
  9106  02B2  30FF               	movlw	255
  9107  02B3  054F               	andwf	___flmul@grs+2,w
  9108  02B4  00C8               	movwf	??___flmul+2
  9109  02B5  307F               	movlw	127
  9110  02B6  0550               	andwf	___flmul@grs+3,w
  9111  02B7  00C9               	movwf	??___flmul+3
  9112  02B8  0849               	movf	??___flmul+3,w
  9113  02B9  0448               	iorwf	??___flmul+2,w
  9114  02BA  0447               	iorwf	??___flmul+1,w
  9115  02BB  0446               	iorwf	??___flmul,w
  9116  02BC  1903               	skipnz
  9117  02BD  1852               	btfsc	___flmul@prod,0
  9118  02BE  2AC0               	goto	i1l2989
  9119  02BF  2AC2               	goto	i1l2993
  9120  02C0                     i1l2989:
  9121  02C0  01CC               	clrf	___flmul@aexp
  9122  02C1  0ACC               	incf	___flmul@aexp,f
  9123  02C2                     i1l2993:
  9124  02C2  084C               	movf	___flmul@aexp,w
  9125  02C3  1903               	btfsc	3,2
  9126  02C4  2AF4               	goto	i1l3003
  9127  02C5  3001               	movlw	1
  9128  02C6  07D2               	addwf	___flmul@prod,f
  9129  02C7  3000               	movlw	0
  9130  02C8  1803               	skipnc
  9131  02C9  3001               	movlw	1
  9132  02CA  07D3               	addwf	___flmul@prod+1,f
  9133  02CB  3000               	movlw	0
  9134  02CC  1803               	skipnc
  9135  02CD  3001               	movlw	1
  9136  02CE  07D4               	addwf	___flmul@prod+2,f
  9137  02CF  3000               	movlw	0
  9138  02D0  1803               	skipnc
  9139  02D1  3001               	movlw	1
  9140  02D2  07D5               	addwf	___flmul@prod+3,f
  9141  02D3  1C55               	btfss	___flmul@prod+3,0
  9142  02D4  2AF4               	goto	i1l3003
  9143  02D5  0852               	movf	___flmul@prod,w
  9144  02D6  00C6               	movwf	??___flmul
  9145  02D7  0853               	movf	___flmul@prod+1,w
  9146  02D8  00C7               	movwf	??___flmul+1
  9147  02D9  0854               	movf	___flmul@prod+2,w
  9148  02DA  00C8               	movwf	??___flmul+2
  9149  02DB  0855               	movf	___flmul@prod+3,w
  9150  02DC  00C9               	movwf	??___flmul+3
  9151  02DD  3001               	movlw	1
  9152  02DE  00CA               	movwf	??___flmul+4
  9153  02DF                     u350_25:
  9154  02DF  0D49               	rlf	??___flmul+3,w
  9155  02E0  0CC9               	rrf	??___flmul+3,f
  9156  02E1  0CC8               	rrf	??___flmul+2,f
  9157  02E2  0CC7               	rrf	??___flmul+1,f
  9158  02E3  0CC6               	rrf	??___flmul,f
  9159  02E4  0BCA               	decfsz	??___flmul+4,f
  9160  02E5  2ADF               	goto	u350_25
  9161  02E6  0849               	movf	??___flmul+3,w
  9162  02E7  00D5               	movwf	___flmul@prod+3
  9163  02E8  0848               	movf	??___flmul+2,w
  9164  02E9  00D4               	movwf	___flmul@prod+2
  9165  02EA  0847               	movf	??___flmul+1,w
  9166  02EB  00D3               	movwf	___flmul@prod+1
  9167  02EC  0846               	movf	??___flmul,w
  9168  02ED  00D2               	movwf	___flmul@prod
  9169  02EE  3001               	movlw	1
  9170  02EF  07D6               	addwf	___flmul@temp,f
  9171  02F0  1803               	skipnc
  9172  02F1  0AD7               	incf	___flmul@temp+1,f
  9173  02F2  3000               	movlw	0
  9174  02F3  07D7               	addwf	___flmul@temp+1,f
  9175  02F4                     i1l3003:
  9176  02F4  0857               	movf	___flmul@temp+1,w
  9177  02F5  3A80               	xorlw	128
  9178  02F6  00FF               	movwf	127
  9179  02F7  3080               	movlw	128
  9180  02F8  027F               	subwf	127,w
  9181  02F9  1D03               	skipz
  9182  02FA  2AFD               	goto	u351_25
  9183  02FB  30FF               	movlw	255
  9184  02FC  0256               	subwf	___flmul@temp,w
  9185  02FD                     u351_25:
  9186  02FD  1C03               	skipc
  9187  02FE  2B0A               	goto	i1l3007
  9188  02FF  307F               	movlw	127
  9189  0300  1283               	bcf	3,5	;RP0=0, select bank0
  9190  0301  1303               	bcf	3,6	;RP1=0, select bank0
  9191  0302  00D5               	movwf	___flmul@prod+3
  9192  0303  3080               	movlw	128
  9193  0304  00D4               	movwf	___flmul@prod+2
  9194  0305  3000               	movlw	0
  9195  0306  00D3               	movwf	___flmul@prod+1
  9196  0307  3000               	movlw	0
  9197  0308  00D2               	movwf	___flmul@prod
  9198  0309  2B3A               	goto	i1l910
  9199  030A                     i1l3007:
  9200  030A  1283               	bcf	3,5	;RP0=0, select bank0
  9201  030B  1303               	bcf	3,6	;RP1=0, select bank0
  9202  030C  0857               	movf	___flmul@temp+1,w
  9203  030D  3A80               	xorlw	128
  9204  030E  00FF               	movwf	127
  9205  030F  3080               	movlw	128
  9206  0310  027F               	subwf	127,w
  9207  0311  1D03               	skipz
  9208  0312  2B15               	goto	u352_25
  9209  0313  3001               	movlw	1
  9210  0314  0256               	subwf	___flmul@temp,w
  9211  0315                     u352_25:
  9212  0315  1803               	skipnc
  9213  0316  2B23               	goto	i1l3013
  9214  0317  3000               	movlw	0
  9215  0318  1283               	bcf	3,5	;RP0=0, select bank0
  9216  0319  1303               	bcf	3,6	;RP1=0, select bank0
  9217  031A  00D5               	movwf	___flmul@prod+3
  9218  031B  3000               	movlw	0
  9219  031C  00D4               	movwf	___flmul@prod+2
  9220  031D  3000               	movlw	0
  9221  031E  00D3               	movwf	___flmul@prod+1
  9222  031F  3000               	movlw	0
  9223  0320  00D2               	movwf	___flmul@prod
  9224  0321  01CB               	clrf	___flmul@sign
  9225  0322  2B3A               	goto	i1l910
  9226  0323                     i1l3013:
  9227  0323  1283               	bcf	3,5	;RP0=0, select bank0
  9228  0324  1303               	bcf	3,6	;RP1=0, select bank0
  9229  0325  0856               	movf	___flmul@temp,w
  9230  0326  00C6               	movwf	??___flmul
  9231  0327  0846               	movf	??___flmul,w
  9232  0328  00D1               	movwf	___flmul@bexp
  9233  0329  30FF               	movlw	255
  9234  032A  05D2               	andwf	___flmul@prod,f
  9235  032B  30FF               	movlw	255
  9236  032C  05D3               	andwf	___flmul@prod+1,f
  9237  032D  307F               	movlw	127
  9238  032E  05D4               	andwf	___flmul@prod+2,f
  9239  032F  3000               	movlw	0
  9240  0330  05D5               	andwf	___flmul@prod+3,f
  9241  0331  1851               	btfsc	___flmul@bexp,0
  9242  0332  17D4               	bsf	___flmul@prod+2,7
  9243  0333  0851               	movf	___flmul@bexp,w
  9244  0334  00C6               	movwf	??___flmul
  9245  0335  1003               	clrc
  9246  0336  0C46               	rrf	??___flmul,w
  9247  0337  00C7               	movwf	??___flmul+1
  9248  0338  0847               	movf	??___flmul+1,w
  9249  0339  00D5               	movwf	___flmul@prod+3
  9250  033A                     i1l910:
  9251  033A  084B               	movf	___flmul@sign,w
  9252  033B  00C6               	movwf	??___flmul
  9253  033C  0846               	movf	??___flmul,w
  9254  033D  04D5               	iorwf	___flmul@prod+3,f
  9255  033E  0855               	movf	___flmul@prod+3,w
  9256  033F  00C1               	movwf	?___flmul+3
  9257  0340  0854               	movf	___flmul@prod+2,w
  9258  0341  00C0               	movwf	?___flmul+2
  9259  0342  0853               	movf	___flmul@prod+1,w
  9260  0343  00BF               	movwf	?___flmul+1
  9261  0344  0852               	movf	___flmul@prod,w
  9262  0345  00BE               	movwf	?___flmul
  9263  0346  0008               	return
  9264  0347                     __end_of___flmul:
  9265                           
  9266                           	psect	text40
  9267  1FDD                     __ptext40:	
  9268 ;; *************** function __Umul8_16 *****************
  9269 ;; Defined at:
  9270 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul8_16.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  multiplier      1    wreg     unsigned char 
  9273 ;;  multiplicand    1    0[COMMON] unsigned char 
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;  multiplier      1    8[COMMON] unsigned char 
  9276 ;;  word_mpld       2    6[COMMON] unsigned int 
  9277 ;;  product         2    4[COMMON] unsigned int 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  2    0[COMMON] unsigned int 
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0
  9282 ;; Tracked objects:
  9283 ;;		On entry : 300/0
  9284 ;;		On exit  : 300/0
  9285 ;;		Unchanged: 300/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9287 ;;      Params:         2       0       0       0       0
  9288 ;;      Locals:         5       0       0       0       0
  9289 ;;      Temps:          2       0       0       0       0
  9290 ;;      Totals:         9       0       0       0       0
  9291 ;;Total ram usage:        9 bytes
  9292 ;; Hardware stack levels used: 1
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		___flmul
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300  1FDD                     __Umul8_16:	
  9301                           ;psect for function __Umul8_16
  9302                           
  9303                           
  9304                           ;incstack = 0
  9305                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  9306                           ;__Umul8_16@multiplier stored from wreg
  9307  1FDD  00F8               	movwf	__Umul8_16@multiplier
  9308  1FDE  01F4               	clrf	__Umul8_16@product
  9309  1FDF  01F5               	clrf	__Umul8_16@product+1
  9310  1FE0  0870               	movf	__Umul8_16@multiplicand,w
  9311  1FE1  00F2               	movwf	??__Umul8_16
  9312  1FE2  01F3               	clrf	??__Umul8_16+1
  9313  1FE3  0872               	movf	??__Umul8_16,w
  9314  1FE4  00F6               	movwf	__Umul8_16@word_mpld
  9315  1FE5  0873               	movf	??__Umul8_16+1,w
  9316  1FE6  00F7               	movwf	__Umul8_16@word_mpld+1
  9317  1FE7                     i1l2613:
  9318  1FE7  1C78               	btfss	__Umul8_16@multiplier,0
  9319  1FE8  2FEF               	goto	i1l917
  9320  1FE9  0876               	movf	__Umul8_16@word_mpld,w
  9321  1FEA  07F4               	addwf	__Umul8_16@product,f
  9322  1FEB  1803               	skipnc
  9323  1FEC  0AF5               	incf	__Umul8_16@product+1,f
  9324  1FED  0877               	movf	__Umul8_16@word_mpld+1,w
  9325  1FEE  07F5               	addwf	__Umul8_16@product+1,f
  9326  1FEF                     i1l917:
  9327  1FEF  3001               	movlw	1
  9328  1FF0                     u251_25:
  9329  1FF0  1003               	clrc
  9330  1FF1  0DF6               	rlf	__Umul8_16@word_mpld,f
  9331  1FF2  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  9332  1FF3  3EFF               	addlw	-1
  9333  1FF4  1D03               	skipz
  9334  1FF5  2FF0               	goto	u251_25
  9335  1FF6  1003               	clrc
  9336  1FF7  0CF8               	rrf	__Umul8_16@multiplier,f
  9337  1FF8  0878               	movf	__Umul8_16@multiplier,w
  9338  1FF9  1D03               	btfss	3,2
  9339  1FFA  2FE7               	goto	i1l2613
  9340  1FFB  0875               	movf	__Umul8_16@product+1,w
  9341  1FFC  00F1               	movwf	?__Umul8_16+1
  9342  1FFD  0874               	movf	__Umul8_16@product,w
  9343  1FFE  00F0               	movwf	?__Umul8_16
  9344  1FFF  0008               	return
  9345  2000                     __end_of__Umul8_16:
  9346                           
  9347                           	psect	text41
  9348  175C                     __ptext41:	
  9349 ;; *************** function ___xxtofl *****************
  9350 ;; Defined at:
  9351 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\xxtofl.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  sign            1    wreg     unsigned char 
  9354 ;;  val             4    9[COMMON] long 
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;  sign            1    4[BANK0 ] unsigned char 
  9357 ;;  arg             4    6[BANK0 ] unsigned long 
  9358 ;;  exp             1    5[BANK0 ] unsigned char 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  4    9[COMMON] unsigned char 
  9361 ;; Registers used:
  9362 ;;		wreg, status,2, status,0
  9363 ;; Tracked objects:
  9364 ;;		On entry : 200/100
  9365 ;;		On exit  : 300/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9368 ;;      Params:         4       0       0       0       0
  9369 ;;      Locals:         0       6       0       0       0
  9370 ;;      Temps:          0       4       0       0       0
  9371 ;;      Totals:         4      10       0       0       0
  9372 ;;Total ram usage:       14 bytes
  9373 ;; Hardware stack levels used: 1
  9374 ;; This function calls:
  9375 ;;		Nothing
  9376 ;; This function is called by:
  9377 ;;		_slave
  9378 ;;		_map
  9379 ;;		_log
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383  175C                     ___xxtofl:	
  9384                           ;psect for function ___xxtofl
  9385                           
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  9389                           ;___xxtofl@sign stored from wreg
  9390  175C  1283               	bcf	3,5	;RP0=0, select bank0
  9391  175D  00A4               	movwf	___xxtofl@sign
  9392  175E  0824               	movf	___xxtofl@sign,w
  9393  175F  1D03               	btfss	3,2
  9394  1760  1FFC               	btfss	___xxtofl@val+3,7
  9395  1761  2F72               	goto	i1l3467
  9396  1762  0979               	comf	___xxtofl@val,w
  9397  1763  00A6               	movwf	___xxtofl@arg
  9398  1764  097A               	comf	___xxtofl@val+1,w
  9399  1765  00A7               	movwf	___xxtofl@arg+1
  9400  1766  097B               	comf	___xxtofl@val+2,w
  9401  1767  00A8               	movwf	___xxtofl@arg+2
  9402  1768  097C               	comf	___xxtofl@val+3,w
  9403  1769  00A9               	movwf	___xxtofl@arg+3
  9404  176A  0AA6               	incf	___xxtofl@arg,f
  9405  176B  1903               	skipnz
  9406  176C  0AA7               	incf	___xxtofl@arg+1,f
  9407  176D  1903               	skipnz
  9408  176E  0AA8               	incf	___xxtofl@arg+2,f
  9409  176F  1903               	skipnz
  9410  1770  0AA9               	incf	___xxtofl@arg+3,f
  9411  1771  2F7A               	goto	i1l942
  9412  1772                     i1l3467:
  9413  1772  087C               	movf	___xxtofl@val+3,w
  9414  1773  00A9               	movwf	___xxtofl@arg+3
  9415  1774  087B               	movf	___xxtofl@val+2,w
  9416  1775  00A8               	movwf	___xxtofl@arg+2
  9417  1776  087A               	movf	___xxtofl@val+1,w
  9418  1777  00A7               	movwf	___xxtofl@arg+1
  9419  1778  0879               	movf	___xxtofl@val,w
  9420  1779  00A6               	movwf	___xxtofl@arg
  9421  177A                     i1l942:
  9422  177A  087C               	movf	___xxtofl@val+3,w
  9423  177B  047B               	iorwf	___xxtofl@val+2,w
  9424  177C  047A               	iorwf	___xxtofl@val+1,w
  9425  177D  0479               	iorwf	___xxtofl@val,w
  9426  177E  1D03               	skipz
  9427  177F  2F89               	goto	i1l3473
  9428  1780  3000               	movlw	0
  9429  1781  00FC               	movwf	?___xxtofl+3
  9430  1782  3000               	movlw	0
  9431  1783  00FB               	movwf	?___xxtofl+2
  9432  1784  3000               	movlw	0
  9433  1785  00FA               	movwf	?___xxtofl+1
  9434  1786  3000               	movlw	0
  9435  1787  00F9               	movwf	?___xxtofl
  9436  1788  0008               	return
  9437  1789                     i1l3473:
  9438  1789  3096               	movlw	150
  9439  178A  00A0               	movwf	??___xxtofl
  9440  178B  0820               	movf	??___xxtofl,w
  9441  178C  00A5               	movwf	___xxtofl@exp
  9442  178D                     i1l3477:
  9443  178D  30FE               	movlw	254
  9444  178E  0529               	andwf	___xxtofl@arg+3,w
  9445  178F  1903               	btfsc	3,2
  9446  1790  2FBA               	goto	i1l948
  9447  1791  3001               	movlw	1
  9448  1792  00A0               	movwf	??___xxtofl
  9449  1793  0820               	movf	??___xxtofl,w
  9450  1794  07A5               	addwf	___xxtofl@exp,f
  9451  1795  3001               	movlw	1
  9452  1796                     u422_25:
  9453  1796  1003               	clrc
  9454  1797  0CA9               	rrf	___xxtofl@arg+3,f
  9455  1798  0CA8               	rrf	___xxtofl@arg+2,f
  9456  1799  0CA7               	rrf	___xxtofl@arg+1,f
  9457  179A  0CA6               	rrf	___xxtofl@arg,f
  9458  179B  3EFF               	addlw	-1
  9459  179C  1D03               	skipz
  9460  179D  2F96               	goto	u422_25
  9461  179E  2F8D               	goto	i1l3477
  9462  179F                     i1l3479:
  9463  179F  3001               	movlw	1
  9464  17A0  00A0               	movwf	??___xxtofl
  9465  17A1  0820               	movf	??___xxtofl,w
  9466  17A2  07A5               	addwf	___xxtofl@exp,f
  9467  17A3  3001               	movlw	1
  9468  17A4  07A6               	addwf	___xxtofl@arg,f
  9469  17A5  3000               	movlw	0
  9470  17A6  1803               	skipnc
  9471  17A7  3001               	movlw	1
  9472  17A8  07A7               	addwf	___xxtofl@arg+1,f
  9473  17A9  3000               	movlw	0
  9474  17AA  1803               	skipnc
  9475  17AB  3001               	movlw	1
  9476  17AC  07A8               	addwf	___xxtofl@arg+2,f
  9477  17AD  3000               	movlw	0
  9478  17AE  1803               	skipnc
  9479  17AF  3001               	movlw	1
  9480  17B0  07A9               	addwf	___xxtofl@arg+3,f
  9481  17B1  3001               	movlw	1
  9482  17B2                     u424_25:
  9483  17B2  1003               	clrc
  9484  17B3  0CA9               	rrf	___xxtofl@arg+3,f
  9485  17B4  0CA8               	rrf	___xxtofl@arg+2,f
  9486  17B5  0CA7               	rrf	___xxtofl@arg+1,f
  9487  17B6  0CA6               	rrf	___xxtofl@arg,f
  9488  17B7  3EFF               	addlw	-1
  9489  17B8  1D03               	skipz
  9490  17B9  2FB2               	goto	u424_25
  9491  17BA                     i1l948:
  9492  17BA  30FF               	movlw	255
  9493  17BB  0529               	andwf	___xxtofl@arg+3,w
  9494  17BC  1903               	btfsc	3,2
  9495  17BD  2FCE               	goto	i1l3487
  9496  17BE  2F9F               	goto	i1l3479
  9497  17BF                     i1l3489:
  9498  17BF  3002               	movlw	2
  9499  17C0  0225               	subwf	___xxtofl@exp,w
  9500  17C1  1C03               	btfss	3,0
  9501  17C2  2FD0               	goto	i1l955
  9502  17C3  3001               	movlw	1
  9503  17C4  02A5               	subwf	___xxtofl@exp,f
  9504  17C5  3001               	movlw	1
  9505  17C6  00A0               	movwf	??___xxtofl
  9506  17C7                     u426_25:
  9507  17C7  1003               	clrc
  9508  17C8  0DA6               	rlf	___xxtofl@arg,f
  9509  17C9  0DA7               	rlf	___xxtofl@arg+1,f
  9510  17CA  0DA8               	rlf	___xxtofl@arg+2,f
  9511  17CB  0DA9               	rlf	___xxtofl@arg+3,f
  9512  17CC  0BA0               	decfsz	??___xxtofl,f
  9513  17CD  2FC7               	goto	u426_25
  9514  17CE                     i1l3487:
  9515  17CE  1FA8               	btfss	___xxtofl@arg+2,7
  9516  17CF  2FBF               	goto	i1l3489
  9517  17D0                     i1l955:
  9518  17D0  1825               	btfsc	___xxtofl@exp,0
  9519  17D1  2FDA               	goto	i1l956
  9520  17D2  30FF               	movlw	255
  9521  17D3  05A6               	andwf	___xxtofl@arg,f
  9522  17D4  30FF               	movlw	255
  9523  17D5  05A7               	andwf	___xxtofl@arg+1,f
  9524  17D6  307F               	movlw	127
  9525  17D7  05A8               	andwf	___xxtofl@arg+2,f
  9526  17D8  30FF               	movlw	255
  9527  17D9  05A9               	andwf	___xxtofl@arg+3,f
  9528  17DA                     i1l956:
  9529  17DA  1003               	clrc
  9530  17DB  0CA5               	rrf	___xxtofl@exp,f
  9531  17DC  0825               	movf	___xxtofl@exp,w
  9532  17DD  00A0               	movwf	??___xxtofl
  9533  17DE  01A1               	clrf	??___xxtofl+1
  9534  17DF  01A2               	clrf	??___xxtofl+2
  9535  17E0  01A3               	clrf	??___xxtofl+3
  9536  17E1  3018               	movlw	24
  9537  17E2                     u430_25:
  9538  17E2  1003               	clrc
  9539  17E3  0DA0               	rlf	??___xxtofl,f
  9540  17E4  0DA1               	rlf	??___xxtofl+1,f
  9541  17E5  0DA2               	rlf	??___xxtofl+2,f
  9542  17E6  0DA3               	rlf	??___xxtofl+3,f
  9543  17E7  3EFF               	addlw	-1
  9544  17E8  1D03               	skipz
  9545  17E9  2FE2               	goto	u430_25
  9546  17EA  0820               	movf	??___xxtofl,w
  9547  17EB  04A6               	iorwf	___xxtofl@arg,f
  9548  17EC  0821               	movf	??___xxtofl+1,w
  9549  17ED  04A7               	iorwf	___xxtofl@arg+1,f
  9550  17EE  0822               	movf	??___xxtofl+2,w
  9551  17EF  04A8               	iorwf	___xxtofl@arg+2,f
  9552  17F0  0823               	movf	??___xxtofl+3,w
  9553  17F1  04A9               	iorwf	___xxtofl@arg+3,f
  9554  17F2  0824               	movf	___xxtofl@sign,w
  9555  17F3  1D03               	btfss	3,2
  9556  17F4  1FFC               	btfss	___xxtofl@val+3,7
  9557  17F5  2FF7               	goto	i1l3501
  9558  17F6  17A9               	bsf	___xxtofl@arg+3,7
  9559  17F7                     i1l3501:
  9560  17F7  0829               	movf	___xxtofl@arg+3,w
  9561  17F8  00FC               	movwf	?___xxtofl+3
  9562  17F9  0828               	movf	___xxtofl@arg+2,w
  9563  17FA  00FB               	movwf	?___xxtofl+2
  9564  17FB  0827               	movf	___xxtofl@arg+1,w
  9565  17FC  00FA               	movwf	?___xxtofl+1
  9566  17FD  0826               	movf	___xxtofl@arg,w
  9567  17FE  00F9               	movwf	?___xxtofl
  9568  17FF  0008               	return
  9569  1800                     __end_of___xxtofl:
  9570                           
  9571                           	psect	text42
  9572  1598                     __ptext42:	
  9573 ;; *************** function ___flge *****************
  9574 ;; Defined at:
  9575 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\flge.c"
  9576 ;; Parameters:    Size  Location     Type
  9577 ;;  ff1             4    0[COMMON] unsigned char 
  9578 ;;  ff2             4    4[COMMON] unsigned char 
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;		None
  9581 ;; Return value:  Size  Location     Type
  9582 ;;		None               void
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0
  9585 ;; Tracked objects:
  9586 ;;		On entry : 300/0
  9587 ;;		On exit  : 300/0
  9588 ;;		Unchanged: 300/0
  9589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9590 ;;      Params:         8       0       0       0       0
  9591 ;;      Locals:         0       0       0       0       0
  9592 ;;      Temps:          4       0       0       0       0
  9593 ;;      Totals:        12       0       0       0       0
  9594 ;;Total ram usage:       12 bytes
  9595 ;; Hardware stack levels used: 1
  9596 ;; This function calls:
  9597 ;;		Nothing
  9598 ;; This function is called by:
  9599 ;;		_log
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603  1598                     ___flge:	
  9604                           ;psect for function ___flge
  9605                           
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in ___flge: [wreg+status,2+status,0]
  9609  1598  3000               	movlw	0
  9610  1599  0570               	andwf	___flge@ff1,w
  9611  159A  00F8               	movwf	??___flge
  9612  159B  3000               	movlw	0
  9613  159C  0571               	andwf	___flge@ff1+1,w
  9614  159D  00F9               	movwf	??___flge+1
  9615  159E  3080               	movlw	128
  9616  159F  0572               	andwf	___flge@ff1+2,w
  9617  15A0  00FA               	movwf	??___flge+2
  9618  15A1  307F               	movlw	127
  9619  15A2  0573               	andwf	___flge@ff1+3,w
  9620  15A3  00FB               	movwf	??___flge+3
  9621  15A4  087B               	movf	??___flge+3,w
  9622  15A5  047A               	iorwf	??___flge+2,w
  9623  15A6  0479               	iorwf	??___flge+1,w
  9624  15A7  0478               	iorwf	??___flge,w
  9625  15A8  1D03               	skipz
  9626  15A9  2DB2               	goto	i1l683
  9627  15AA  3000               	movlw	0
  9628  15AB  00F3               	movwf	___flge@ff1+3
  9629  15AC  3000               	movlw	0
  9630  15AD  00F2               	movwf	___flge@ff1+2
  9631  15AE  3000               	movlw	0
  9632  15AF  00F1               	movwf	___flge@ff1+1
  9633  15B0  3000               	movlw	0
  9634  15B1  00F0               	movwf	___flge@ff1
  9635  15B2                     i1l683:
  9636  15B2  3000               	movlw	0
  9637  15B3  0574               	andwf	___flge@ff2,w
  9638  15B4  00F8               	movwf	??___flge
  9639  15B5  3000               	movlw	0
  9640  15B6  0575               	andwf	___flge@ff2+1,w
  9641  15B7  00F9               	movwf	??___flge+1
  9642  15B8  3080               	movlw	128
  9643  15B9  0576               	andwf	___flge@ff2+2,w
  9644  15BA  00FA               	movwf	??___flge+2
  9645  15BB  307F               	movlw	127
  9646  15BC  0577               	andwf	___flge@ff2+3,w
  9647  15BD  00FB               	movwf	??___flge+3
  9648  15BE  087B               	movf	??___flge+3,w
  9649  15BF  047A               	iorwf	??___flge+2,w
  9650  15C0  0479               	iorwf	??___flge+1,w
  9651  15C1  0478               	iorwf	??___flge,w
  9652  15C2  1D03               	skipz
  9653  15C3  2DCC               	goto	i1l3305
  9654  15C4  3000               	movlw	0
  9655  15C5  00F7               	movwf	___flge@ff2+3
  9656  15C6  3000               	movlw	0
  9657  15C7  00F6               	movwf	___flge@ff2+2
  9658  15C8  3000               	movlw	0
  9659  15C9  00F5               	movwf	___flge@ff2+1
  9660  15CA  3000               	movlw	0
  9661  15CB  00F4               	movwf	___flge@ff2
  9662  15CC                     i1l3305:
  9663  15CC  1FF3               	btfss	___flge@ff1+3,7
  9664  15CD  2DF2               	goto	i1l3309
  9665  15CE  3000               	movlw	0
  9666  15CF  00F8               	movwf	??___flge
  9667  15D0  3000               	movlw	0
  9668  15D1  00F9               	movwf	??___flge+1
  9669  15D2  3000               	movlw	0
  9670  15D3  00FA               	movwf	??___flge+2
  9671  15D4  3080               	movlw	128
  9672  15D5  00FB               	movwf	??___flge+3
  9673  15D6  0870               	movf	___flge@ff1,w
  9674  15D7  02F8               	subwf	??___flge,f
  9675  15D8  0871               	movf	___flge@ff1+1,w
  9676  15D9  1C03               	skipc
  9677  15DA  0F71               	incfsz	___flge@ff1+1,w
  9678  15DB  2DDD               	goto	u385_21
  9679  15DC  2DDE               	goto	u385_22
  9680  15DD                     u385_21:
  9681  15DD  02F9               	subwf	??___flge+1,f
  9682  15DE                     u385_22:
  9683  15DE  0872               	movf	___flge@ff1+2,w
  9684  15DF  1C03               	skipc
  9685  15E0  0F72               	incfsz	___flge@ff1+2,w
  9686  15E1  2DE3               	goto	u385_23
  9687  15E2  2DE4               	goto	u385_24
  9688  15E3                     u385_23:
  9689  15E3  02FA               	subwf	??___flge+2,f
  9690  15E4                     u385_24:
  9691  15E4  0873               	movf	___flge@ff1+3,w
  9692  15E5  1C03               	skipc
  9693  15E6  0F73               	incfsz	___flge@ff1+3,w
  9694  15E7  2DE9               	goto	u385_25
  9695  15E8  2DEA               	goto	u385_26
  9696  15E9                     u385_25:
  9697  15E9  02FB               	subwf	??___flge+3,f
  9698  15EA                     u385_26:
  9699  15EA  087B               	movf	??___flge+3,w
  9700  15EB  00F3               	movwf	___flge@ff1+3
  9701  15EC  087A               	movf	??___flge+2,w
  9702  15ED  00F2               	movwf	___flge@ff1+2
  9703  15EE  0879               	movf	??___flge+1,w
  9704  15EF  00F1               	movwf	___flge@ff1+1
  9705  15F0  0878               	movf	??___flge,w
  9706  15F1  00F0               	movwf	___flge@ff1
  9707  15F2                     i1l3309:
  9708  15F2  1FF7               	btfss	___flge@ff2+3,7
  9709  15F3  2E18               	goto	i1l686
  9710  15F4  3000               	movlw	0
  9711  15F5  00F8               	movwf	??___flge
  9712  15F6  3000               	movlw	0
  9713  15F7  00F9               	movwf	??___flge+1
  9714  15F8  3000               	movlw	0
  9715  15F9  00FA               	movwf	??___flge+2
  9716  15FA  3080               	movlw	128
  9717  15FB  00FB               	movwf	??___flge+3
  9718  15FC  0874               	movf	___flge@ff2,w
  9719  15FD  02F8               	subwf	??___flge,f
  9720  15FE  0875               	movf	___flge@ff2+1,w
  9721  15FF  1C03               	skipc
  9722  1600  0F75               	incfsz	___flge@ff2+1,w
  9723  1601  2E03               	goto	u387_21
  9724  1602  2E04               	goto	u387_22
  9725  1603                     u387_21:
  9726  1603  02F9               	subwf	??___flge+1,f
  9727  1604                     u387_22:
  9728  1604  0876               	movf	___flge@ff2+2,w
  9729  1605  1C03               	skipc
  9730  1606  0F76               	incfsz	___flge@ff2+2,w
  9731  1607  2E09               	goto	u387_23
  9732  1608  2E0A               	goto	u387_24
  9733  1609                     u387_23:
  9734  1609  02FA               	subwf	??___flge+2,f
  9735  160A                     u387_24:
  9736  160A  0877               	movf	___flge@ff2+3,w
  9737  160B  1C03               	skipc
  9738  160C  0F77               	incfsz	___flge@ff2+3,w
  9739  160D  2E0F               	goto	u387_25
  9740  160E  2E10               	goto	u387_26
  9741  160F                     u387_25:
  9742  160F  02FB               	subwf	??___flge+3,f
  9743  1610                     u387_26:
  9744  1610  087B               	movf	??___flge+3,w
  9745  1611  00F7               	movwf	___flge@ff2+3
  9746  1612  087A               	movf	??___flge+2,w
  9747  1613  00F6               	movwf	___flge@ff2+2
  9748  1614  0879               	movf	??___flge+1,w
  9749  1615  00F5               	movwf	___flge@ff2+1
  9750  1616  0878               	movf	??___flge,w
  9751  1617  00F4               	movwf	___flge@ff2
  9752  1618                     i1l686:
  9753  1618  3080               	movlw	128
  9754  1619  06F3               	xorwf	___flge@ff1+3,f
  9755  161A  3080               	movlw	128
  9756  161B  06F7               	xorwf	___flge@ff2+3,f
  9757  161C  0877               	movf	___flge@ff2+3,w
  9758  161D  0273               	subwf	___flge@ff1+3,w
  9759  161E  1D03               	skipz
  9760  161F  0008               	return
  9761  1620  0876               	movf	___flge@ff2+2,w
  9762  1621  0272               	subwf	___flge@ff1+2,w
  9763  1622  1D03               	skipz
  9764  1623  0008               	return
  9765  1624  0875               	movf	___flge@ff2+1,w
  9766  1625  0271               	subwf	___flge@ff1+1,w
  9767  1626  1D03               	skipz
  9768  1627  0008               	return
  9769  1628  0874               	movf	___flge@ff2,w
  9770  1629  0270               	subwf	___flge@ff1,w
  9771  162A  0008               	return
  9772  162B                     __end_of___flge:
  9773                           
  9774                           	psect	text43
  9775  1F4D                     __ptext43:	
  9776 ;; *************** function _adc_read *****************
  9777 ;; Defined at:
  9778 ;;		line 66 in file "adc.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  2    0[COMMON] unsigned int 
  9785 ;; Registers used:
  9786 ;;		wreg
  9787 ;; Tracked objects:
  9788 ;;		On entry : 300/100
  9789 ;;		On exit  : 300/100
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9792 ;;      Params:         2       0       0       0       0
  9793 ;;      Locals:         0       0       0       0       0
  9794 ;;      Temps:          0       0       0       0       0
  9795 ;;      Totals:         2       0       0       0       0
  9796 ;;Total ram usage:        2 bytes
  9797 ;; Hardware stack levels used: 1
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_slave
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805  1F4D                     _adc_read:	
  9806                           ;psect for function _adc_read
  9807                           
  9808                           
  9809                           ;adc.c: 67:     PIR1bits.ADIF = 0;
  9810                           
  9811                           ;incstack = 0
  9812                           ; Regs used in _adc_read: [wreg]
  9813  1F4D  1283               	bcf	3,5	;RP0=0, select bank0
  9814  1F4E  130C               	bcf	12,6	;volatile
  9815                           
  9816                           ;adc.c: 68:     return ((ADRESH << 8) + ADRESL);
  9817  1F4F  081E               	movf	30,w	;volatile
  9818  1F50  00F1               	movwf	?_adc_read+1
  9819  1F51  1683               	bsf	3,5	;RP0=1, select bank1
  9820  1F52  081E               	movf	30,w	;volatile
  9821  1F53  00F0               	movwf	?_adc_read
  9822  1F54  0008               	return
  9823  1F55                     __end_of_adc_read:
  9824                           
  9825                           	psect	text44
  9826  115B                     __ptext44:	
  9827 ;; *************** function ___lwdiv *****************
  9828 ;; Defined at:
  9829 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  9830 ;; Parameters:    Size  Location     Type
  9831 ;;  divisor         2    0[COMMON] unsigned int 
  9832 ;;  dividend        2    2[COMMON] unsigned int 
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;  quotient        2    5[COMMON] unsigned int 
  9835 ;;  counter         1    7[COMMON] unsigned char 
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  2    0[COMMON] unsigned int 
  9838 ;; Registers used:
  9839 ;;		wreg, status,2, status,0
  9840 ;; Tracked objects:
  9841 ;;		On entry : 300/100
  9842 ;;		On exit  : 300/100
  9843 ;;		Unchanged: 300/0
  9844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9845 ;;      Params:         4       0       0       0       0
  9846 ;;      Locals:         3       0       0       0       0
  9847 ;;      Temps:          1       0       0       0       0
  9848 ;;      Totals:         8       0       0       0       0
  9849 ;;Total ram usage:        8 bytes
  9850 ;; Hardware stack levels used: 1
  9851 ;; This function calls:
  9852 ;;		Nothing
  9853 ;; This function is called by:
  9854 ;;		_slave
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858  115B                     ___lwdiv:	
  9859                           ;psect for function ___lwdiv
  9860                           
  9861                           
  9862                           ;incstack = 0
  9863                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9864  115B  01F5               	clrf	___lwdiv@quotient
  9865  115C  01F6               	clrf	___lwdiv@quotient+1
  9866  115D  0870               	movf	___lwdiv@divisor,w
  9867  115E  0471               	iorwf	___lwdiv@divisor+1,w
  9868  115F  1903               	btfsc	3,2
  9869  1160  2992               	goto	i1l3873
  9870  1161  01F7               	clrf	___lwdiv@counter
  9871  1162  0AF7               	incf	___lwdiv@counter,f
  9872  1163                     i1l3861:
  9873  1163  1BF1               	btfsc	___lwdiv@divisor+1,7
  9874  1164  2971               	goto	i1l3863
  9875  1165  3001               	movlw	1
  9876  1166                     u484_25:
  9877  1166  1003               	clrc
  9878  1167  0DF0               	rlf	___lwdiv@divisor,f
  9879  1168  0DF1               	rlf	___lwdiv@divisor+1,f
  9880  1169  3EFF               	addlw	-1
  9881  116A  1D03               	skipz
  9882  116B  2966               	goto	u484_25
  9883  116C  3001               	movlw	1
  9884  116D  00F4               	movwf	??___lwdiv
  9885  116E  0874               	movf	??___lwdiv,w
  9886  116F  07F7               	addwf	___lwdiv@counter,f
  9887  1170  2963               	goto	i1l3861
  9888  1171                     i1l3863:
  9889  1171  3001               	movlw	1
  9890  1172                     u486_25:
  9891  1172  1003               	clrc
  9892  1173  0DF5               	rlf	___lwdiv@quotient,f
  9893  1174  0DF6               	rlf	___lwdiv@quotient+1,f
  9894  1175  3EFF               	addlw	-1
  9895  1176  1D03               	skipz
  9896  1177  2972               	goto	u486_25
  9897  1178  0871               	movf	___lwdiv@divisor+1,w
  9898  1179  0273               	subwf	___lwdiv@dividend+1,w
  9899  117A  1D03               	skipz
  9900  117B  297E               	goto	u487_25
  9901  117C  0870               	movf	___lwdiv@divisor,w
  9902  117D  0272               	subwf	___lwdiv@dividend,w
  9903  117E                     u487_25:
  9904  117E  1C03               	skipc
  9905  117F  2987               	goto	i1l3869
  9906  1180  0870               	movf	___lwdiv@divisor,w
  9907  1181  02F2               	subwf	___lwdiv@dividend,f
  9908  1182  0871               	movf	___lwdiv@divisor+1,w
  9909  1183  1C03               	skipc
  9910  1184  03F3               	decf	___lwdiv@dividend+1,f
  9911  1185  02F3               	subwf	___lwdiv@dividend+1,f
  9912  1186  1475               	bsf	___lwdiv@quotient,0
  9913  1187                     i1l3869:
  9914  1187  3001               	movlw	1
  9915  1188                     u488_25:
  9916  1188  1003               	clrc
  9917  1189  0CF1               	rrf	___lwdiv@divisor+1,f
  9918  118A  0CF0               	rrf	___lwdiv@divisor,f
  9919  118B  3EFF               	addlw	-1
  9920  118C  1D03               	skipz
  9921  118D  2988               	goto	u488_25
  9922  118E  3001               	movlw	1
  9923  118F  02F7               	subwf	___lwdiv@counter,f
  9924  1190  1D03               	btfss	3,2
  9925  1191  2971               	goto	i1l3863
  9926  1192                     i1l3873:
  9927  1192  0876               	movf	___lwdiv@quotient+1,w
  9928  1193  00F1               	movwf	?___lwdiv+1
  9929  1194  0875               	movf	___lwdiv@quotient,w
  9930  1195  00F0               	movwf	?___lwdiv
  9931  1196  0008               	return
  9932  1197                     __end_of___lwdiv:
  9933                           
  9934                           	psect	text45
  9935  1F9F                     __ptext45:	
  9936 ;; *************** function ___flsub *****************
  9937 ;; Defined at:
  9938 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\sprcadd.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;  a               4   69[BANK0 ] unsigned int 
  9941 ;;  b               4   73[BANK0 ] unsigned int 
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;		None
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  4   69[BANK0 ] unsigned int 
  9946 ;; Registers used:
  9947 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9948 ;; Tracked objects:
  9949 ;;		On entry : 300/0
  9950 ;;		On exit  : 300/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9953 ;;      Params:         0       8       0       0       0
  9954 ;;      Locals:         0       0       0       0       0
  9955 ;;      Temps:          0       0       0       0       0
  9956 ;;      Totals:         0       8       0       0       0
  9957 ;;Total ram usage:        8 bytes
  9958 ;; Hardware stack levels used: 1
  9959 ;; Hardware stack levels required when called: 1
  9960 ;; This function calls:
  9961 ;;		___fladd
  9962 ;; This function is called by:
  9963 ;;		_slave
  9964 ;; This function uses a non-reentrant model
  9965 ;;
  9966                           
  9967  1F9F                     ___flsub:	
  9968                           ;psect for function ___flsub
  9969                           
  9970                           
  9971                           ;incstack = 0
  9972                           ; Regs used in ___flsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9973  1F9F  3080               	movlw	128
  9974  1FA0  06E8               	xorwf	___flsub@a+3,f
  9975  1FA1  086C               	movf	___flsub@b+3,w
  9976  1FA2  00AD               	movwf	___fladd@b+3
  9977  1FA3  086B               	movf	___flsub@b+2,w
  9978  1FA4  00AC               	movwf	___fladd@b+2
  9979  1FA5  086A               	movf	___flsub@b+1,w
  9980  1FA6  00AB               	movwf	___fladd@b+1
  9981  1FA7  0869               	movf	___flsub@b,w
  9982  1FA8  00AA               	movwf	___fladd@b
  9983  1FA9  0868               	movf	___flsub@a+3,w
  9984  1FAA  00B1               	movwf	___fladd@a+3
  9985  1FAB  0867               	movf	___flsub@a+2,w
  9986  1FAC  00B0               	movwf	___fladd@a+2
  9987  1FAD  0866               	movf	___flsub@a+1,w
  9988  1FAE  00AF               	movwf	___fladd@a+1
  9989  1FAF  0865               	movf	___flsub@a,w
  9990  1FB0  00AE               	movwf	___fladd@a
  9991  1FB1  120A  118A  25B7   	fcall	___fladd
  9992  1FB4  082D               	movf	?___fladd+3,w
  9993  1FB5  00E8               	movwf	?___flsub+3
  9994  1FB6  082C               	movf	?___fladd+2,w
  9995  1FB7  00E7               	movwf	?___flsub+2
  9996  1FB8  082B               	movf	?___fladd+1,w
  9997  1FB9  00E6               	movwf	?___flsub+1
  9998  1FBA  082A               	movf	?___fladd,w
  9999  1FBB  00E5               	movwf	?___flsub
 10000  1FBC  0008               	return
 10001  1FBD                     __end_of___flsub:
 10002                           
 10003                           	psect	text46
 10004  05B7                     __ptext46:	
 10005 ;; *************** function ___fladd *****************
 10006 ;; Defined at:
 10007 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\sprcadd.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;  b               4   10[BANK0 ] unsigned int 
 10010 ;;  a               4   14[BANK0 ] unsigned int 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  grs             1   29[BANK0 ] unsigned char 
 10013 ;;  bexp            1   28[BANK0 ] unsigned char 
 10014 ;;  aexp            1   27[BANK0 ] unsigned char 
 10015 ;;  signs           1   26[BANK0 ] unsigned char 
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  4   10[BANK0 ] unsigned char 
 10018 ;; Registers used:
 10019 ;;		wreg, status,2, status,0, btemp+1
 10020 ;; Tracked objects:
 10021 ;;		On entry : 300/0
 10022 ;;		On exit  : 300/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10025 ;;      Params:         0       8       0       0       0
 10026 ;;      Locals:         0       4       0       0       0
 10027 ;;      Temps:          0       8       0       0       0
 10028 ;;      Totals:         0      20       0       0       0
 10029 ;;Total ram usage:       20 bytes
 10030 ;; Hardware stack levels used: 1
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_slave
 10035 ;;		_map
 10036 ;;		___flsub
 10037 ;;		_log
 10038 ;;		_eval_poly
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042  05B7                     ___fladd:	
 10043                           ;psect for function ___fladd
 10044                           
 10045                           
 10046                           ;incstack = 0
 10047                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
 10048  05B7  082D               	movf	___fladd@b+3,w
 10049  05B8  3980               	andlw	128
 10050  05B9  00B2               	movwf	??___fladd
 10051  05BA  0832               	movf	??___fladd,w
 10052  05BB  00BA               	movwf	___fladd@signs
 10053  05BC  082D               	movf	___fladd@b+3,w
 10054  05BD  00B2               	movwf	??___fladd
 10055  05BE  0732               	addwf	??___fladd,w
 10056  05BF  00B3               	movwf	??___fladd+1
 10057  05C0  0833               	movf	??___fladd+1,w
 10058  05C1  00BC               	movwf	___fladd@bexp
 10059  05C2  1BAC               	btfsc	___fladd@b+2,7
 10060  05C3  143C               	bsf	___fladd@bexp,0
 10061  05C4  083C               	movf	___fladd@bexp,w
 10062  05C5  1903               	btfsc	3,2
 10063  05C6  2DD5               	goto	i1l2709
 10064  05C7  0A3C               	incf	___fladd@bexp,w
 10065  05C8  1D03               	btfss	3,2
 10066  05C9  2DD2               	goto	i1l2705
 10067  05CA  3000               	movlw	0
 10068  05CB  00AD               	movwf	___fladd@b+3
 10069  05CC  3000               	movlw	0
 10070  05CD  00AC               	movwf	___fladd@b+2
 10071  05CE  3000               	movlw	0
 10072  05CF  00AB               	movwf	___fladd@b+1
 10073  05D0  3000               	movlw	0
 10074  05D1  00AA               	movwf	___fladd@b
 10075  05D2                     i1l2705:
 10076  05D2  17AC               	bsf	___fladd@b+2,7
 10077  05D3  01AD               	clrf	___fladd@b+3
 10078  05D4  2DDD               	goto	i1l2711
 10079  05D5                     i1l2709:
 10080  05D5  3000               	movlw	0
 10081  05D6  00AD               	movwf	___fladd@b+3
 10082  05D7  3000               	movlw	0
 10083  05D8  00AC               	movwf	___fladd@b+2
 10084  05D9  3000               	movlw	0
 10085  05DA  00AB               	movwf	___fladd@b+1
 10086  05DB  3000               	movlw	0
 10087  05DC  00AA               	movwf	___fladd@b
 10088  05DD                     i1l2711:
 10089  05DD  0831               	movf	___fladd@a+3,w
 10090  05DE  3980               	andlw	128
 10091  05DF  00B2               	movwf	??___fladd
 10092  05E0  0832               	movf	??___fladd,w
 10093  05E1  00BB               	movwf	___fladd@aexp
 10094  05E2  083B               	movf	___fladd@aexp,w
 10095  05E3  063A               	xorwf	___fladd@signs,w
 10096  05E4  1D03               	btfss	3,2
 10097  05E5  173A               	bsf	___fladd@signs,6
 10098  05E6  0831               	movf	___fladd@a+3,w
 10099  05E7  00B2               	movwf	??___fladd
 10100  05E8  0732               	addwf	??___fladd,w
 10101  05E9  00B3               	movwf	??___fladd+1
 10102  05EA  0833               	movf	??___fladd+1,w
 10103  05EB  00BB               	movwf	___fladd@aexp
 10104  05EC  1BB0               	btfsc	___fladd@a+2,7
 10105  05ED  143B               	bsf	___fladd@aexp,0
 10106  05EE  083B               	movf	___fladd@aexp,w
 10107  05EF  1903               	btfsc	3,2
 10108  05F0  2DFF               	goto	i1l2733
 10109  05F1  0A3B               	incf	___fladd@aexp,w
 10110  05F2  1D03               	btfss	3,2
 10111  05F3  2DFC               	goto	i1l2729
 10112  05F4  3000               	movlw	0
 10113  05F5  00B1               	movwf	___fladd@a+3
 10114  05F6  3000               	movlw	0
 10115  05F7  00B0               	movwf	___fladd@a+2
 10116  05F8  3000               	movlw	0
 10117  05F9  00AF               	movwf	___fladd@a+1
 10118  05FA  3000               	movlw	0
 10119  05FB  00AE               	movwf	___fladd@a
 10120  05FC                     i1l2729:
 10121  05FC  17B0               	bsf	___fladd@a+2,7
 10122  05FD  01B1               	clrf	___fladd@a+3
 10123  05FE  2E07               	goto	i1l802
 10124  05FF                     i1l2733:
 10125  05FF  3000               	movlw	0
 10126  0600  00B1               	movwf	___fladd@a+3
 10127  0601  3000               	movlw	0
 10128  0602  00B0               	movwf	___fladd@a+2
 10129  0603  3000               	movlw	0
 10130  0604  00AF               	movwf	___fladd@a+1
 10131  0605  3000               	movlw	0
 10132  0606  00AE               	movwf	___fladd@a
 10133  0607                     i1l802:
 10134  0607  083C               	movf	___fladd@bexp,w
 10135  0608  023B               	subwf	___fladd@aexp,w
 10136  0609  1803               	skipnc
 10137  060A  2E4D               	goto	i1l2769
 10138  060B  1F3A               	btfss	___fladd@signs,6
 10139  060C  2E11               	goto	i1l2739
 10140  060D  3080               	movlw	128
 10141  060E  00B2               	movwf	??___fladd
 10142  060F  0832               	movf	??___fladd,w
 10143  0610  06BA               	xorwf	___fladd@signs,f
 10144  0611                     i1l2739:
 10145  0611  083C               	movf	___fladd@bexp,w
 10146  0612  00B2               	movwf	??___fladd
 10147  0613  0832               	movf	??___fladd,w
 10148  0614  00BD               	movwf	___fladd@grs
 10149  0615  083B               	movf	___fladd@aexp,w
 10150  0616  00B2               	movwf	??___fladd
 10151  0617  0832               	movf	??___fladd,w
 10152  0618  00BC               	movwf	___fladd@bexp
 10153  0619  083D               	movf	___fladd@grs,w
 10154  061A  00B2               	movwf	??___fladd
 10155  061B  0832               	movf	??___fladd,w
 10156  061C  00BB               	movwf	___fladd@aexp
 10157  061D  082A               	movf	___fladd@b,w
 10158  061E  00B2               	movwf	??___fladd
 10159  061F  0832               	movf	??___fladd,w
 10160  0620  00BD               	movwf	___fladd@grs
 10161  0621  082E               	movf	___fladd@a,w
 10162  0622  00B2               	movwf	??___fladd
 10163  0623  0832               	movf	??___fladd,w
 10164  0624  00AA               	movwf	___fladd@b
 10165  0625  083D               	movf	___fladd@grs,w
 10166  0626  00B2               	movwf	??___fladd
 10167  0627  0832               	movf	??___fladd,w
 10168  0628  00AE               	movwf	___fladd@a
 10169  0629  082B               	movf	___fladd@b+1,w
 10170  062A  00B2               	movwf	??___fladd
 10171  062B  0832               	movf	??___fladd,w
 10172  062C  00BD               	movwf	___fladd@grs
 10173  062D  082F               	movf	___fladd@a+1,w
 10174  062E  00B2               	movwf	??___fladd
 10175  062F  0832               	movf	??___fladd,w
 10176  0630  00AB               	movwf	___fladd@b+1
 10177  0631  083D               	movf	___fladd@grs,w
 10178  0632  00B2               	movwf	??___fladd
 10179  0633  0832               	movf	??___fladd,w
 10180  0634  00AF               	movwf	___fladd@a+1
 10181  0635  082C               	movf	___fladd@b+2,w
 10182  0636  00B2               	movwf	??___fladd
 10183  0637  0832               	movf	??___fladd,w
 10184  0638  00BD               	movwf	___fladd@grs
 10185  0639  0830               	movf	___fladd@a+2,w
 10186  063A  00B2               	movwf	??___fladd
 10187  063B  0832               	movf	??___fladd,w
 10188  063C  00AC               	movwf	___fladd@b+2
 10189  063D  083D               	movf	___fladd@grs,w
 10190  063E  00B2               	movwf	??___fladd
 10191  063F  0832               	movf	??___fladd,w
 10192  0640  00B0               	movwf	___fladd@a+2
 10193  0641  082D               	movf	___fladd@b+3,w
 10194  0642  00B2               	movwf	??___fladd
 10195  0643  0832               	movf	??___fladd,w
 10196  0644  00BD               	movwf	___fladd@grs
 10197  0645  0831               	movf	___fladd@a+3,w
 10198  0646  00B2               	movwf	??___fladd
 10199  0647  0832               	movf	??___fladd,w
 10200  0648  00AD               	movwf	___fladd@b+3
 10201  0649  083D               	movf	___fladd@grs,w
 10202  064A  00B2               	movwf	??___fladd
 10203  064B  0832               	movf	??___fladd,w
 10204  064C  00B1               	movwf	___fladd@a+3
 10205  064D                     i1l2769:
 10206  064D  01BD               	clrf	___fladd@grs
 10207  064E  083B               	movf	___fladd@aexp,w
 10208  064F  00B2               	movwf	??___fladd
 10209  0650  01B3               	clrf	??___fladd+1
 10210  0651  0833               	movf	??___fladd+1,w
 10211  0652  00B5               	movwf	??___fladd+3
 10212  0653  083C               	movf	___fladd@bexp,w
 10213  0654  0232               	subwf	??___fladd,w
 10214  0655  00B4               	movwf	??___fladd+2
 10215  0656  1C03               	skipc
 10216  0657  03B5               	decf	??___fladd+3,f
 10217  0658  0835               	movf	??___fladd+3,w
 10218  0659  3A80               	xorlw	128
 10219  065A  00FF               	movwf	127
 10220  065B  3080               	movlw	128
 10221  065C  027F               	subwf	127,w
 10222  065D  1D03               	skipz
 10223  065E  2E61               	goto	u281_25
 10224  065F  301A               	movlw	26
 10225  0660  0234               	subwf	??___fladd+2,w
 10226  0661                     u281_25:
 10227  0661  1C03               	skipc
 10228  0662  2E9A               	goto	i1l2787
 10229  0663  1283               	bcf	3,5	;RP0=0, select bank0
 10230  0664  1303               	bcf	3,6	;RP1=0, select bank0
 10231  0665  082D               	movf	___fladd@b+3,w
 10232  0666  042C               	iorwf	___fladd@b+2,w
 10233  0667  042B               	iorwf	___fladd@b+1,w
 10234  0668  042A               	iorwf	___fladd@b,w
 10235  0669  1903               	btfsc	3,2
 10236  066A  2E6D               	goto	u282_20
 10237  066B  3001               	movlw	1
 10238  066C  2E6E               	goto	u283_20
 10239  066D                     u282_20:
 10240  066D  3000               	movlw	0
 10241  066E                     u283_20:
 10242  066E  00B2               	movwf	??___fladd
 10243  066F  0832               	movf	??___fladd,w
 10244  0670  00BD               	movwf	___fladd@grs
 10245  0671  3000               	movlw	0
 10246  0672  00AD               	movwf	___fladd@b+3
 10247  0673  3000               	movlw	0
 10248  0674  00AC               	movwf	___fladd@b+2
 10249  0675  3000               	movlw	0
 10250  0676  00AB               	movwf	___fladd@b+1
 10251  0677  3000               	movlw	0
 10252  0678  00AA               	movwf	___fladd@b
 10253  0679  083B               	movf	___fladd@aexp,w
 10254  067A  00B2               	movwf	??___fladd
 10255  067B  0832               	movf	??___fladd,w
 10256  067C  00BC               	movwf	___fladd@bexp
 10257  067D  2EA0               	goto	i1l806
 10258  067E                     i1l808:
 10259  067E  1C3D               	btfss	___fladd@grs,0
 10260  067F  2E89               	goto	i1l2777
 10261  0680  083D               	movf	___fladd@grs,w
 10262  0681  00B2               	movwf	??___fladd
 10263  0682  1003               	clrc
 10264  0683  0C32               	rrf	??___fladd,w
 10265  0684  3801               	iorlw	1
 10266  0685  00B3               	movwf	??___fladd+1
 10267  0686  0833               	movf	??___fladd+1,w
 10268  0687  00BD               	movwf	___fladd@grs
 10269  0688  2E8B               	goto	i1l2779
 10270  0689                     i1l2777:
 10271  0689  1003               	clrc
 10272  068A  0CBD               	rrf	___fladd@grs,f
 10273  068B                     i1l2779:
 10274  068B  182A               	btfsc	___fladd@b,0
 10275  068C  17BD               	bsf	___fladd@grs,7
 10276  068D  3001               	movlw	1
 10277  068E  00B2               	movwf	??___fladd
 10278  068F                     u286_25:
 10279  068F  0D2D               	rlf	___fladd@b+3,w
 10280  0690  0CAD               	rrf	___fladd@b+3,f
 10281  0691  0CAC               	rrf	___fladd@b+2,f
 10282  0692  0CAB               	rrf	___fladd@b+1,f
 10283  0693  0CAA               	rrf	___fladd@b,f
 10284  0694  0BB2               	decfsz	??___fladd& (0+127),f
 10285  0695  2E8F               	goto	u286_25
 10286  0696  3001               	movlw	1
 10287  0697  00B2               	movwf	??___fladd
 10288  0698  0832               	movf	??___fladd,w
 10289  0699  07BC               	addwf	___fladd@bexp,f
 10290  069A                     i1l2787:
 10291  069A  1283               	bcf	3,5	;RP0=0, select bank0
 10292  069B  1303               	bcf	3,6	;RP1=0, select bank0
 10293  069C  083B               	movf	___fladd@aexp,w
 10294  069D  023C               	subwf	___fladd@bexp,w
 10295  069E  1C03               	skipc
 10296  069F  2E7E               	goto	i1l808
 10297  06A0                     i1l806:
 10298  06A0  1B3A               	btfsc	___fladd@signs,6
 10299  06A1  2EE1               	goto	i1l2813
 10300  06A2  083C               	movf	___fladd@bexp,w
 10301  06A3  1D03               	btfss	3,2
 10302  06A4  2EAE               	goto	i1l2795
 10303  06A5  3000               	movlw	0
 10304  06A6  00AD               	movwf	?___fladd+3
 10305  06A7  3000               	movlw	0
 10306  06A8  00AC               	movwf	?___fladd+2
 10307  06A9  3000               	movlw	0
 10308  06AA  00AB               	movwf	?___fladd+1
 10309  06AB  3000               	movlw	0
 10310  06AC  00AA               	movwf	?___fladd
 10311  06AD  0008               	return
 10312  06AE                     i1l2795:
 10313  06AE  082E               	movf	___fladd@a,w
 10314  06AF  07AA               	addwf	___fladd@b,f
 10315  06B0  082F               	movf	___fladd@a+1,w
 10316  06B1  1103               	clrz
 10317  06B2  1803               	skipnc
 10318  06B3  3E01               	addlw	1
 10319  06B4  1D03               	btfss	3,2
 10320  06B5  07AB               	addwf	___fladd@b+1,f
 10321  06B6  0830               	movf	___fladd@a+2,w
 10322  06B7  1103               	clrz
 10323  06B8  1803               	skipnc
 10324  06B9  3E01               	addlw	1
 10325  06BA  1D03               	btfss	3,2
 10326  06BB  07AC               	addwf	___fladd@b+2,f
 10327  06BC  0831               	movf	___fladd@a+3,w
 10328  06BD  1103               	clrz
 10329  06BE  1803               	skipnc
 10330  06BF  3E01               	addlw	1
 10331  06C0  1D03               	btfss	3,2
 10332  06C1  07AD               	addwf	___fladd@b+3,f
 10333  06C2  1C2D               	btfss	___fladd@b+3,0
 10334  06C3  2F83               	goto	i1l2847
 10335  06C4  1C3D               	btfss	___fladd@grs,0
 10336  06C5  2ECF               	goto	i1l2803
 10337  06C6  083D               	movf	___fladd@grs,w
 10338  06C7  00B2               	movwf	??___fladd
 10339  06C8  1003               	clrc
 10340  06C9  0C32               	rrf	??___fladd,w
 10341  06CA  3801               	iorlw	1
 10342  06CB  00B3               	movwf	??___fladd+1
 10343  06CC  0833               	movf	??___fladd+1,w
 10344  06CD  00BD               	movwf	___fladd@grs
 10345  06CE  2ED1               	goto	i1l2805
 10346  06CF                     i1l2803:
 10347  06CF  1003               	clrc
 10348  06D0  0CBD               	rrf	___fladd@grs,f
 10349  06D1                     i1l2805:
 10350  06D1  182A               	btfsc	___fladd@b,0
 10351  06D2  17BD               	bsf	___fladd@grs,7
 10352  06D3  3001               	movlw	1
 10353  06D4  00B2               	movwf	??___fladd
 10354  06D5                     u294_25:
 10355  06D5  0D2D               	rlf	___fladd@b+3,w
 10356  06D6  0CAD               	rrf	___fladd@b+3,f
 10357  06D7  0CAC               	rrf	___fladd@b+2,f
 10358  06D8  0CAB               	rrf	___fladd@b+1,f
 10359  06D9  0CAA               	rrf	___fladd@b,f
 10360  06DA  0BB2               	decfsz	??___fladd& (0+127),f
 10361  06DB  2ED5               	goto	u294_25
 10362  06DC  3001               	movlw	1
 10363  06DD  00B2               	movwf	??___fladd
 10364  06DE  0832               	movf	??___fladd,w
 10365  06DF  07BC               	addwf	___fladd@bexp,f
 10366  06E0  2F83               	goto	i1l2847
 10367  06E1                     i1l2813:
 10368  06E1  082D               	movf	___fladd@b+3,w
 10369  06E2  3A80               	xorlw	128
 10370  06E3  00FF               	movwf	127
 10371  06E4  0831               	movf	___fladd@a+3,w
 10372  06E5  3A80               	xorlw	128
 10373  06E6  027F               	subwf	127,w
 10374  06E7  1D03               	skipz
 10375  06E8  2EF3               	goto	u295_23
 10376  06E9  0830               	movf	___fladd@a+2,w
 10377  06EA  022C               	subwf	___fladd@b+2,w
 10378  06EB  1D03               	skipz
 10379  06EC  2EF3               	goto	u295_23
 10380  06ED  082F               	movf	___fladd@a+1,w
 10381  06EE  022B               	subwf	___fladd@b+1,w
 10382  06EF  1D03               	skipz
 10383  06F0  2EF3               	goto	u295_23
 10384  06F1  082E               	movf	___fladd@a,w
 10385  06F2  022A               	subwf	___fladd@b,w
 10386  06F3                     u295_23:
 10387  06F3  1803               	skipnc
 10388  06F4  2F4B               	goto	i1l2823
 10389  06F5  30FF               	movlw	255
 10390  06F6  00B2               	movwf	??___fladd
 10391  06F7  30FF               	movlw	255
 10392  06F8  00B3               	movwf	??___fladd+1
 10393  06F9  30FF               	movlw	255
 10394  06FA  00B4               	movwf	??___fladd+2
 10395  06FB  30FF               	movlw	255
 10396  06FC  00B5               	movwf	??___fladd+3
 10397  06FD  082E               	movf	___fladd@a,w
 10398  06FE  00B6               	movwf	??___fladd+4
 10399  06FF  082F               	movf	___fladd@a+1,w
 10400  0700  00B7               	movwf	??___fladd+5
 10401  0701  0830               	movf	___fladd@a+2,w
 10402  0702  00B8               	movwf	??___fladd+6
 10403  0703  0831               	movf	___fladd@a+3,w
 10404  0704  00B9               	movwf	??___fladd+7
 10405  0705  082A               	movf	___fladd@b,w
 10406  0706  02B6               	subwf	??___fladd+4,f
 10407  0707  082B               	movf	___fladd@b+1,w
 10408  0708  1C03               	skipc
 10409  0709  0F2B               	incfsz	___fladd@b+1,w
 10410  070A  2F0C               	goto	u296_21
 10411  070B  2F0D               	goto	u296_22
 10412  070C                     u296_21:
 10413  070C  02B7               	subwf	??___fladd+5,f
 10414  070D                     u296_22:
 10415  070D  082C               	movf	___fladd@b+2,w
 10416  070E  1C03               	skipc
 10417  070F  0F2C               	incfsz	___fladd@b+2,w
 10418  0710  2F12               	goto	u296_23
 10419  0711  2F13               	goto	u296_24
 10420  0712                     u296_23:
 10421  0712  02B8               	subwf	??___fladd+6,f
 10422  0713                     u296_24:
 10423  0713  082D               	movf	___fladd@b+3,w
 10424  0714  1C03               	skipc
 10425  0715  0F2D               	incfsz	___fladd@b+3,w
 10426  0716  2F18               	goto	u296_25
 10427  0717  2F19               	goto	u296_26
 10428  0718                     u296_25:
 10429  0718  02B9               	subwf	??___fladd+7,f
 10430  0719                     u296_26:
 10431  0719  0836               	movf	??___fladd+4,w
 10432  071A  07B2               	addwf	??___fladd,f
 10433  071B  0837               	movf	??___fladd+5,w
 10434  071C  1803               	skipnc
 10435  071D  0F37               	incfsz	??___fladd+5,w
 10436  071E  2F20               	goto	u297_20
 10437  071F  2F21               	goto	u297_21
 10438  0720                     u297_20:
 10439  0720  07B3               	addwf	??___fladd+1,f
 10440  0721                     u297_21:
 10441  0721  0838               	movf	??___fladd+6,w
 10442  0722  1803               	skipnc
 10443  0723  0F38               	incfsz	??___fladd+6,w
 10444  0724  2F26               	goto	u297_22
 10445  0725  2F27               	goto	u297_23
 10446  0726                     u297_22:
 10447  0726  07B4               	addwf	??___fladd+2,f
 10448  0727                     u297_23:
 10449  0727  0839               	movf	??___fladd+7,w
 10450  0728  1803               	skipnc
 10451  0729  0A39               	incf	??___fladd+7,w
 10452  072A  07B5               	addwf	??___fladd+3,f
 10453  072B  0835               	movf	??___fladd+3,w
 10454  072C  00AD               	movwf	___fladd@b+3
 10455  072D  0834               	movf	??___fladd+2,w
 10456  072E  00AC               	movwf	___fladd@b+2
 10457  072F  0833               	movf	??___fladd+1,w
 10458  0730  00AB               	movwf	___fladd@b+1
 10459  0731  0832               	movf	??___fladd,w
 10460  0732  00AA               	movwf	___fladd@b
 10461  0733  3080               	movlw	128
 10462  0734  00B2               	movwf	??___fladd
 10463  0735  0832               	movf	??___fladd,w
 10464  0736  06BA               	xorwf	___fladd@signs,f
 10465  0737  09BD               	comf	___fladd@grs,f
 10466  0738  0ABD               	incf	___fladd@grs,f
 10467  0739  083D               	movf	___fladd@grs,w
 10468  073A  1D03               	btfss	3,2
 10469  073B  2F59               	goto	i1l823
 10470  073C  3001               	movlw	1
 10471  073D  07AA               	addwf	___fladd@b,f
 10472  073E  3000               	movlw	0
 10473  073F  1803               	skipnc
 10474  0740  3001               	movlw	1
 10475  0741  07AB               	addwf	___fladd@b+1,f
 10476  0742  3000               	movlw	0
 10477  0743  1803               	skipnc
 10478  0744  3001               	movlw	1
 10479  0745  07AC               	addwf	___fladd@b+2,f
 10480  0746  3000               	movlw	0
 10481  0747  1803               	skipnc
 10482  0748  3001               	movlw	1
 10483  0749  07AD               	addwf	___fladd@b+3,f
 10484  074A  2F59               	goto	i1l823
 10485  074B                     i1l2823:
 10486  074B  082E               	movf	___fladd@a,w
 10487  074C  02AA               	subwf	___fladd@b,f
 10488  074D  082F               	movf	___fladd@a+1,w
 10489  074E  1C03               	skipc
 10490  074F  0F2F               	incfsz	___fladd@a+1,w
 10491  0750  02AB               	subwf	___fladd@b+1,f
 10492  0751  0830               	movf	___fladd@a+2,w
 10493  0752  1C03               	skipc
 10494  0753  0F30               	incfsz	___fladd@a+2,w
 10495  0754  02AC               	subwf	___fladd@b+2,f
 10496  0755  0831               	movf	___fladd@a+3,w
 10497  0756  1C03               	skipc
 10498  0757  0F31               	incfsz	___fladd@a+3,w
 10499  0758  02AD               	subwf	___fladd@b+3,f
 10500  0759                     i1l823:
 10501  0759  082D               	movf	___fladd@b+3,w
 10502  075A  042C               	iorwf	___fladd@b+2,w
 10503  075B  042B               	iorwf	___fladd@b+1,w
 10504  075C  042A               	iorwf	___fladd@b,w
 10505  075D  1D03               	skipz
 10506  075E  2F81               	goto	i1l2845
 10507  075F  083D               	movf	___fladd@grs,w
 10508  0760  1D03               	btfss	3,2
 10509  0761  2F81               	goto	i1l2845
 10510  0762  3000               	movlw	0
 10511  0763  00AD               	movwf	?___fladd+3
 10512  0764  3000               	movlw	0
 10513  0765  00AC               	movwf	?___fladd+2
 10514  0766  3000               	movlw	0
 10515  0767  00AB               	movwf	?___fladd+1
 10516  0768  3000               	movlw	0
 10517  0769  00AA               	movwf	?___fladd
 10518  076A  0008               	return
 10519  076B                     i1l2831:
 10520  076B  3001               	movlw	1
 10521  076C  00B2               	movwf	??___fladd
 10522  076D                     u301_25:
 10523  076D  1003               	clrc
 10524  076E  0DAA               	rlf	___fladd@b,f
 10525  076F  0DAB               	rlf	___fladd@b+1,f
 10526  0770  0DAC               	rlf	___fladd@b+2,f
 10527  0771  0DAD               	rlf	___fladd@b+3,f
 10528  0772  0BB2               	decfsz	??___fladd,f
 10529  0773  2F6D               	goto	u301_25
 10530  0774  1BBD               	btfsc	___fladd@grs,7
 10531  0775  142A               	bsf	___fladd@b,0
 10532  0776  1C3D               	btfss	___fladd@grs,0
 10533  0777  2F7A               	goto	i1l2839
 10534  0778  1403               	setc
 10535  0779  2F7B               	goto	L25
 10536  077A                     i1l2839:
 10537  077A  1003               	clrc
 10538  077B                     L25:
 10539  077B  0DBD               	rlf	___fladd@grs,f
 10540  077C  083C               	movf	___fladd@bexp,w
 10541  077D  1903               	btfsc	3,2
 10542  077E  2F81               	goto	i1l2845
 10543  077F  3001               	movlw	1
 10544  0780  02BC               	subwf	___fladd@bexp,f
 10545  0781                     i1l2845:
 10546  0781  1FAC               	btfss	___fladd@b+2,7
 10547  0782  2F6B               	goto	i1l2831
 10548  0783                     i1l2847:
 10549  0783  01BB               	clrf	___fladd@aexp
 10550  0784  1FBD               	btfss	___fladd@grs,7
 10551  0785  2F8E               	goto	i1l2857
 10552  0786  083D               	movf	___fladd@grs,w
 10553  0787  397F               	andlw	127
 10554  0788  1903               	btfsc	3,2
 10555  0789  182A               	btfsc	___fladd@b,0
 10556  078A  2F8C               	goto	i1l2853
 10557  078B  2F8E               	goto	i1l2857
 10558  078C                     i1l2853:
 10559  078C  01BB               	clrf	___fladd@aexp
 10560  078D  0ABB               	incf	___fladd@aexp,f
 10561  078E                     i1l2857:
 10562  078E  083B               	movf	___fladd@aexp,w
 10563  078F  1903               	btfsc	3,2
 10564  0790  2FC1               	goto	i1l836
 10565  0791  3001               	movlw	1
 10566  0792  07AA               	addwf	___fladd@b,f
 10567  0793  3000               	movlw	0
 10568  0794  1803               	skipnc
 10569  0795  3001               	movlw	1
 10570  0796  07AB               	addwf	___fladd@b+1,f
 10571  0797  3000               	movlw	0
 10572  0798  1803               	skipnc
 10573  0799  3001               	movlw	1
 10574  079A  07AC               	addwf	___fladd@b+2,f
 10575  079B  3000               	movlw	0
 10576  079C  1803               	skipnc
 10577  079D  3001               	movlw	1
 10578  079E  07AD               	addwf	___fladd@b+3,f
 10579  079F  1C2D               	btfss	___fladd@b+3,0
 10580  07A0  2FC1               	goto	i1l836
 10581  07A1  082A               	movf	___fladd@b,w
 10582  07A2  00B2               	movwf	??___fladd
 10583  07A3  082B               	movf	___fladd@b+1,w
 10584  07A4  00B3               	movwf	??___fladd+1
 10585  07A5  082C               	movf	___fladd@b+2,w
 10586  07A6  00B4               	movwf	??___fladd+2
 10587  07A7  082D               	movf	___fladd@b+3,w
 10588  07A8  00B5               	movwf	??___fladd+3
 10589  07A9  3001               	movlw	1
 10590  07AA  00B6               	movwf	??___fladd+4
 10591  07AB                     u311_25:
 10592  07AB  0D35               	rlf	??___fladd+3,w
 10593  07AC  0CB5               	rrf	??___fladd+3,f
 10594  07AD  0CB4               	rrf	??___fladd+2,f
 10595  07AE  0CB3               	rrf	??___fladd+1,f
 10596  07AF  0CB2               	rrf	??___fladd,f
 10597  07B0  0BB6               	decfsz	??___fladd+4,f
 10598  07B1  2FAB               	goto	u311_25
 10599  07B2  0835               	movf	??___fladd+3,w
 10600  07B3  00AD               	movwf	___fladd@b+3
 10601  07B4  0834               	movf	??___fladd+2,w
 10602  07B5  00AC               	movwf	___fladd@b+2
 10603  07B6  0833               	movf	??___fladd+1,w
 10604  07B7  00AB               	movwf	___fladd@b+1
 10605  07B8  0832               	movf	??___fladd,w
 10606  07B9  00AA               	movwf	___fladd@b
 10607  07BA  0A3C               	incf	___fladd@bexp,w
 10608  07BB  1903               	btfsc	3,2
 10609  07BC  2FC1               	goto	i1l836
 10610  07BD  3001               	movlw	1
 10611  07BE  00B2               	movwf	??___fladd
 10612  07BF  0832               	movf	??___fladd,w
 10613  07C0  07BC               	addwf	___fladd@bexp,f
 10614  07C1                     i1l836:
 10615  07C1  0A3C               	incf	___fladd@bexp,w
 10616  07C2  1D03               	btfss	3,2
 10617  07C3  083C               	movf	___fladd@bexp,w
 10618  07C4  1D03               	btfss	3,2
 10619  07C5  2FD1               	goto	i1l2875
 10620  07C6  3000               	movlw	0
 10621  07C7  00AD               	movwf	___fladd@b+3
 10622  07C8  3000               	movlw	0
 10623  07C9  00AC               	movwf	___fladd@b+2
 10624  07CA  3000               	movlw	0
 10625  07CB  00AB               	movwf	___fladd@b+1
 10626  07CC  3000               	movlw	0
 10627  07CD  00AA               	movwf	___fladd@b
 10628  07CE  083C               	movf	___fladd@bexp,w
 10629  07CF  1903               	btfsc	3,2
 10630  07D0  01BA               	clrf	___fladd@signs
 10631  07D1                     i1l2875:
 10632  07D1  1C3C               	btfss	___fladd@bexp,0
 10633  07D2  2FD5               	goto	i1l2879
 10634  07D3  17AC               	bsf	___fladd@b+2,7
 10635  07D4  2FD9               	goto	i1l844
 10636  07D5                     i1l2879:
 10637  07D5  307F               	movlw	127
 10638  07D6  00B2               	movwf	??___fladd
 10639  07D7  0832               	movf	??___fladd,w
 10640  07D8  05AC               	andwf	___fladd@b+2,f
 10641  07D9                     i1l844:
 10642  07D9  083C               	movf	___fladd@bexp,w
 10643  07DA  00B2               	movwf	??___fladd
 10644  07DB  1003               	clrc
 10645  07DC  0C32               	rrf	??___fladd,w
 10646  07DD  00B3               	movwf	??___fladd+1
 10647  07DE  0833               	movf	??___fladd+1,w
 10648  07DF  00AD               	movwf	___fladd@b+3
 10649  07E0  1FBA               	btfss	___fladd@signs,7
 10650  07E1  0008               	return
 10651  07E2  17AD               	bsf	___fladd@b+3,7
 10652  07E3  0008               	return
 10653  07E4                     __end_of___fladd:
 10654  007E                     btemp	set	126	;btemp
 10655  007E                     wtemp0	set	126
 10656                           
 10657                           	psect	idloc
 10658                           
 10659                           ;Config register IDLOC0 @ 0x2000
 10660                           ;	unspecified, using default values
 10661  2000                     	org	8192
 10662  2000  3FFF               	dw	16383
 10663                           
 10664                           ;Config register IDLOC1 @ 0x2001
 10665                           ;	unspecified, using default values
 10666  2001                     	org	8193
 10667  2001  3FFF               	dw	16383
 10668                           
 10669                           ;Config register IDLOC2 @ 0x2002
 10670                           ;	unspecified, using default values
 10671  2002                     	org	8194
 10672  2002  3FFF               	dw	16383
 10673                           
 10674                           ;Config register IDLOC3 @ 0x2003
 10675                           ;	unspecified, using default values
 10676  2003                     	org	8195
 10677  2003  3FFF               	dw	16383
 10678                           
 10679                           	psect	config
 10680                           
 10681                           ;Config register CONFIG1 @ 0x2007
 10682                           ;	Oscillator Selection bits
 10683                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
 10684                           ;	Watchdog Timer Enable bit
 10685                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
 10686                           ;	Power-up Timer Enable bit
 10687                           ;	PWRTE = OFF, PWRT disabled
 10688                           ;	RE3/MCLR pin function select bit
 10689                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
 10690                           ;	Code Protection bit
 10691                           ;	CP = OFF, Program memory code protection is disabled
 10692                           ;	Data Code Protection bit
 10693                           ;	CPD = OFF, Data memory code protection is disabled
 10694                           ;	Brown Out Reset Selection bits
 10695                           ;	BOREN = OFF, BOR disabled
 10696                           ;	Internal External Switchover bit
 10697                           ;	IESO = OFF, Internal/External Switchover mode is disabled
 10698                           ;	Fail-Safe Clock Monitor Enabled bit
 10699                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
 10700                           ;	Low Voltage Programming Enable bit
 10701                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
 10702                           ;	In-Circuit Debugger Mode bit
 10703                           ;	DEBUG = 0x1, unprogrammed default
 10704  2007                     	org	8199
 10705  2007  20D4               	dw	8404
 10706                           
 10707                           ;Config register CONFIG2 @ 0x2008
 10708                           ;	Brown-out Reset Selection bit
 10709                           ;	BOR4V = BOR21V, Brown-out Reset set to 2.1V
 10710                           ;	Flash Program Memory Self Write Enable bits
 10711                           ;	WRT = OFF, Write protection off
 10712  2008                     	org	8200
 10713  2008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    36
    Data        25
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      79
    BANK1            80     56      80
    BANK3            96     68      95
    BANK2            96      0       4

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(1) Largest target is 36
		 -> log@coeff(CODE[36]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _slave in COMMON

    _log->_frexp
    _frexp->___fleq
    ___flmul->_frexp
    ___xxtofl->__Umul8_16
    ___fladd->_frexp

Critical Paths under _main in BANK0

    None.

Critical Paths under _slave in BANK0

    _slave->_log
    _slave->i1___fltol
    _map->i1___fltol
    i1___fltol->___flsub
    ___fldiv->___flmul
    _log->_eval_poly
    _eval_poly->___flmul
    ___flmul->___fladd
    ___flsub->___fldiv
    ___fladd->___xxtofl

Critical Paths under _main in BANK1

    None.

Critical Paths under _slave in BANK1

    _slave->_map
    _map->i1___fltol
    i1___fltol->___fldiv
    ___flsub->___fldiv

Critical Paths under _main in BANK3

    _main->_RTC_read
    _setup->_USART_set
    _USART_set->___lldiv
    _I2C_Master_Init->___lldiv
    _servo->_pwm_duty_cycle
    _motor_dc->___fltol
    _RTC_read->_bcd_dec
    _bcd_dec->___bmul
    _LUX_read->___bmul
    _calculateLux->___lldiv
    ___bmul->_calculateLux
    _LUX_config->_I2C_Master_Write

Critical Paths under _slave in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _slave in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10327
                                             64 BANK3      4     4      0
                         _LUX_config
                           _LUX_read
                           _RTC_read
                            ___fltol
                      _adc_ch_switch
                           _motor_dc
                         _pulse_step
                              _servo
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1782
                    _I2C_Master_Init
                          _USART_set
                           _adc_init
                        _int_osc_MHz
                           _pwm_init
                          _tmr0_init
                        _tmr0_reload
 ---------------------------------------------------------------------------------
 (2) _tmr0_reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _tmr0_init                                            3     3      0      66
                                              0 BANK3      3     3      0
 ---------------------------------------------------------------------------------
 (2) _pwm_init                                             3     3      0      22
                                              0 BANK3      3     3      0
 ---------------------------------------------------------------------------------
 (2) _int_osc_MHz                                          3     3      0      22
                                              0 BANK3      3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             5     3      2     218
                                              0 BANK3      5     3      2
 ---------------------------------------------------------------------------------
 (2) _USART_set                                           16    12      4     738
                                             14 BANK3     16    12      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     716
                                             14 BANK3      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _servo                                                2     0      2     382
                                              4 BANK3      2     0      2
                         _USART_send
                     _pwm_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _pwm_duty_cycle                                       4     2      2     196
                                              0 BANK3      4     2      2
 ---------------------------------------------------------------------------------
 (1) _pulse_step                                           4     0      4     240
                                              0 BANK3      4     0      4
 ---------------------------------------------------------------------------------
 (1) _motor_dc                                             2     0      2     186
                                             11 BANK3      2     0      2
                         _USART_send
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_ch_switch                                        3     3      0      22
                                              0 BANK3      3     3      0
 ---------------------------------------------------------------------------------
 (1) ___fltol                                             11     7      4     405
                                              0 BANK3     11     7      4
 ---------------------------------------------------------------------------------
 (1) _RTC_read                                             2     2      0    2049
                                             62 BANK3      2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                         _USART_send
                            _bcd_dec
 ---------------------------------------------------------------------------------
 (2) _bcd_dec                                              4     4      0     288
                                             58 BANK3      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _LUX_read                                             2     2      0    4099
                                             58 BANK3      2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                         _USART_send
                             ___bmul
                       _calculateLux
 ---------------------------------------------------------------------------------
 (2) _calculateLux                                        42    38      4    2094
                                             14 BANK3     40    36      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     700
                                              0 BANK3     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     618
                                              0 BANK3     14     6      8
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     244
                                             54 BANK3      4     3      1
                       _calculateLux (ARG)
 ---------------------------------------------------------------------------------
 (2) _USART_send                                           1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     577
                                              0 BANK3      6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _LUX_config                                           2     2      0    1162
                                              2 BANK3      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1162
                                              0 BANK3      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _slave                                               24    24      0   40737
                                             32 BANK1     24    24      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___lwdiv
                           ___xxtofl
                           _adc_read
                                _log
                                _map
                          i1___fltol
                      i1_tmr0_reload
 ---------------------------------------------------------------------------------
 (5) i1_tmr0_reload                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _map                                                 10     0     10   10054
                                             22 BANK1     10     0     10
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                           _adc_read (ARG)
                          i1___fltol
 ---------------------------------------------------------------------------------
 (5) i1___fltol                                           11     7      4     281
                                             77 BANK0      2     2      0
                                             13 BANK1      9     5      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fldiv                                             26    18      8    1425
                                             56 BANK0     13     5      8
                                              0 BANK1     13    13      0
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) _log                                                  7     3      4   17360
                                             72 BANK0      7     3      4
                            ___fladd
                             ___fleq
                             ___flge
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     896
                                             12 COMMON     2     2      0
                                              0 BANK0      5     0      5
                             ___fleq
 ---------------------------------------------------------------------------------
 (7) ___fleq                                              12     4      8     520
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           16     9      7    7366
                                             56 BANK0     16     9      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             26    18      8    3760
                                             30 BANK0     26    18      8
                          __Umul8_16
                            ___fladd (ARG)
                            ___lwdiv (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (6) ___xxtofl                                            14    10      4     854
                                              9 COMMON     4     0      4
                                              0 BANK0     10    10      0
                          __Umul8_16 (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8     460
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (5) _adc_read                                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    3397
                                             69 BANK0      8     0      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    3200
                                             10 BANK0     20    12      8
                          __Umul8_16 (ARG)
                            ___lwdiv (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LUX_config
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _LUX_read
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
     _USART_send
     ___bmul
       _calculateLux (ARG)
         ___lldiv
         ___lmul
     _calculateLux
   _RTC_read
     _I2C_Master_Read
     _I2C_Master_RepeatedStart
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
     _USART_send
     _bcd_dec
       ___bmul
   ___fltol
   _adc_ch_switch
   _motor_dc
     _USART_send
     ___fltol (ARG)
   _pulse_step
   _servo
     _USART_send
     _pwm_duty_cycle
   _setup
     _I2C_Master_Init
       ___lldiv
     _USART_set
       ___lldiv
     _adc_init
     _int_osc_MHz
     _pwm_init
     _tmr0_init
     _tmr0_reload

 _slave (ROOT)
   ___fladd
     __Umul8_16 (ARG)
     ___lwdiv (ARG)
     ___xxtofl (ARG)
       __Umul8_16 (ARG)
       ___lwdiv (ARG)
     _frexp (ARG)
       ___fleq
   ___fldiv
     ___fladd (ARG)
     ___flmul (ARG)
       __Umul8_16
       ___fladd (ARG)
       ___lwdiv (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl (ARG)
   ___flmul
   ___flsub
     ___fladd
     ___fldiv (ARG)
     ___flmul (ARG)
     ___xxtofl (ARG)
   ___lwdiv
   ___xxtofl
   _adc_read
   _log
     ___fladd
     ___fleq
     ___flge
     ___flmul
     ___xxtofl
     _eval_poly
       ___fladd
       ___flmul
     _frexp
   _map
     ___fladd
     ___fldiv
     ___flmul
     ___xxtofl
     _adc_read (ARG)
     i1___fltol (ARG)
       ___fladd (ARG)
       ___fldiv (ARG)
       ___flmul (ARG)
       ___flsub (ARG)
       ___xxtofl (ARG)
   i1___fltol
   i1_tmr0_reload

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     44      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       4      11        4.2%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     38      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     110      12        0.0%
ABS                  0      0     110       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Fri Sep 23 22:26:30 2022

                               _A 00E4                                 _B 00EC                                 _C 0110  
                    ___fldiv@aexp 00AC                      ___fldiv@bexp 00AB                                 _p 01E5  
                               pc 0002                        _LUX_config 12D0                      ___fldiv@sign 00A4  
                  ___bmul@product 01C8                                _R1 00E8                                _R2 00D8  
                              _TC 01D4                                fsr 0004               __Umul8_16@word_mpld 0076  
                             l210 10EE                               l303 092A                               l233 1F79  
                             _CH0 01DA                               l165 1053                               l325 1127  
                             _CH1 01D8                               l270 148D                               l423 0FD0  
                             l327 1132                               l272 14A2                               l273 14BA  
                             l329 1155                               l290 089C                               l274 14A3  
                             l355 1F5D                               l179 07FC                               l275 14A6  
                             l267 1489                               l188 09D6                               l373 10B6  
                             l269 148A                               l374 10B8                               l702 150F  
                             l295 08D1                               l287 088B                               l389 13F1  
                             _PR2 0092                               _LUX 01DE                               _dir 01EB  
                             _map 16C0                               _min 01E4                               _log 0AAE  
                             _hrs 01E3                               fsr0 0004                               indf 0000  
                    i1___fltol@f1 00AD                      ___flmul@aexp 004C                      ___flmul@bexp 0051  
                    ___flmul@sign 004B                      ___flmul@temp 0056                      ___flmul@prod 0052  
                    ___fltol@exp1 019A                              l3101 0EBC                              l3121 0F44  
                            l3113 0F0D                              l3105 0ED5             adc_ch_switch@channels 0192  
                            l3123 0F56                              l3211 1460                              l3117 0F27  
                            l3109 0EF1                              l3125 0F5C                              l3213 1461  
                            l3221 1473                              l3215 1467                              l3151 10D2  
                            l3143 10C3                              l3217 146C                              l3225 1490  
                            l3209 145B                              l3145 10C8                              l3091 0E5F  
                            l4131 10E0                              l3147 10CD                              l3155 10D8  
                            l3229 14A9                              l4133 147B                              l3149 10CE  
                            l3261 13A3                              l4135 149A                              l4127 13D4  
                            l3271 13B8                              l3263 13A4                              l3255 139D  
                            l2633 11B5                              l3097 0EA1                              l4137 14B2  
                            l4129 1143                              l3177 113B                              l3273 13BD  
                            l3265 13A9                              l3281 13CB                              l2643 1F90  
                            l4139 091F                              l3179 114B                              l3275 13C3  
                            l3267 13AE                              l3259 13A3                              l2661 1282  
                            l2629 119F                              l3701 08BF                              l3277 13C7  
                            l3269 13B3                              l2647 1F96                              l2671 12BA  
                            l2663 1292                              l3703 08B0                              l2675 12C7  
                            l3731 090C                              l3821 14D4                              l3725 08F6  
                            l3717 0905                              l3709 08C6                              ?_map 00B6  
                            l3719 08E5                              l3817 14CB                              l3737 0917  
                            l3761 1071                              l3837 14FB                              l3749 1056  
                            l3685 07F0                              l3847 151E                              l3839 150B  
                            l3943 13FE                              l3793 09C1                              l3785 09A6  
                            l3795 09CC                              l3779 0995                              ?_log 0068  
                            u5007 0895                              u5017 08C3                              u2635 1286  
                            u5027 08CA                              u3620 0E6E                              u3621 0E6F  
                            u5037 0909                              u3622 0E74                              u2655 1294  
                            u2575 11B7                              u3703 0F37                              u3623 0E75  
                            u3615 0E42                              u5047 0910                              u2665 12A9  
                            u2585 11BF                              u3713 0F54                              u5057 09C7  
                            u5067 1329                              u2675 12BB                              u3731 0FBB  
                            u3643 0E97                              u3635 0E7A                              u3732 0FBC  
                            u3733 0FC1                              u3725 0FAA                              u3653 0EB0  
                            u3565 1039                              u4605 105E                              u3734 0FC2  
                            u4630 108E                              u3735 0FC7                              u3663 0ECB  
                            u3575 0DBB                              u3815 1100                              u3736 0FC8  
                            u4640 108F                              u3745 0FE7                              u3673 0EE5  
                            u3585 0DE7                              u4625 1082                              u3683 0F01  
                            u3595 0E13                              u3693 0F1D                              u4805 1514  
                            u3781 136F                              u3765 133F                              u3782 1370  
                            u3783 1375                              u3775 1358                              u3784 1376  
                            u4745 14DD                              u3785 137B                              u4690 09BE  
                            u3786 137C                              u4595 104D                              u4775 14FC  
                            _TMR0 0001  __end_of_I2C_Master_RepeatedStart 1F42                              _main 13F4  
                            map@x 00B6                              btemp 007E                              log@x 0068  
                            start 0012                   ___fldiv@new_exp 00A5                 ___bmul@multiplier 01C9  
                  _pwm_duty_cycle 1FBD                             ??_map 007E                             ??_log 006C  
                ?_I2C_Master_Init 019E                  ?_I2C_Master_Read 0190                  ?_I2C_Master_Wait 0070  
                ?_I2C_Master_Stop 0070                     ___fltol@sign1 0199                   __end_of___fladd 07E4  
                           ?_main 0070                   __end_of___fldiv 0DAA                   __end_of___flmul 0347  
                 __end_of___flsub 1FBD                   __end_of___fltol 152D                             _ANSEL 0188  
                 __end_of___lldiv 12D0                   __end_of_bcd_dec 1044                   __end_of___lwdiv 1197  
                           i1l151 05AB                             i1l143 0364                             i1l146 0375  
                           i1l702 0866                             i1l802 0607                             i1l806 06A0  
                           i1l910 033A                             i1l823 0759                             i1l808 067E  
                           i1l683 15B2                             i1l844 07D9                             i1l836 07C1  
                           i1l917 1FEF                             i1l686 1618                             i1l942 177A  
                           i1l678 11F0                             i1l679 120A                             i1l880 0D8E  
                           i1l882 0DA0                             i1l858 0C00                             i1l955 17D0  
                           i1l956 17DA                             i1l948 17BA                             _SPBRG 0099  
                           _TXREG 0019                adc_init@vref_minus 0191               ___lmul@multiplicand 0194  
                 int_osc_MHz@freq 0192                             _logR2 00DC                             _frexp 121E  
                           _errno 00E0                             _slave 0347                             map@x0 00B8  
                           map@x1 00BA                             map@y0 00BC                             map@y1 00BE  
                           _servo 106B                             _setup 152D                             _pulso 01EC  
                    ?_int_osc_MHz 0070                  __end_of_LUX_read 0AAE                             pclath 000A  
                __end_of_RTC_read 09DA                    i1___fltol@exp1 006E                             status 0003  
                           wtemp0 007E            __end_of_pwm_duty_cycle 1FDD                   __initialization 0015  
                     ?_USART_send 0070                       log@exponent 006D                      __end_of_main 1459  
                     ?_LUX_config 0070                      _switch_servo 01DC                            ??_main 01D0  
                   _adc_ch_switch 0887                 ?_I2C_Master_Start 0070                 ?_I2C_Master_Write 0190  
                    ?_tmr0_reload 0070                ??_I2C_Master_Start 0190                ??_I2C_Master_Write 0192  
                          ?_frexp 0020                            _ADRESH 001E                            _ADRESL 009E  
                          _CCPR1L 0015                            ?_slave 0070                            ?_servo 0194  
                          ?_setup 0070                            _ANSELH 0189                  __end_of_adc_init 14C2  
                __end_of_adc_read 1F55                            i1l3003 02F4                            i1l3013 0323  
                          i1l3007 030A                            i1l3305 15CC                            i1l3401 0C6A  
                          i1l3403 0CD5                            i1l3309 15F2                            i1l3501 17F7  
                          i1l2613 1FE7                            i1l3413 0CEC                            i1l3333 0BC3  
                          i1l2711 05DD                            i1l3327 0BB3                            i1l2705 05D2  
                          i1l3513 1244                            i1l3425 0D1F                            i1l3417 0CDB  
                          i1l3353 0BF3                            i1l3337 0BC7                            i1l2803 06CF  
                          i1l3531 16B7                            i1l3443 0D72                            i1l3419 0D00  
                          i1l3347 0BE3                            i1l3339 0BD0                            i1l2805 06D1  
                          i1l2813 06E1                            i1l2733 05FF                            i1l2709 05D5  
                          i1l2901 006F                            i1l3429 0D22                            i1l3373 0C2F  
                          i1l3357 0BF7                            i1l3541 0825                            i1l2831 076B  
                          i1l2823 074B                            i1l2903 0077                            i1l3455 0D9B  
                          i1l3439 0D57                            i1l3391 0C8B                            i1l3367 0C21  
                          i1l2729 05FC                            i1l3473 1789                            i1l2921 009C  
                          i1l3393 0C97                            i1l3537 081B                            i1l2739 0611  
                          i1l3467 1772                            i1l2853 078C                            i1l2845 0781  
                          i1l3477 178D                            i1l2917 0092                            i1l3557 0850  
                          i1l3901 036A                            i1l2839 077A                            i1l2847 0783  
                          i1l3487 17CE                            i1l3479 179F                            i1l2919 0094  
                          i1l2687 121C                            i1l3399 0CCE                            i1l3567 0877  
                          i1l3559 0862                            i1l2857 078E                            i1l2777 0689  
                          i1l2769 064D                            i1l3489 17BF                            i1l2929 00AA  
                          i1l3593 0AFA                            i1l2875 07D1                            i1l2795 06AE  
                          i1l2779 068B                            i1l2787 069A                            i1l3587 0AD4  
                          i1l3915 0386                            i1l3861 1163                            i1l2981 028C  
                          i1l3909 037D                            i1l3917 0387                            i1l2879 07D5  
                          i1l3863 1171                            i1l2983 02A9                            i1l3935 05A8  
                          i1l3873 1192                            i1l2993 02C2                            i1l2899 006D  
                          u301_25 076D                            i1l3869 1187                            i1l2989 02C0  
                          i1l3893 0358                            u311_25 07AB                            u401_25 0C8E  
                          u330_25 0154                            u402_25 0CAD                            u403_20 0CCC  
                          u251_25 1FF0                            u403_25 0CBA                            u403_26 0CBC  
                          u403_27 0CC2                            u403_28 0CC4                            u403_29 0CCA  
                          u340_25 0278                            u341_25 0290                            u333_25 01AD  
                          u430_25 17E2                            u422_25 1796                            u350_25 02DF  
                          u406_25 0CE0                            u351_25 02FD                            u343_25 029B  
                          u271_25 1218                            u415_25 0D41                            u424_25 17B2  
                          u352_25 0315                            u416_25 0D61                            u408_25 0CEF  
                          u281_25 0661                            u337_25 0241                            u417_25 0D7D  
                          u441_25 0851                            u282_20 066D                            u426_25 17C7  
                          u434_25 162E                            u283_20 066E                            u435_25 1664  
                          u444_25 086C                            u294_25 06D5                            u286_25 068F  
                          u438_25 082F                            u295_23 06F3                            u296_21 070C  
                          u296_22 070D                            u296_23 0712                            u296_24 0713  
                          u296_25 0718                            u296_26 0719                            u297_20 0720  
                          u297_21 0721                            u385_21 15DD                            u297_22 0726  
                          u385_22 15DE                            u297_23 0727                            u385_23 15E3  
                          u385_24 15E4                            u385_25 15E9                            u385_26 15EA  
                          u387_21 1603                            u387_22 1604                            u387_23 1609  
                          u387_24 160A                            u387_25 160F                            u387_26 1610  
                          u484_25 1166                            u486_25 1172                            u398_25 0C74  
                          u487_25 117E                            u399_25 0C7F                            u488_25 1188  
                   calculateLux@b 01B2                     calculateLux@m 01B4                            _SPBRGH 009A  
                          _SSPADD 0093                            _SSPCON 0014                            _SSPBUF 0013  
                __end_of___xxtofl 1800                   ?_pwm_duty_cycle 0190          _I2C_Master_RepeatedStart 1F3D  
                          ___flge 1598                            ___bmul 1F8E                            ___fleq 11D6  
                          ___lmul 1197                         ??___fladd 0032                         ??___fldiv 0060  
                       ??___flmul 0046                         ??___flsub 007E                         ??___fltol 0194  
                       ??___lldiv 0198                         ??_bcd_dec 01CA                         ??___lwdiv 0074  
                    pulse_step@bt 0190                            _lowCH0 01E2                            _lowCH1 01E0  
                  ?_adc_ch_switch 0070                 __end_of_USART_set 1391                 __end_ofi1___fltol 0887  
                    _calculateLux 0DAA                  __end_of_motor_dc 106B             calculateLux@broadband 019E  
                          saved_w 007E                   i1___fltol@sign1 006D                  __end_of_pwm_init 115B  
                 pwm_init@channel 0192                        ___flge@ff1 0070                        ___flge@ff2 0074  
                    ___xxtofl@arg 0026                      ___xxtofl@exp 0025                      ___xxtofl@val 0079  
                      ___fleq@ff1 0070                        ___fleq@ff2 0074                  __end_oflog@coeff 102A  
         __end_of__initialization 004E                      eval_poly@res 0064                        ___fltol@f1 0190  
             ___bmul@multiplicand 01C6                    __pcstackCOMMON 0070                      __pidataBANK1 1F82  
                    __pidataBANK2 102A                      __pidataBANK3 1F6F                     __end_of_frexp 1272  
                   __end_of_slave 05B7                     __end_of_servo 1094                     __end_of_setup 1598  
                       ?_LUX_read 0070                         ?_RTC_read 0070                    _OPTION_REGbits 0081  
                  adc_init@adc_cs 0194                           ??_frexp 007C                           ??_slave 00C0  
                         ??_servo 0196                           ??_setup 01AE                        __pbssBANK1 00D8  
                      __pbssBANK3 01D4                 __end_of__Umul8_16 2000                        __pmaintext 13F4  
                         ?___flge 0070                           ?___bmul 01C6                           ?___fleq 0070  
                         ?___lmul 0190                        __pintentry 0004                           _CCP1CON 0017  
                         _CCP2CON 001D                   ??_adc_ch_switch 0190                    ___lmul@product 0199  
                       ?_adc_init 0190                         ?_adc_read 0070                        ??_LUX_read 01CA  
                      ??_RTC_read 01CE                         ?___xxtofl 0079                    calculateLux@ir 01A0  
                pulse_step@signal 0192                           _SSPCON2 0091                           _SSPSTAT 0094  
                      __stringtab 1000                      ??_USART_send 0190                         ?_motor_dc 019B  
                         ___fladd 05B7                      ??_LUX_config 0192                           ___fldiv 0BA0  
                         ___flmul 0052                           ___flsub 1F9F                           ___fltol 14C2  
                         ___lldiv 1272                         ?_pwm_init 0070                           _bcd_dec 102E  
                         ___lwdiv 115B                 __end_of_eval_poly 16C0                           _highCH0 01E1  
                         _highCH1 01DF                        ??_adc_init 0192                        ??_adc_read 0072  
                         __ptext1 152D                           __ptext2 1F42                           __ptext3 1391  
                         __ptext4 1123                           __ptext5 10BF                           __ptext6 1459  
                         __ptext7 132F                           __ptext8 10F0                           __ptext9 106B  
                       _T2CONbits 0012                        ??___xxtofl 0020                     i1_tmr0_reload 1F47  
                         clrloop0 1F56                __end_of_USART_send 1F82              end_of_initialization 004E  
               __end_of_tmr0_init 13F4                        _slave$1780 00C8                        _slave$1781 00CC  
                      _slave$1782 00D0                        _slave$1783 00D4        ??_I2C_Master_RepeatedStart 0190  
              __end_of_LUX_config 132F                  ??_pwm_duty_cycle 0192                   ___lldiv@divisor 0190  
                 ___lldiv@counter 019D                        ??_motor_dc 019D                         _RCSTAbits 0018  
                I2C_Master_Init@c 019E                  I2C_Master_Read@a 0190                        ??_pwm_init 0190  
                calculateLux@temp 01AE                         _PORTAbits 0005                         _PORTBbits 0006  
                       _PORTDbits 0008                       ___fladd@grs 003D                     ___xxtofl@sign 0024  
                       _TRISAbits 0085                         _TRISBbits 0086                         _TRISCbits 0087  
                       _TRISDbits 0088                         _USART_set 132F                    ?i1_tmr0_reload 0070  
                     ___fldiv@grs 00A7                         i1___fltol 0811                       ___fldiv@rem 00A0  
                      _pulse_step 07E4                       ___flmul@grs 004D                       _CCP1CONbits 0017  
                     _CCP2CONbits 001D                         _TXSTAbits 0098                    __end_of___flge 162B  
                  __end_of___bmul 1F9F                    __end_of___fleq 121E                    __end_of___lmul 11D6  
               adc_init@vref_plus 0190                       _BAUDCTLbits 0187               start_initialization 0015  
                      eval_poly@d 005C                        eval_poly@n 005D                        eval_poly@x 0058  
                      ?_USART_set 019E                       __end_of_map 175C                       __end_of_log 0BA0  
                      ?i1___fltol 00AD                    USART_send@data 0190                        frexp@value 0020  
               ??_I2C_Master_Init 01A2                 ??_I2C_Master_Read 0192                 ??_I2C_Master_Wait 0190  
               ??_I2C_Master_Stop 0190                 USART_set@baudrate 019E              calculateLux@channel0 01BE  
            calculateLux@channel1 01BA                          ??___flge 0078                          ??___bmul 01C7  
                        ??___fleq 0078                          ??___lmul 0198                        init_fetch0 0800  
                       __Umul8_16 1FDD                       __pdataBANK1 00E4                       __pdataBANK2 0110  
                     __pdataBANK3 01E6                         ___fladd@a 002E                         ___fladd@b 002A  
                       ___fldiv@a 0058                         ___fldiv@b 005C                   ??i1_tmr0_reload 0070  
                       ___flmul@a 0042                         ___flmul@b 003E                         ___flsub@a 0065  
                       ___flsub@b 0069                         ___latbits 0002                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK3 0190                     ??_int_osc_MHz 0190  
                     ?_pulse_step 0190                  _I2C_Master_Start 1F33                  _I2C_Master_Write 1F66  
                       bcd_dec@no 01CD                  ___lwdiv@dividend 0072          pwm_duty_cycle@duty_cycle 0190  
                        ?___fladd 002A                          ?___fldiv 0058                          ?___flmul 003E  
                        ?___flsub 0065                          ?___fltol 0190                          ?___lldiv 0190  
                        ?_bcd_dec 0070                        ?__Umul8_16 0070                          ?___lwdiv 0070  
                       __pstrings 1000             __end_of_adc_ch_switch 092B                         _eval_poly 162B  
                   ??_tmr0_reload 0190                       ??_USART_set 01A2                       ??i1___fltol 00B1  
                ___lwdiv@quotient 0075                 interrupt_function 0004                          _IOCBbits 0096  
                       clear_ram0 1F55                         _tmr0_init 1391                          _PIE1bits 008C  
             __end_of_int_osc_MHz 10F0                          _OLD_TEMP 01E6                          _PIR1bits 000C  
                        _TEMP_POT 00E2                   calculateLux@lux 01A6                tmr0_init@prescaler 0192  
                      _ADCON0bits 001F                          _LUX_read 09DA                       __stringbase 1005  
                      _ADCON1bits 009F                          _RTC_read 092B                     ?_calculateLux 019E  
                        _WPUBbits 0095                        ?_eval_poly 0058               I2C_Master_Read@temp 0194  
               ___lmul@multiplier 0190               __end_of_tmr0_reload 1F47                         frexp@eptr 0024  
                      ?_tmr0_init 0070               calculateLux@chScale 01B6                       ??__Umul8_16 0072  
       ?_I2C_Master_RepeatedStart 0070                __end_of__stringtab 1006                          _adc_init 1459  
                        _adc_read 1F4D                    ??_calculateLux 01A2                   _I2C_Master_Init 10F0  
                 _I2C_Master_Read 1094                          ___xxtofl 175C                   _I2C_Master_Wait 1F5D  
                 _I2C_Master_Stop 1F38                   ___lwdiv@divisor 0070                   ___lwdiv@counter 0077  
                        __ptext10 1FBD                          __ptext11 07E4                          __ptext20 1272  
                        __ptext12 1044                          __ptext21 1F8E                          __ptext13 0887  
                        __ptext30 0347                          __ptext22 1F78                          __ptext14 14C2  
                        __ptext31 1F47                          __ptext23 1F3D                          __ptext15 092B  
                        __ptext40 1FDD                          __ptext32 16C0                          __ptext24 1094  
                        __ptext16 102E                          __ptext41 175C                          __ptext33 0811  
                        __ptext25 12D0                          __ptext17 09DA                          __ptext42 1598  
                        __ptext34 0BA0                          __ptext26 1F66                          __ptext18 0DAA  
                        __ptext43 1F4D                          __ptext35 0AAE                          __ptext27 1F38  
                        __ptext19 1197                          __ptext44 115B                          __ptext36 121E  
                        __ptext28 1F33                          __ptext45 1F9F                          __ptext37 11D6  
                        __ptext29 1F5D                          __ptext46 05B7                          __ptext38 162B  
                        __ptext39 0052                       _int_osc_MHz 10BF                          _last_LUX 01EA  
                        _last_min 01EE                          _last_hrs 01ED                          _last_mov 01E8  
                        _motor_dc 1044                          _pwm_init 1123                          log@coeff 1006  
        __end_of_I2C_Master_Start 1F38          __end_of_I2C_Master_Write 1F6F                        _INTCONbits 000B  
                     ??_eval_poly 005F                       _tmr0_reload 1F42                          init_ram0 0804  
                    ??_pulse_step 0194                calculateLux@ratio1 01AA                          intlevel1 0000  
                ___lldiv@dividend 0194                       ??_tmr0_init 0190                         stringcode 1000  
                    motor_dc@temp 019B                        _OSCCONbits 008F                          servo@mov 0194  
         __end_of_I2C_Master_Init 1123           __end_of_I2C_Master_Read 10BF           __end_of_I2C_Master_Wait 1F66  
         __end_of_I2C_Master_Stop 1F3D                __end_of_pulse_step 0800                 calculateLux@ratio 01C2  
          __Umul8_16@multiplicand 0070                  ___lldiv@quotient 0199                 I2C_Master_Write@d 0190  
                        stringdir 1000                          stringtab 1000             __end_ofi1_tmr0_reload 1F4D  
                     _SSPCON2bits 0091                     ___fladd@signs 003A                      ___fladd@aexp 003B  
                    ___fladd@bexp 003C              __Umul8_16@multiplier 0078              __end_of_calculateLux 1000  
               __Umul8_16@product 0074                        _USART_send 1F78  
